{
    "name": "AtomicMarketplaceV2",
    "structs": {},
    "methods": [
        {
            "name": "initializeMarketplace",
            "args": [
                {
                    "type": "string",
                    "name": "adminAddress"
                },
                {
                    "type": "uint64",
                    "name": "blContractId"
                },
                {
                    "type": "uint64",
                    "name": "marketplaceFeeRate"
                },
                {
                    "type": "uint64",
                    "name": "usdcAssetId"
                },
                {
                    "type": "uint64",
                    "name": "usdtAssetId"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Initialize marketplace with configuration",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "createListing",
            "args": [
                {
                    "type": "uint64",
                    "name": "blId"
                },
                {
                    "type": "uint64",
                    "name": "pricePerShare"
                },
                {
                    "type": "uint64",
                    "name": "totalShares"
                },
                {
                    "type": "uint64",
                    "name": "minPurchase"
                },
                {
                    "type": "uint64",
                    "name": "maxPurchase"
                },
                {
                    "type": "uint64",
                    "name": "paymentMethods"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Create marketplace listing for fractionalized BL shares",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "atomicPurchase",
            "args": [
                {
                    "type": "uint64",
                    "name": "listingId"
                },
                {
                    "type": "uint64",
                    "name": "sharesPurchased"
                },
                {
                    "type": "uint64",
                    "name": "paymentMethod"
                },
                {
                    "type": "uint64",
                    "name": "maxSlippage"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "ATOMIC SETTLEMENT - The key innovation (simplified implementation)\nThis eliminates manual intervention from the XDC version",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "atomicCrossBorderPurchase",
            "args": [
                {
                    "type": "uint64",
                    "name": "listingId"
                },
                {
                    "type": "uint64",
                    "name": "sharesPurchased"
                },
                {
                    "type": "uint64",
                    "name": "fromCurrency"
                },
                {
                    "type": "uint64",
                    "name": "toCurrency"
                },
                {
                    "type": "uint64",
                    "name": "exchangeRate"
                },
                {
                    "type": "uint64",
                    "name": "maxSlippage"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Cross-border atomic settlement (simplified)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getListingInfo",
            "args": [
                {
                    "type": "uint64",
                    "name": "listingId"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get listing information (simplified)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getSettlementInfo",
            "args": [
                {
                    "type": "uint64",
                    "name": "settlementId"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get settlement information (simplified)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getMarketplaceStats",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get marketplace statistics",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getUserStats",
            "args": [
                {
                    "type": "string",
                    "name": "userAddress"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get user trading statistics (simplified)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "cancelListing",
            "args": [
                {
                    "type": "uint64",
                    "name": "listingId"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Cancel listing (simplified)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "updateListing",
            "args": [
                {
                    "type": "uint64",
                    "name": "listingId"
                },
                {
                    "type": "uint64",
                    "name": "newPricePerShare"
                },
                {
                    "type": "uint64",
                    "name": "newMinPurchase"
                },
                {
                    "type": "uint64",
                    "name": "newMaxPurchase"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Update listing parameters (simplified)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "emergencyPauseMarketplace",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Emergency pause (simplified)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "resumeMarketplace",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Resume operations (simplified)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "withdrawMarketplaceFees",
            "args": [
                {
                    "type": "uint64",
                    "name": "amount"
                },
                {
                    "type": "uint64",
                    "name": "paymentMethod"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Withdraw collected fees (simplified)",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 10,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "listingCounter": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bGlzdGluZ0NvdW50ZXI="
                },
                "settlementCounter": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "c2V0dGxlbWVudENvdW50ZXI="
                },
                "totalListings": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxMaXN0aW5ncw=="
                },
                "totalVolume": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxWb2x1bWU="
                },
                "totalFeesCollected": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxGZWVzQ29sbGVjdGVk"
                },
                "marketplaceFeeRate": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bWFya2V0cGxhY2VGZWVSYXRl"
                },
                "blContractId": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YmxDb250cmFjdElk"
                },
                "emergencyPause": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "ZW1lcmdlbmN5UGF1c2U="
                },
                "usdcAssetId": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dXNkY0Fzc2V0SWQ="
                },
                "usdtAssetId": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dXNkdEFzc2V0SWQ="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        270,
                        327,
                        351,
                        375,
                        445,
                        493,
                        560,
                        634,
                        704,
                        785,
                        826,
                        859,
                        900
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        951
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        273,
                        330,
                        354,
                        378,
                        448,
                        496,
                        563,
                        637,
                        707,
                        788,
                        829,
                        862,
                        903
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        1184,
                        1193,
                        1198,
                        1262,
                        1271,
                        1286,
                        1298
                    ],
                    "errorMessage": "check GlobalState exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiADAAFkJgsOZW1lcmdlbmN5UGF1c2UObGlzdGluZ0NvdW50ZXIRc2V0dGxlbWVudENvdW50ZXIEFR98dQ10b3RhbExpc3RpbmdzC3RvdGFsVm9sdW1lEnRvdGFsRmVlc0NvbGxlY3RlZBJtYXJrZXRwbGFjZUZlZVJhdGUMYmxDb250cmFjdElkC3VzZGNBc3NldElkC3VzZHRBc3NldElkMRtBAwiCDQTpwLFBBPuF+ZQEPzgvZwR0B2oCBME7RXcEUSbu0AR2w5ukBCLhK3wEtXmUbQRPVoCNBIoZzb0EO5XEjATUL9OfNhoAjg0CeAJPAi4CBQG0AW4BJADhALEAawBTADsAAiJDMRkURDEYRIAtFR98dQAnTWFya2V0cGxhY2UgZmVlcyB3aXRoZHJhd24gc3VjY2Vzc2Z1bGx5sCNDMRkURDEYRIgEC0kVFlcGAkxQK0xQsCNDMRkURDEYRIgDwkkVFlcGAkxQK0xQsCNDMRkURDEYRIA6FR98dQA0TGlzdGluZyB1cGRhdGVkIHdpdGggbmV3IHByaWNpbmcgYW5kIHB1cmNoYXNlIGxpbWl0c7AjQzEZFEQxGESAJBUffHUAHkxpc3RpbmcgY2FuY2VsbGVkIHN1Y2Nlc3NmdWxsebAjQzEZFEQxGESANxUffHUAMVVzZXIgU3RhdHM6IFRyYWRpbmcgc3RhdGlzdGljcyBhdmFpbGFibGUgZm9yIHVzZXKwI0MxGRREMRhEgD4VH3x1ADhNYXJrZXRwbGFjZSBTdGF0czogVHJhZGluZyB2b2x1bWUgYW5kIGZlZSBkYXRhIGF2YWlsYWJsZbAjQzEZFEQxGESAOhUffHUANFNldHRsZW1lbnQ6IEF0b21pYyBzZXR0bGVtZW50IGNvbXBsZXRlZCBzdWNjZXNzZnVsbHmwI0MxGRREMRhEgEUVH3x1AD9MaXN0aW5nOiBBY3RpdmUgbWFya2V0cGxhY2UgbGlzdGluZyB3aXRoIGZ1bGwgZGV0YWlscyBhdmFpbGFibGWwI0MxGRREMRhENhoBFzYaAhc2GgMXNhoEFzYaBRc2GgYXiAHpFitMULAjQzEZFEQxGEQ2GgEXNhoCFzYaAxc2GgQXiAFlFitMULAjQzEZFEQxGEQ2GgEXNhoCFzYaAxc2GgQXNhoFFzYaBheIAQgWK0xQsCNDMRkURDEYRDYaAVcCADYaAhc2GgMXNhoEFzYaBReIABlJFRZXBgJMUCtMULAjQzEZQP1VMRgURCNDigUBIillRQFAAAMpImciKmVFAUAAAyoiZyInBGVFAUAABCcEImciJwVlRQFAAAQnBSJnIicGZUUBQAAEJwYiZyInB2VFAUAABScHi/1nIicIZUUBQAAFJwiL/GciJwllRQFAAAUnCYv+ZyInCmVFAUAABScKi/9nIihlRQFAAAMoImeAQkF0b21pYyBNYXJrZXRwbGFjZSBWMiBpbml0aWFsaXplZCB3aXRoIGFkbWluIGFuZCBmZWUgY29uZmlndXJhdGlvbomKBgEiKWVFAUAAAykiZyInBGVFAUAABCcEImciKWVEIwgpTGciKWVEIicEZUQjCCcETGeJigQBIiplRQFAAAMqImciJwVlRQFAAAQnBSJnIicGZUUBQAAEJwYiZyInB2VFAUAABCcHJGciKmVEIwgqTGciKmVEi/2BgIl6C0kkCiInBWVETwIIJwVMZyInBmVECCcGTGeJigYBi/qL+4ECi/+I/4+JIihlRQFAAAMoImcoI2eAIE1hcmtldHBsYWNlIHBhdXNlZCBmb3IgZW1lcmdlbmN5iSIoZUUBQAADKCJnKCJngB5NYXJrZXRwbGFjZSBvcGVyYXRpb25zIHJlc3VtZWSJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}