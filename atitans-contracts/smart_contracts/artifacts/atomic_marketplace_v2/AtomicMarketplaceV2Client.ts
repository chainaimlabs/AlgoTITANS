/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"AtomicMarketplaceV2","structs":{},"methods":[{"name":"initializeMarketplace","args":[{"type":"string","name":"adminAddress"},{"type":"uint64","name":"blContractId"},{"type":"uint64","name":"marketplaceFeeRate"},{"type":"uint64","name":"usdcAssetId"},{"type":"uint64","name":"usdtAssetId"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Initialize marketplace with configuration","events":[],"recommendations":{}},{"name":"createListing","args":[{"type":"uint64","name":"blId"},{"type":"uint64","name":"pricePerShare"},{"type":"uint64","name":"totalShares"},{"type":"uint64","name":"minPurchase"},{"type":"uint64","name":"maxPurchase"},{"type":"uint64","name":"paymentMethods"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Create marketplace listing for fractionalized BL shares","events":[],"recommendations":{}},{"name":"atomicPurchase","args":[{"type":"uint64","name":"listingId"},{"type":"uint64","name":"sharesPurchased"},{"type":"uint64","name":"paymentMethod"},{"type":"uint64","name":"maxSlippage"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"ATOMIC SETTLEMENT - The key innovation (simplified implementation)\nThis eliminates manual intervention from the XDC version","events":[],"recommendations":{}},{"name":"atomicCrossBorderPurchase","args":[{"type":"uint64","name":"listingId"},{"type":"uint64","name":"sharesPurchased"},{"type":"uint64","name":"fromCurrency"},{"type":"uint64","name":"toCurrency"},{"type":"uint64","name":"exchangeRate"},{"type":"uint64","name":"maxSlippage"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Cross-border atomic settlement (simplified)","events":[],"recommendations":{}},{"name":"getListingInfo","args":[{"type":"uint64","name":"listingId"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get listing information (simplified)","events":[],"recommendations":{}},{"name":"getSettlementInfo","args":[{"type":"uint64","name":"settlementId"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get settlement information (simplified)","events":[],"recommendations":{}},{"name":"getMarketplaceStats","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get marketplace statistics","events":[],"recommendations":{}},{"name":"getUserStats","args":[{"type":"string","name":"userAddress"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get user trading statistics (simplified)","events":[],"recommendations":{}},{"name":"cancelListing","args":[{"type":"uint64","name":"listingId"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Cancel listing (simplified)","events":[],"recommendations":{}},{"name":"updateListing","args":[{"type":"uint64","name":"listingId"},{"type":"uint64","name":"newPricePerShare"},{"type":"uint64","name":"newMinPurchase"},{"type":"uint64","name":"newMaxPurchase"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Update listing parameters (simplified)","events":[],"recommendations":{}},{"name":"emergencyPauseMarketplace","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Emergency pause (simplified)","events":[],"recommendations":{}},{"name":"resumeMarketplace","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Resume operations (simplified)","events":[],"recommendations":{}},{"name":"withdrawMarketplaceFees","args":[{"type":"uint64","name":"amount"},{"type":"uint64","name":"paymentMethod"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Withdraw collected fees (simplified)","events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":10,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{"listingCounter":{"keyType":"AVMString","valueType":"AVMUint64","key":"bGlzdGluZ0NvdW50ZXI="},"settlementCounter":{"keyType":"AVMString","valueType":"AVMUint64","key":"c2V0dGxlbWVudENvdW50ZXI="},"totalListings":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxMaXN0aW5ncw=="},"totalVolume":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxWb2x1bWU="},"totalFeesCollected":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxGZWVzQ29sbGVjdGVk"},"marketplaceFeeRate":{"keyType":"AVMString","valueType":"AVMUint64","key":"bWFya2V0cGxhY2VGZWVSYXRl"},"blContractId":{"keyType":"AVMString","valueType":"AVMUint64","key":"YmxDb250cmFjdElk"},"emergencyPause":{"keyType":"AVMString","valueType":"AVMUint64","key":"ZW1lcmdlbmN5UGF1c2U="},"usdcAssetId":{"keyType":"AVMString","valueType":"AVMUint64","key":"dXNkY0Fzc2V0SWQ="},"usdtAssetId":{"keyType":"AVMString","valueType":"AVMUint64","key":"dXNkdEFzc2V0SWQ="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[270,327,351,375,445,493,560,634,704,785,826,859,900],"errorMessage":"OnCompletion is not NoOp"},{"pc":[951],"errorMessage":"can only call when creating"},{"pc":[273,330,354,378,448,496,563,637,707,788,829,862,903],"errorMessage":"can only call when not creating"},{"pc":[1184,1193,1198,1262,1271,1286,1298],"errorMessage":"check GlobalState exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiADAAFkJgsOZW1lcmdlbmN5UGF1c2UObGlzdGluZ0NvdW50ZXIRc2V0dGxlbWVudENvdW50ZXIEFR98dQ10b3RhbExpc3RpbmdzC3RvdGFsVm9sdW1lEnRvdGFsRmVlc0NvbGxlY3RlZBJtYXJrZXRwbGFjZUZlZVJhdGUMYmxDb250cmFjdElkC3VzZGNBc3NldElkC3VzZHRBc3NldElkMRtBAwiCDQTpwLFBBPuF+ZQEPzgvZwR0B2oCBME7RXcEUSbu0AR2w5ukBCLhK3wEtXmUbQRPVoCNBIoZzb0EO5XEjATUL9OfNhoAjg0CeAJPAi4CBQG0AW4BJADhALEAawBTADsAAiJDMRkURDEYRIAtFR98dQAnTWFya2V0cGxhY2UgZmVlcyB3aXRoZHJhd24gc3VjY2Vzc2Z1bGx5sCNDMRkURDEYRIgEC0kVFlcGAkxQK0xQsCNDMRkURDEYRIgDwkkVFlcGAkxQK0xQsCNDMRkURDEYRIA6FR98dQA0TGlzdGluZyB1cGRhdGVkIHdpdGggbmV3IHByaWNpbmcgYW5kIHB1cmNoYXNlIGxpbWl0c7AjQzEZFEQxGESAJBUffHUAHkxpc3RpbmcgY2FuY2VsbGVkIHN1Y2Nlc3NmdWxsebAjQzEZFEQxGESANxUffHUAMVVzZXIgU3RhdHM6IFRyYWRpbmcgc3RhdGlzdGljcyBhdmFpbGFibGUgZm9yIHVzZXKwI0MxGRREMRhEgD4VH3x1ADhNYXJrZXRwbGFjZSBTdGF0czogVHJhZGluZyB2b2x1bWUgYW5kIGZlZSBkYXRhIGF2YWlsYWJsZbAjQzEZFEQxGESAOhUffHUANFNldHRsZW1lbnQ6IEF0b21pYyBzZXR0bGVtZW50IGNvbXBsZXRlZCBzdWNjZXNzZnVsbHmwI0MxGRREMRhEgEUVH3x1AD9MaXN0aW5nOiBBY3RpdmUgbWFya2V0cGxhY2UgbGlzdGluZyB3aXRoIGZ1bGwgZGV0YWlscyBhdmFpbGFibGWwI0MxGRREMRhENhoBFzYaAhc2GgMXNhoEFzYaBRc2GgYXiAHpFitMULAjQzEZFEQxGEQ2GgEXNhoCFzYaAxc2GgQXiAFlFitMULAjQzEZFEQxGEQ2GgEXNhoCFzYaAxc2GgQXNhoFFzYaBheIAQgWK0xQsCNDMRkURDEYRDYaAVcCADYaAhc2GgMXNhoEFzYaBReIABlJFRZXBgJMUCtMULAjQzEZQP1VMRgURCNDigUBIillRQFAAAMpImciKmVFAUAAAyoiZyInBGVFAUAABCcEImciJwVlRQFAAAQnBSJnIicGZUUBQAAEJwYiZyInB2VFAUAABScHi/1nIicIZUUBQAAFJwiL/GciJwllRQFAAAUnCYv+ZyInCmVFAUAABScKi/9nIihlRQFAAAMoImeAQkF0b21pYyBNYXJrZXRwbGFjZSBWMiBpbml0aWFsaXplZCB3aXRoIGFkbWluIGFuZCBmZWUgY29uZmlndXJhdGlvbomKBgEiKWVFAUAAAykiZyInBGVFAUAABCcEImciKWVEIwgpTGciKWVEIicEZUQjCCcETGeJigQBIiplRQFAAAMqImciJwVlRQFAAAQnBSJnIicGZUUBQAAEJwYiZyInB2VFAUAABCcHJGciKmVEIwgqTGciKmVEi/2BgIl6C0kkCiInBWVETwIIJwVMZyInBmVECCcGTGeJigYBi/qL+4ECi/+I/4+JIihlRQFAAAMoImcoI2eAIE1hcmtldHBsYWNlIHBhdXNlZCBmb3IgZW1lcmdlbmN5iSIoZUUBQAADKCJnKCJngB5NYXJrZXRwbGFjZSBvcGVyYXRpb25zIHJlc3VtZWSJ","clear":"CoEBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the AtomicMarketplaceV2 contract
 */
export type AtomicMarketplaceV2Args = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'initializeMarketplace(string,uint64,uint64,uint64,uint64)string': {
      adminAddress: string
      blContractId: bigint | number
      marketplaceFeeRate: bigint | number
      usdcAssetId: bigint | number
      usdtAssetId: bigint | number
    }
    'createListing(uint64,uint64,uint64,uint64,uint64,uint64)uint64': {
      blId: bigint | number
      pricePerShare: bigint | number
      totalShares: bigint | number
      minPurchase: bigint | number
      maxPurchase: bigint | number
      paymentMethods: bigint | number
    }
    'atomicPurchase(uint64,uint64,uint64,uint64)uint64': {
      listingId: bigint | number
      sharesPurchased: bigint | number
      paymentMethod: bigint | number
      maxSlippage: bigint | number
    }
    'atomicCrossBorderPurchase(uint64,uint64,uint64,uint64,uint64,uint64)uint64': {
      listingId: bigint | number
      sharesPurchased: bigint | number
      fromCurrency: bigint | number
      toCurrency: bigint | number
      exchangeRate: bigint | number
      maxSlippage: bigint | number
    }
    'getListingInfo(uint64)string': {
      listingId: bigint | number
    }
    'getSettlementInfo(uint64)string': {
      settlementId: bigint | number
    }
    'getMarketplaceStats()string': Record<string, never>
    'getUserStats(string)string': {
      userAddress: string
    }
    'cancelListing(uint64)string': {
      listingId: bigint | number
    }
    'updateListing(uint64,uint64,uint64,uint64)string': {
      listingId: bigint | number
      newPricePerShare: bigint | number
      newMinPurchase: bigint | number
      newMaxPurchase: bigint | number
    }
    'emergencyPauseMarketplace()string': Record<string, never>
    'resumeMarketplace()string': Record<string, never>
    'withdrawMarketplaceFees(uint64,uint64)string': {
      amount: bigint | number
      paymentMethod: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'initializeMarketplace(string,uint64,uint64,uint64,uint64)string': [adminAddress: string, blContractId: bigint | number, marketplaceFeeRate: bigint | number, usdcAssetId: bigint | number, usdtAssetId: bigint | number]
    'createListing(uint64,uint64,uint64,uint64,uint64,uint64)uint64': [blId: bigint | number, pricePerShare: bigint | number, totalShares: bigint | number, minPurchase: bigint | number, maxPurchase: bigint | number, paymentMethods: bigint | number]
    'atomicPurchase(uint64,uint64,uint64,uint64)uint64': [listingId: bigint | number, sharesPurchased: bigint | number, paymentMethod: bigint | number, maxSlippage: bigint | number]
    'atomicCrossBorderPurchase(uint64,uint64,uint64,uint64,uint64,uint64)uint64': [listingId: bigint | number, sharesPurchased: bigint | number, fromCurrency: bigint | number, toCurrency: bigint | number, exchangeRate: bigint | number, maxSlippage: bigint | number]
    'getListingInfo(uint64)string': [listingId: bigint | number]
    'getSettlementInfo(uint64)string': [settlementId: bigint | number]
    'getMarketplaceStats()string': []
    'getUserStats(string)string': [userAddress: string]
    'cancelListing(uint64)string': [listingId: bigint | number]
    'updateListing(uint64,uint64,uint64,uint64)string': [listingId: bigint | number, newPricePerShare: bigint | number, newMinPurchase: bigint | number, newMaxPurchase: bigint | number]
    'emergencyPauseMarketplace()string': []
    'resumeMarketplace()string': []
    'withdrawMarketplaceFees(uint64,uint64)string': [amount: bigint | number, paymentMethod: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type AtomicMarketplaceV2Returns = {
  'initializeMarketplace(string,uint64,uint64,uint64,uint64)string': string
  'createListing(uint64,uint64,uint64,uint64,uint64,uint64)uint64': bigint
  'atomicPurchase(uint64,uint64,uint64,uint64)uint64': bigint
  'atomicCrossBorderPurchase(uint64,uint64,uint64,uint64,uint64,uint64)uint64': bigint
  'getListingInfo(uint64)string': string
  'getSettlementInfo(uint64)string': string
  'getMarketplaceStats()string': string
  'getUserStats(string)string': string
  'cancelListing(uint64)string': string
  'updateListing(uint64,uint64,uint64,uint64)string': string
  'emergencyPauseMarketplace()string': string
  'resumeMarketplace()string': string
  'withdrawMarketplaceFees(uint64,uint64)string': string
}

/**
 * Defines the types of available calls and state of the AtomicMarketplaceV2 smart contract.
 */
export type AtomicMarketplaceV2Types = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'initializeMarketplace(string,uint64,uint64,uint64,uint64)string' | 'initializeMarketplace', {
      argsObj: AtomicMarketplaceV2Args['obj']['initializeMarketplace(string,uint64,uint64,uint64,uint64)string']
      argsTuple: AtomicMarketplaceV2Args['tuple']['initializeMarketplace(string,uint64,uint64,uint64,uint64)string']
      returns: AtomicMarketplaceV2Returns['initializeMarketplace(string,uint64,uint64,uint64,uint64)string']
    }>
    & Record<'createListing(uint64,uint64,uint64,uint64,uint64,uint64)uint64' | 'createListing', {
      argsObj: AtomicMarketplaceV2Args['obj']['createListing(uint64,uint64,uint64,uint64,uint64,uint64)uint64']
      argsTuple: AtomicMarketplaceV2Args['tuple']['createListing(uint64,uint64,uint64,uint64,uint64,uint64)uint64']
      returns: AtomicMarketplaceV2Returns['createListing(uint64,uint64,uint64,uint64,uint64,uint64)uint64']
    }>
    & Record<'atomicPurchase(uint64,uint64,uint64,uint64)uint64' | 'atomicPurchase', {
      argsObj: AtomicMarketplaceV2Args['obj']['atomicPurchase(uint64,uint64,uint64,uint64)uint64']
      argsTuple: AtomicMarketplaceV2Args['tuple']['atomicPurchase(uint64,uint64,uint64,uint64)uint64']
      returns: AtomicMarketplaceV2Returns['atomicPurchase(uint64,uint64,uint64,uint64)uint64']
    }>
    & Record<'atomicCrossBorderPurchase(uint64,uint64,uint64,uint64,uint64,uint64)uint64' | 'atomicCrossBorderPurchase', {
      argsObj: AtomicMarketplaceV2Args['obj']['atomicCrossBorderPurchase(uint64,uint64,uint64,uint64,uint64,uint64)uint64']
      argsTuple: AtomicMarketplaceV2Args['tuple']['atomicCrossBorderPurchase(uint64,uint64,uint64,uint64,uint64,uint64)uint64']
      returns: AtomicMarketplaceV2Returns['atomicCrossBorderPurchase(uint64,uint64,uint64,uint64,uint64,uint64)uint64']
    }>
    & Record<'getListingInfo(uint64)string' | 'getListingInfo', {
      argsObj: AtomicMarketplaceV2Args['obj']['getListingInfo(uint64)string']
      argsTuple: AtomicMarketplaceV2Args['tuple']['getListingInfo(uint64)string']
      returns: AtomicMarketplaceV2Returns['getListingInfo(uint64)string']
    }>
    & Record<'getSettlementInfo(uint64)string' | 'getSettlementInfo', {
      argsObj: AtomicMarketplaceV2Args['obj']['getSettlementInfo(uint64)string']
      argsTuple: AtomicMarketplaceV2Args['tuple']['getSettlementInfo(uint64)string']
      returns: AtomicMarketplaceV2Returns['getSettlementInfo(uint64)string']
    }>
    & Record<'getMarketplaceStats()string' | 'getMarketplaceStats', {
      argsObj: AtomicMarketplaceV2Args['obj']['getMarketplaceStats()string']
      argsTuple: AtomicMarketplaceV2Args['tuple']['getMarketplaceStats()string']
      returns: AtomicMarketplaceV2Returns['getMarketplaceStats()string']
    }>
    & Record<'getUserStats(string)string' | 'getUserStats', {
      argsObj: AtomicMarketplaceV2Args['obj']['getUserStats(string)string']
      argsTuple: AtomicMarketplaceV2Args['tuple']['getUserStats(string)string']
      returns: AtomicMarketplaceV2Returns['getUserStats(string)string']
    }>
    & Record<'cancelListing(uint64)string' | 'cancelListing', {
      argsObj: AtomicMarketplaceV2Args['obj']['cancelListing(uint64)string']
      argsTuple: AtomicMarketplaceV2Args['tuple']['cancelListing(uint64)string']
      returns: AtomicMarketplaceV2Returns['cancelListing(uint64)string']
    }>
    & Record<'updateListing(uint64,uint64,uint64,uint64)string' | 'updateListing', {
      argsObj: AtomicMarketplaceV2Args['obj']['updateListing(uint64,uint64,uint64,uint64)string']
      argsTuple: AtomicMarketplaceV2Args['tuple']['updateListing(uint64,uint64,uint64,uint64)string']
      returns: AtomicMarketplaceV2Returns['updateListing(uint64,uint64,uint64,uint64)string']
    }>
    & Record<'emergencyPauseMarketplace()string' | 'emergencyPauseMarketplace', {
      argsObj: AtomicMarketplaceV2Args['obj']['emergencyPauseMarketplace()string']
      argsTuple: AtomicMarketplaceV2Args['tuple']['emergencyPauseMarketplace()string']
      returns: AtomicMarketplaceV2Returns['emergencyPauseMarketplace()string']
    }>
    & Record<'resumeMarketplace()string' | 'resumeMarketplace', {
      argsObj: AtomicMarketplaceV2Args['obj']['resumeMarketplace()string']
      argsTuple: AtomicMarketplaceV2Args['tuple']['resumeMarketplace()string']
      returns: AtomicMarketplaceV2Returns['resumeMarketplace()string']
    }>
    & Record<'withdrawMarketplaceFees(uint64,uint64)string' | 'withdrawMarketplaceFees', {
      argsObj: AtomicMarketplaceV2Args['obj']['withdrawMarketplaceFees(uint64,uint64)string']
      argsTuple: AtomicMarketplaceV2Args['tuple']['withdrawMarketplaceFees(uint64,uint64)string']
      returns: AtomicMarketplaceV2Returns['withdrawMarketplaceFees(uint64,uint64)string']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        listingCounter: bigint
        settlementCounter: bigint
        totalListings: bigint
        totalVolume: bigint
        totalFeesCollected: bigint
        marketplaceFeeRate: bigint
        blContractId: bigint
        emergencyPause: bigint
        usdcAssetId: bigint
        usdtAssetId: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type AtomicMarketplaceV2Signatures = keyof AtomicMarketplaceV2Types['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type AtomicMarketplaceV2NonVoidMethodSignatures = keyof AtomicMarketplaceV2Types['methods'] extends infer T ? T extends keyof AtomicMarketplaceV2Types['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the AtomicMarketplaceV2 smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends AtomicMarketplaceV2Signatures> = AtomicMarketplaceV2Types['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the AtomicMarketplaceV2 smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AtomicMarketplaceV2Signatures> = AtomicMarketplaceV2Types['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = AtomicMarketplaceV2Types['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type AtomicMarketplaceV2CreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type AtomicMarketplaceV2DeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: AtomicMarketplaceV2CreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the AtomicMarketplaceV2 smart contract
 */
export abstract class AtomicMarketplaceV2ParamsFactory {
  /**
   * Constructs a no op call for the initializeMarketplace(string,uint64,uint64,uint64,uint64)string ABI method
   *
   * Initialize marketplace with configuration
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static initializeMarketplace(params: CallParams<AtomicMarketplaceV2Args['obj']['initializeMarketplace(string,uint64,uint64,uint64,uint64)string'] | AtomicMarketplaceV2Args['tuple']['initializeMarketplace(string,uint64,uint64,uint64,uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'initializeMarketplace(string,uint64,uint64,uint64,uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.adminAddress, params.args.blContractId, params.args.marketplaceFeeRate, params.args.usdcAssetId, params.args.usdtAssetId],
    }
  }
  /**
   * Constructs a no op call for the createListing(uint64,uint64,uint64,uint64,uint64,uint64)uint64 ABI method
   *
   * Create marketplace listing for fractionalized BL shares
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createListing(params: CallParams<AtomicMarketplaceV2Args['obj']['createListing(uint64,uint64,uint64,uint64,uint64,uint64)uint64'] | AtomicMarketplaceV2Args['tuple']['createListing(uint64,uint64,uint64,uint64,uint64,uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createListing(uint64,uint64,uint64,uint64,uint64,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.blId, params.args.pricePerShare, params.args.totalShares, params.args.minPurchase, params.args.maxPurchase, params.args.paymentMethods],
    }
  }
  /**
   * Constructs a no op call for the atomicPurchase(uint64,uint64,uint64,uint64)uint64 ABI method
   *
  * ATOMIC SETTLEMENT - The key innovation (simplified implementation)
  This eliminates manual intervention from the XDC version

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static atomicPurchase(params: CallParams<AtomicMarketplaceV2Args['obj']['atomicPurchase(uint64,uint64,uint64,uint64)uint64'] | AtomicMarketplaceV2Args['tuple']['atomicPurchase(uint64,uint64,uint64,uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'atomicPurchase(uint64,uint64,uint64,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.listingId, params.args.sharesPurchased, params.args.paymentMethod, params.args.maxSlippage],
    }
  }
  /**
   * Constructs a no op call for the atomicCrossBorderPurchase(uint64,uint64,uint64,uint64,uint64,uint64)uint64 ABI method
   *
   * Cross-border atomic settlement (simplified)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static atomicCrossBorderPurchase(params: CallParams<AtomicMarketplaceV2Args['obj']['atomicCrossBorderPurchase(uint64,uint64,uint64,uint64,uint64,uint64)uint64'] | AtomicMarketplaceV2Args['tuple']['atomicCrossBorderPurchase(uint64,uint64,uint64,uint64,uint64,uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'atomicCrossBorderPurchase(uint64,uint64,uint64,uint64,uint64,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.listingId, params.args.sharesPurchased, params.args.fromCurrency, params.args.toCurrency, params.args.exchangeRate, params.args.maxSlippage],
    }
  }
  /**
   * Constructs a no op call for the getListingInfo(uint64)string ABI method
   *
   * Get listing information (simplified)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getListingInfo(params: CallParams<AtomicMarketplaceV2Args['obj']['getListingInfo(uint64)string'] | AtomicMarketplaceV2Args['tuple']['getListingInfo(uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getListingInfo(uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.listingId],
    }
  }
  /**
   * Constructs a no op call for the getSettlementInfo(uint64)string ABI method
   *
   * Get settlement information (simplified)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getSettlementInfo(params: CallParams<AtomicMarketplaceV2Args['obj']['getSettlementInfo(uint64)string'] | AtomicMarketplaceV2Args['tuple']['getSettlementInfo(uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getSettlementInfo(uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.settlementId],
    }
  }
  /**
   * Constructs a no op call for the getMarketplaceStats()string ABI method
   *
   * Get marketplace statistics
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getMarketplaceStats(params: CallParams<AtomicMarketplaceV2Args['obj']['getMarketplaceStats()string'] | AtomicMarketplaceV2Args['tuple']['getMarketplaceStats()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getMarketplaceStats()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getUserStats(string)string ABI method
   *
   * Get user trading statistics (simplified)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getUserStats(params: CallParams<AtomicMarketplaceV2Args['obj']['getUserStats(string)string'] | AtomicMarketplaceV2Args['tuple']['getUserStats(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getUserStats(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.userAddress],
    }
  }
  /**
   * Constructs a no op call for the cancelListing(uint64)string ABI method
   *
   * Cancel listing (simplified)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static cancelListing(params: CallParams<AtomicMarketplaceV2Args['obj']['cancelListing(uint64)string'] | AtomicMarketplaceV2Args['tuple']['cancelListing(uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'cancelListing(uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.listingId],
    }
  }
  /**
   * Constructs a no op call for the updateListing(uint64,uint64,uint64,uint64)string ABI method
   *
   * Update listing parameters (simplified)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateListing(params: CallParams<AtomicMarketplaceV2Args['obj']['updateListing(uint64,uint64,uint64,uint64)string'] | AtomicMarketplaceV2Args['tuple']['updateListing(uint64,uint64,uint64,uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updateListing(uint64,uint64,uint64,uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.listingId, params.args.newPricePerShare, params.args.newMinPurchase, params.args.newMaxPurchase],
    }
  }
  /**
   * Constructs a no op call for the emergencyPauseMarketplace()string ABI method
   *
   * Emergency pause (simplified)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static emergencyPauseMarketplace(params: CallParams<AtomicMarketplaceV2Args['obj']['emergencyPauseMarketplace()string'] | AtomicMarketplaceV2Args['tuple']['emergencyPauseMarketplace()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'emergencyPauseMarketplace()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the resumeMarketplace()string ABI method
   *
   * Resume operations (simplified)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static resumeMarketplace(params: CallParams<AtomicMarketplaceV2Args['obj']['resumeMarketplace()string'] | AtomicMarketplaceV2Args['tuple']['resumeMarketplace()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'resumeMarketplace()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the withdrawMarketplaceFees(uint64,uint64)string ABI method
   *
   * Withdraw collected fees (simplified)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static withdrawMarketplaceFees(params: CallParams<AtomicMarketplaceV2Args['obj']['withdrawMarketplaceFees(uint64,uint64)string'] | AtomicMarketplaceV2Args['tuple']['withdrawMarketplaceFees(uint64,uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'withdrawMarketplaceFees(uint64,uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount, params.args.paymentMethod],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the AtomicMarketplaceV2 smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class AtomicMarketplaceV2Factory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `AtomicMarketplaceV2Factory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new AtomicMarketplaceV2Client(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new AtomicMarketplaceV2Client(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the AtomicMarketplaceV2 smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: AtomicMarketplaceV2DeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new AtomicMarketplaceV2Client(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AtomicMarketplaceV2 smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AtomicMarketplaceV2 smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AtomicMarketplaceV2 smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new AtomicMarketplaceV2Client(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the AtomicMarketplaceV2 smart contract
 */
export class AtomicMarketplaceV2Client {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `AtomicMarketplaceV2Client`
   *
   * @param appClient An `AppClient` instance which has been created with the AtomicMarketplaceV2 app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `AtomicMarketplaceV2Client`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends AtomicMarketplaceV2NonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `AtomicMarketplaceV2Client` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<AtomicMarketplaceV2Client> {
    return new AtomicMarketplaceV2Client(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `AtomicMarketplaceV2Client` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<AtomicMarketplaceV2Client> {
    return new AtomicMarketplaceV2Client(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the AtomicMarketplaceV2 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the AtomicMarketplaceV2 smart contract using the `initializeMarketplace(string,uint64,uint64,uint64,uint64)string` ABI method.
     *
     * Initialize marketplace with configuration
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    initializeMarketplace: (params: CallParams<AtomicMarketplaceV2Args['obj']['initializeMarketplace(string,uint64,uint64,uint64,uint64)string'] | AtomicMarketplaceV2Args['tuple']['initializeMarketplace(string,uint64,uint64,uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AtomicMarketplaceV2ParamsFactory.initializeMarketplace(params))
    },

    /**
     * Makes a call to the AtomicMarketplaceV2 smart contract using the `createListing(uint64,uint64,uint64,uint64,uint64,uint64)uint64` ABI method.
     *
     * Create marketplace listing for fractionalized BL shares
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createListing: (params: CallParams<AtomicMarketplaceV2Args['obj']['createListing(uint64,uint64,uint64,uint64,uint64,uint64)uint64'] | AtomicMarketplaceV2Args['tuple']['createListing(uint64,uint64,uint64,uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AtomicMarketplaceV2ParamsFactory.createListing(params))
    },

    /**
     * Makes a call to the AtomicMarketplaceV2 smart contract using the `atomicPurchase(uint64,uint64,uint64,uint64)uint64` ABI method.
     *
    * ATOMIC SETTLEMENT - The key innovation (simplified implementation)
    This eliminates manual intervention from the XDC version

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    atomicPurchase: (params: CallParams<AtomicMarketplaceV2Args['obj']['atomicPurchase(uint64,uint64,uint64,uint64)uint64'] | AtomicMarketplaceV2Args['tuple']['atomicPurchase(uint64,uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AtomicMarketplaceV2ParamsFactory.atomicPurchase(params))
    },

    /**
     * Makes a call to the AtomicMarketplaceV2 smart contract using the `atomicCrossBorderPurchase(uint64,uint64,uint64,uint64,uint64,uint64)uint64` ABI method.
     *
     * Cross-border atomic settlement (simplified)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    atomicCrossBorderPurchase: (params: CallParams<AtomicMarketplaceV2Args['obj']['atomicCrossBorderPurchase(uint64,uint64,uint64,uint64,uint64,uint64)uint64'] | AtomicMarketplaceV2Args['tuple']['atomicCrossBorderPurchase(uint64,uint64,uint64,uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AtomicMarketplaceV2ParamsFactory.atomicCrossBorderPurchase(params))
    },

    /**
     * Makes a call to the AtomicMarketplaceV2 smart contract using the `getListingInfo(uint64)string` ABI method.
     *
     * Get listing information (simplified)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getListingInfo: (params: CallParams<AtomicMarketplaceV2Args['obj']['getListingInfo(uint64)string'] | AtomicMarketplaceV2Args['tuple']['getListingInfo(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AtomicMarketplaceV2ParamsFactory.getListingInfo(params))
    },

    /**
     * Makes a call to the AtomicMarketplaceV2 smart contract using the `getSettlementInfo(uint64)string` ABI method.
     *
     * Get settlement information (simplified)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getSettlementInfo: (params: CallParams<AtomicMarketplaceV2Args['obj']['getSettlementInfo(uint64)string'] | AtomicMarketplaceV2Args['tuple']['getSettlementInfo(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AtomicMarketplaceV2ParamsFactory.getSettlementInfo(params))
    },

    /**
     * Makes a call to the AtomicMarketplaceV2 smart contract using the `getMarketplaceStats()string` ABI method.
     *
     * Get marketplace statistics
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getMarketplaceStats: (params: CallParams<AtomicMarketplaceV2Args['obj']['getMarketplaceStats()string'] | AtomicMarketplaceV2Args['tuple']['getMarketplaceStats()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AtomicMarketplaceV2ParamsFactory.getMarketplaceStats(params))
    },

    /**
     * Makes a call to the AtomicMarketplaceV2 smart contract using the `getUserStats(string)string` ABI method.
     *
     * Get user trading statistics (simplified)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getUserStats: (params: CallParams<AtomicMarketplaceV2Args['obj']['getUserStats(string)string'] | AtomicMarketplaceV2Args['tuple']['getUserStats(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AtomicMarketplaceV2ParamsFactory.getUserStats(params))
    },

    /**
     * Makes a call to the AtomicMarketplaceV2 smart contract using the `cancelListing(uint64)string` ABI method.
     *
     * Cancel listing (simplified)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    cancelListing: (params: CallParams<AtomicMarketplaceV2Args['obj']['cancelListing(uint64)string'] | AtomicMarketplaceV2Args['tuple']['cancelListing(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AtomicMarketplaceV2ParamsFactory.cancelListing(params))
    },

    /**
     * Makes a call to the AtomicMarketplaceV2 smart contract using the `updateListing(uint64,uint64,uint64,uint64)string` ABI method.
     *
     * Update listing parameters (simplified)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateListing: (params: CallParams<AtomicMarketplaceV2Args['obj']['updateListing(uint64,uint64,uint64,uint64)string'] | AtomicMarketplaceV2Args['tuple']['updateListing(uint64,uint64,uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AtomicMarketplaceV2ParamsFactory.updateListing(params))
    },

    /**
     * Makes a call to the AtomicMarketplaceV2 smart contract using the `emergencyPauseMarketplace()string` ABI method.
     *
     * Emergency pause (simplified)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    emergencyPauseMarketplace: (params: CallParams<AtomicMarketplaceV2Args['obj']['emergencyPauseMarketplace()string'] | AtomicMarketplaceV2Args['tuple']['emergencyPauseMarketplace()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AtomicMarketplaceV2ParamsFactory.emergencyPauseMarketplace(params))
    },

    /**
     * Makes a call to the AtomicMarketplaceV2 smart contract using the `resumeMarketplace()string` ABI method.
     *
     * Resume operations (simplified)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    resumeMarketplace: (params: CallParams<AtomicMarketplaceV2Args['obj']['resumeMarketplace()string'] | AtomicMarketplaceV2Args['tuple']['resumeMarketplace()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AtomicMarketplaceV2ParamsFactory.resumeMarketplace(params))
    },

    /**
     * Makes a call to the AtomicMarketplaceV2 smart contract using the `withdrawMarketplaceFees(uint64,uint64)string` ABI method.
     *
     * Withdraw collected fees (simplified)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    withdrawMarketplaceFees: (params: CallParams<AtomicMarketplaceV2Args['obj']['withdrawMarketplaceFees(uint64,uint64)string'] | AtomicMarketplaceV2Args['tuple']['withdrawMarketplaceFees(uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AtomicMarketplaceV2ParamsFactory.withdrawMarketplaceFees(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the AtomicMarketplaceV2 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the AtomicMarketplaceV2 smart contract using the `initializeMarketplace(string,uint64,uint64,uint64,uint64)string` ABI method.
     *
     * Initialize marketplace with configuration
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    initializeMarketplace: (params: CallParams<AtomicMarketplaceV2Args['obj']['initializeMarketplace(string,uint64,uint64,uint64,uint64)string'] | AtomicMarketplaceV2Args['tuple']['initializeMarketplace(string,uint64,uint64,uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AtomicMarketplaceV2ParamsFactory.initializeMarketplace(params))
    },

    /**
     * Makes a call to the AtomicMarketplaceV2 smart contract using the `createListing(uint64,uint64,uint64,uint64,uint64,uint64)uint64` ABI method.
     *
     * Create marketplace listing for fractionalized BL shares
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createListing: (params: CallParams<AtomicMarketplaceV2Args['obj']['createListing(uint64,uint64,uint64,uint64,uint64,uint64)uint64'] | AtomicMarketplaceV2Args['tuple']['createListing(uint64,uint64,uint64,uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AtomicMarketplaceV2ParamsFactory.createListing(params))
    },

    /**
     * Makes a call to the AtomicMarketplaceV2 smart contract using the `atomicPurchase(uint64,uint64,uint64,uint64)uint64` ABI method.
     *
    * ATOMIC SETTLEMENT - The key innovation (simplified implementation)
    This eliminates manual intervention from the XDC version

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    atomicPurchase: (params: CallParams<AtomicMarketplaceV2Args['obj']['atomicPurchase(uint64,uint64,uint64,uint64)uint64'] | AtomicMarketplaceV2Args['tuple']['atomicPurchase(uint64,uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AtomicMarketplaceV2ParamsFactory.atomicPurchase(params))
    },

    /**
     * Makes a call to the AtomicMarketplaceV2 smart contract using the `atomicCrossBorderPurchase(uint64,uint64,uint64,uint64,uint64,uint64)uint64` ABI method.
     *
     * Cross-border atomic settlement (simplified)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    atomicCrossBorderPurchase: (params: CallParams<AtomicMarketplaceV2Args['obj']['atomicCrossBorderPurchase(uint64,uint64,uint64,uint64,uint64,uint64)uint64'] | AtomicMarketplaceV2Args['tuple']['atomicCrossBorderPurchase(uint64,uint64,uint64,uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AtomicMarketplaceV2ParamsFactory.atomicCrossBorderPurchase(params))
    },

    /**
     * Makes a call to the AtomicMarketplaceV2 smart contract using the `getListingInfo(uint64)string` ABI method.
     *
     * Get listing information (simplified)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getListingInfo: (params: CallParams<AtomicMarketplaceV2Args['obj']['getListingInfo(uint64)string'] | AtomicMarketplaceV2Args['tuple']['getListingInfo(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AtomicMarketplaceV2ParamsFactory.getListingInfo(params))
    },

    /**
     * Makes a call to the AtomicMarketplaceV2 smart contract using the `getSettlementInfo(uint64)string` ABI method.
     *
     * Get settlement information (simplified)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getSettlementInfo: (params: CallParams<AtomicMarketplaceV2Args['obj']['getSettlementInfo(uint64)string'] | AtomicMarketplaceV2Args['tuple']['getSettlementInfo(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AtomicMarketplaceV2ParamsFactory.getSettlementInfo(params))
    },

    /**
     * Makes a call to the AtomicMarketplaceV2 smart contract using the `getMarketplaceStats()string` ABI method.
     *
     * Get marketplace statistics
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getMarketplaceStats: (params: CallParams<AtomicMarketplaceV2Args['obj']['getMarketplaceStats()string'] | AtomicMarketplaceV2Args['tuple']['getMarketplaceStats()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AtomicMarketplaceV2ParamsFactory.getMarketplaceStats(params))
    },

    /**
     * Makes a call to the AtomicMarketplaceV2 smart contract using the `getUserStats(string)string` ABI method.
     *
     * Get user trading statistics (simplified)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getUserStats: (params: CallParams<AtomicMarketplaceV2Args['obj']['getUserStats(string)string'] | AtomicMarketplaceV2Args['tuple']['getUserStats(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AtomicMarketplaceV2ParamsFactory.getUserStats(params))
    },

    /**
     * Makes a call to the AtomicMarketplaceV2 smart contract using the `cancelListing(uint64)string` ABI method.
     *
     * Cancel listing (simplified)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    cancelListing: (params: CallParams<AtomicMarketplaceV2Args['obj']['cancelListing(uint64)string'] | AtomicMarketplaceV2Args['tuple']['cancelListing(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AtomicMarketplaceV2ParamsFactory.cancelListing(params))
    },

    /**
     * Makes a call to the AtomicMarketplaceV2 smart contract using the `updateListing(uint64,uint64,uint64,uint64)string` ABI method.
     *
     * Update listing parameters (simplified)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateListing: (params: CallParams<AtomicMarketplaceV2Args['obj']['updateListing(uint64,uint64,uint64,uint64)string'] | AtomicMarketplaceV2Args['tuple']['updateListing(uint64,uint64,uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AtomicMarketplaceV2ParamsFactory.updateListing(params))
    },

    /**
     * Makes a call to the AtomicMarketplaceV2 smart contract using the `emergencyPauseMarketplace()string` ABI method.
     *
     * Emergency pause (simplified)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    emergencyPauseMarketplace: (params: CallParams<AtomicMarketplaceV2Args['obj']['emergencyPauseMarketplace()string'] | AtomicMarketplaceV2Args['tuple']['emergencyPauseMarketplace()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AtomicMarketplaceV2ParamsFactory.emergencyPauseMarketplace(params))
    },

    /**
     * Makes a call to the AtomicMarketplaceV2 smart contract using the `resumeMarketplace()string` ABI method.
     *
     * Resume operations (simplified)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    resumeMarketplace: (params: CallParams<AtomicMarketplaceV2Args['obj']['resumeMarketplace()string'] | AtomicMarketplaceV2Args['tuple']['resumeMarketplace()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AtomicMarketplaceV2ParamsFactory.resumeMarketplace(params))
    },

    /**
     * Makes a call to the AtomicMarketplaceV2 smart contract using the `withdrawMarketplaceFees(uint64,uint64)string` ABI method.
     *
     * Withdraw collected fees (simplified)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    withdrawMarketplaceFees: (params: CallParams<AtomicMarketplaceV2Args['obj']['withdrawMarketplaceFees(uint64,uint64)string'] | AtomicMarketplaceV2Args['tuple']['withdrawMarketplaceFees(uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AtomicMarketplaceV2ParamsFactory.withdrawMarketplaceFees(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the AtomicMarketplaceV2 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the AtomicMarketplaceV2 smart contract using the `initializeMarketplace(string,uint64,uint64,uint64,uint64)string` ABI method.
     *
     * Initialize marketplace with configuration
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    initializeMarketplace: async (params: CallParams<AtomicMarketplaceV2Args['obj']['initializeMarketplace(string,uint64,uint64,uint64,uint64)string'] | AtomicMarketplaceV2Args['tuple']['initializeMarketplace(string,uint64,uint64,uint64,uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AtomicMarketplaceV2ParamsFactory.initializeMarketplace(params))
      return {...result, return: result.return as unknown as (undefined | AtomicMarketplaceV2Returns['initializeMarketplace(string,uint64,uint64,uint64,uint64)string'])}
    },

    /**
     * Makes a call to the AtomicMarketplaceV2 smart contract using the `createListing(uint64,uint64,uint64,uint64,uint64,uint64)uint64` ABI method.
     *
     * Create marketplace listing for fractionalized BL shares
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createListing: async (params: CallParams<AtomicMarketplaceV2Args['obj']['createListing(uint64,uint64,uint64,uint64,uint64,uint64)uint64'] | AtomicMarketplaceV2Args['tuple']['createListing(uint64,uint64,uint64,uint64,uint64,uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AtomicMarketplaceV2ParamsFactory.createListing(params))
      return {...result, return: result.return as unknown as (undefined | AtomicMarketplaceV2Returns['createListing(uint64,uint64,uint64,uint64,uint64,uint64)uint64'])}
    },

    /**
     * Makes a call to the AtomicMarketplaceV2 smart contract using the `atomicPurchase(uint64,uint64,uint64,uint64)uint64` ABI method.
     *
    * ATOMIC SETTLEMENT - The key innovation (simplified implementation)
    This eliminates manual intervention from the XDC version

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    atomicPurchase: async (params: CallParams<AtomicMarketplaceV2Args['obj']['atomicPurchase(uint64,uint64,uint64,uint64)uint64'] | AtomicMarketplaceV2Args['tuple']['atomicPurchase(uint64,uint64,uint64,uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AtomicMarketplaceV2ParamsFactory.atomicPurchase(params))
      return {...result, return: result.return as unknown as (undefined | AtomicMarketplaceV2Returns['atomicPurchase(uint64,uint64,uint64,uint64)uint64'])}
    },

    /**
     * Makes a call to the AtomicMarketplaceV2 smart contract using the `atomicCrossBorderPurchase(uint64,uint64,uint64,uint64,uint64,uint64)uint64` ABI method.
     *
     * Cross-border atomic settlement (simplified)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    atomicCrossBorderPurchase: async (params: CallParams<AtomicMarketplaceV2Args['obj']['atomicCrossBorderPurchase(uint64,uint64,uint64,uint64,uint64,uint64)uint64'] | AtomicMarketplaceV2Args['tuple']['atomicCrossBorderPurchase(uint64,uint64,uint64,uint64,uint64,uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AtomicMarketplaceV2ParamsFactory.atomicCrossBorderPurchase(params))
      return {...result, return: result.return as unknown as (undefined | AtomicMarketplaceV2Returns['atomicCrossBorderPurchase(uint64,uint64,uint64,uint64,uint64,uint64)uint64'])}
    },

    /**
     * Makes a call to the AtomicMarketplaceV2 smart contract using the `getListingInfo(uint64)string` ABI method.
     *
     * Get listing information (simplified)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getListingInfo: async (params: CallParams<AtomicMarketplaceV2Args['obj']['getListingInfo(uint64)string'] | AtomicMarketplaceV2Args['tuple']['getListingInfo(uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AtomicMarketplaceV2ParamsFactory.getListingInfo(params))
      return {...result, return: result.return as unknown as (undefined | AtomicMarketplaceV2Returns['getListingInfo(uint64)string'])}
    },

    /**
     * Makes a call to the AtomicMarketplaceV2 smart contract using the `getSettlementInfo(uint64)string` ABI method.
     *
     * Get settlement information (simplified)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getSettlementInfo: async (params: CallParams<AtomicMarketplaceV2Args['obj']['getSettlementInfo(uint64)string'] | AtomicMarketplaceV2Args['tuple']['getSettlementInfo(uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AtomicMarketplaceV2ParamsFactory.getSettlementInfo(params))
      return {...result, return: result.return as unknown as (undefined | AtomicMarketplaceV2Returns['getSettlementInfo(uint64)string'])}
    },

    /**
     * Makes a call to the AtomicMarketplaceV2 smart contract using the `getMarketplaceStats()string` ABI method.
     *
     * Get marketplace statistics
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getMarketplaceStats: async (params: CallParams<AtomicMarketplaceV2Args['obj']['getMarketplaceStats()string'] | AtomicMarketplaceV2Args['tuple']['getMarketplaceStats()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AtomicMarketplaceV2ParamsFactory.getMarketplaceStats(params))
      return {...result, return: result.return as unknown as (undefined | AtomicMarketplaceV2Returns['getMarketplaceStats()string'])}
    },

    /**
     * Makes a call to the AtomicMarketplaceV2 smart contract using the `getUserStats(string)string` ABI method.
     *
     * Get user trading statistics (simplified)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getUserStats: async (params: CallParams<AtomicMarketplaceV2Args['obj']['getUserStats(string)string'] | AtomicMarketplaceV2Args['tuple']['getUserStats(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AtomicMarketplaceV2ParamsFactory.getUserStats(params))
      return {...result, return: result.return as unknown as (undefined | AtomicMarketplaceV2Returns['getUserStats(string)string'])}
    },

    /**
     * Makes a call to the AtomicMarketplaceV2 smart contract using the `cancelListing(uint64)string` ABI method.
     *
     * Cancel listing (simplified)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    cancelListing: async (params: CallParams<AtomicMarketplaceV2Args['obj']['cancelListing(uint64)string'] | AtomicMarketplaceV2Args['tuple']['cancelListing(uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AtomicMarketplaceV2ParamsFactory.cancelListing(params))
      return {...result, return: result.return as unknown as (undefined | AtomicMarketplaceV2Returns['cancelListing(uint64)string'])}
    },

    /**
     * Makes a call to the AtomicMarketplaceV2 smart contract using the `updateListing(uint64,uint64,uint64,uint64)string` ABI method.
     *
     * Update listing parameters (simplified)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateListing: async (params: CallParams<AtomicMarketplaceV2Args['obj']['updateListing(uint64,uint64,uint64,uint64)string'] | AtomicMarketplaceV2Args['tuple']['updateListing(uint64,uint64,uint64,uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AtomicMarketplaceV2ParamsFactory.updateListing(params))
      return {...result, return: result.return as unknown as (undefined | AtomicMarketplaceV2Returns['updateListing(uint64,uint64,uint64,uint64)string'])}
    },

    /**
     * Makes a call to the AtomicMarketplaceV2 smart contract using the `emergencyPauseMarketplace()string` ABI method.
     *
     * Emergency pause (simplified)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    emergencyPauseMarketplace: async (params: CallParams<AtomicMarketplaceV2Args['obj']['emergencyPauseMarketplace()string'] | AtomicMarketplaceV2Args['tuple']['emergencyPauseMarketplace()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AtomicMarketplaceV2ParamsFactory.emergencyPauseMarketplace(params))
      return {...result, return: result.return as unknown as (undefined | AtomicMarketplaceV2Returns['emergencyPauseMarketplace()string'])}
    },

    /**
     * Makes a call to the AtomicMarketplaceV2 smart contract using the `resumeMarketplace()string` ABI method.
     *
     * Resume operations (simplified)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    resumeMarketplace: async (params: CallParams<AtomicMarketplaceV2Args['obj']['resumeMarketplace()string'] | AtomicMarketplaceV2Args['tuple']['resumeMarketplace()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AtomicMarketplaceV2ParamsFactory.resumeMarketplace(params))
      return {...result, return: result.return as unknown as (undefined | AtomicMarketplaceV2Returns['resumeMarketplace()string'])}
    },

    /**
     * Makes a call to the AtomicMarketplaceV2 smart contract using the `withdrawMarketplaceFees(uint64,uint64)string` ABI method.
     *
     * Withdraw collected fees (simplified)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    withdrawMarketplaceFees: async (params: CallParams<AtomicMarketplaceV2Args['obj']['withdrawMarketplaceFees(uint64,uint64)string'] | AtomicMarketplaceV2Args['tuple']['withdrawMarketplaceFees(uint64,uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AtomicMarketplaceV2ParamsFactory.withdrawMarketplaceFees(params))
      return {...result, return: result.return as unknown as (undefined | AtomicMarketplaceV2Returns['withdrawMarketplaceFees(uint64,uint64)string'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new AtomicMarketplaceV2Client(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current AtomicMarketplaceV2 app
   */
  state = {
    /**
     * Methods to access global state for the current AtomicMarketplaceV2 app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          listingCounter: result.listingCounter,
          settlementCounter: result.settlementCounter,
          totalListings: result.totalListings,
          totalVolume: result.totalVolume,
          totalFeesCollected: result.totalFeesCollected,
          marketplaceFeeRate: result.marketplaceFeeRate,
          blContractId: result.blContractId,
          emergencyPause: result.emergencyPause,
          usdcAssetId: result.usdcAssetId,
          usdtAssetId: result.usdtAssetId,
        }
      },
      /**
       * Get the current value of the listingCounter key in global state
       */
      listingCounter: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("listingCounter")) as bigint | undefined },
      /**
       * Get the current value of the settlementCounter key in global state
       */
      settlementCounter: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("settlementCounter")) as bigint | undefined },
      /**
       * Get the current value of the totalListings key in global state
       */
      totalListings: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalListings")) as bigint | undefined },
      /**
       * Get the current value of the totalVolume key in global state
       */
      totalVolume: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalVolume")) as bigint | undefined },
      /**
       * Get the current value of the totalFeesCollected key in global state
       */
      totalFeesCollected: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalFeesCollected")) as bigint | undefined },
      /**
       * Get the current value of the marketplaceFeeRate key in global state
       */
      marketplaceFeeRate: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("marketplaceFeeRate")) as bigint | undefined },
      /**
       * Get the current value of the blContractId key in global state
       */
      blContractId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("blContractId")) as bigint | undefined },
      /**
       * Get the current value of the emergencyPause key in global state
       */
      emergencyPause: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("emergencyPause")) as bigint | undefined },
      /**
       * Get the current value of the usdcAssetId key in global state
       */
      usdcAssetId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("usdcAssetId")) as bigint | undefined },
      /**
       * Get the current value of the usdtAssetId key in global state
       */
      usdtAssetId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("usdtAssetId")) as bigint | undefined },
    },
  }

  public newGroup(): AtomicMarketplaceV2Composer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a initializeMarketplace(string,uint64,uint64,uint64,uint64)string method call against the AtomicMarketplaceV2 contract
       */
      initializeMarketplace(params: CallParams<AtomicMarketplaceV2Args['obj']['initializeMarketplace(string,uint64,uint64,uint64,uint64)string'] | AtomicMarketplaceV2Args['tuple']['initializeMarketplace(string,uint64,uint64,uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.initializeMarketplace(params)))
        resultMappers.push((v) => client.decodeReturnValue('initializeMarketplace(string,uint64,uint64,uint64,uint64)string', v))
        return this
      },
      /**
       * Add a createListing(uint64,uint64,uint64,uint64,uint64,uint64)uint64 method call against the AtomicMarketplaceV2 contract
       */
      createListing(params: CallParams<AtomicMarketplaceV2Args['obj']['createListing(uint64,uint64,uint64,uint64,uint64,uint64)uint64'] | AtomicMarketplaceV2Args['tuple']['createListing(uint64,uint64,uint64,uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createListing(params)))
        resultMappers.push((v) => client.decodeReturnValue('createListing(uint64,uint64,uint64,uint64,uint64,uint64)uint64', v))
        return this
      },
      /**
       * Add a atomicPurchase(uint64,uint64,uint64,uint64)uint64 method call against the AtomicMarketplaceV2 contract
       */
      atomicPurchase(params: CallParams<AtomicMarketplaceV2Args['obj']['atomicPurchase(uint64,uint64,uint64,uint64)uint64'] | AtomicMarketplaceV2Args['tuple']['atomicPurchase(uint64,uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.atomicPurchase(params)))
        resultMappers.push((v) => client.decodeReturnValue('atomicPurchase(uint64,uint64,uint64,uint64)uint64', v))
        return this
      },
      /**
       * Add a atomicCrossBorderPurchase(uint64,uint64,uint64,uint64,uint64,uint64)uint64 method call against the AtomicMarketplaceV2 contract
       */
      atomicCrossBorderPurchase(params: CallParams<AtomicMarketplaceV2Args['obj']['atomicCrossBorderPurchase(uint64,uint64,uint64,uint64,uint64,uint64)uint64'] | AtomicMarketplaceV2Args['tuple']['atomicCrossBorderPurchase(uint64,uint64,uint64,uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.atomicCrossBorderPurchase(params)))
        resultMappers.push((v) => client.decodeReturnValue('atomicCrossBorderPurchase(uint64,uint64,uint64,uint64,uint64,uint64)uint64', v))
        return this
      },
      /**
       * Add a getListingInfo(uint64)string method call against the AtomicMarketplaceV2 contract
       */
      getListingInfo(params: CallParams<AtomicMarketplaceV2Args['obj']['getListingInfo(uint64)string'] | AtomicMarketplaceV2Args['tuple']['getListingInfo(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getListingInfo(params)))
        resultMappers.push((v) => client.decodeReturnValue('getListingInfo(uint64)string', v))
        return this
      },
      /**
       * Add a getSettlementInfo(uint64)string method call against the AtomicMarketplaceV2 contract
       */
      getSettlementInfo(params: CallParams<AtomicMarketplaceV2Args['obj']['getSettlementInfo(uint64)string'] | AtomicMarketplaceV2Args['tuple']['getSettlementInfo(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getSettlementInfo(params)))
        resultMappers.push((v) => client.decodeReturnValue('getSettlementInfo(uint64)string', v))
        return this
      },
      /**
       * Add a getMarketplaceStats()string method call against the AtomicMarketplaceV2 contract
       */
      getMarketplaceStats(params: CallParams<AtomicMarketplaceV2Args['obj']['getMarketplaceStats()string'] | AtomicMarketplaceV2Args['tuple']['getMarketplaceStats()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getMarketplaceStats(params)))
        resultMappers.push((v) => client.decodeReturnValue('getMarketplaceStats()string', v))
        return this
      },
      /**
       * Add a getUserStats(string)string method call against the AtomicMarketplaceV2 contract
       */
      getUserStats(params: CallParams<AtomicMarketplaceV2Args['obj']['getUserStats(string)string'] | AtomicMarketplaceV2Args['tuple']['getUserStats(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getUserStats(params)))
        resultMappers.push((v) => client.decodeReturnValue('getUserStats(string)string', v))
        return this
      },
      /**
       * Add a cancelListing(uint64)string method call against the AtomicMarketplaceV2 contract
       */
      cancelListing(params: CallParams<AtomicMarketplaceV2Args['obj']['cancelListing(uint64)string'] | AtomicMarketplaceV2Args['tuple']['cancelListing(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.cancelListing(params)))
        resultMappers.push((v) => client.decodeReturnValue('cancelListing(uint64)string', v))
        return this
      },
      /**
       * Add a updateListing(uint64,uint64,uint64,uint64)string method call against the AtomicMarketplaceV2 contract
       */
      updateListing(params: CallParams<AtomicMarketplaceV2Args['obj']['updateListing(uint64,uint64,uint64,uint64)string'] | AtomicMarketplaceV2Args['tuple']['updateListing(uint64,uint64,uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateListing(params)))
        resultMappers.push((v) => client.decodeReturnValue('updateListing(uint64,uint64,uint64,uint64)string', v))
        return this
      },
      /**
       * Add a emergencyPauseMarketplace()string method call against the AtomicMarketplaceV2 contract
       */
      emergencyPauseMarketplace(params: CallParams<AtomicMarketplaceV2Args['obj']['emergencyPauseMarketplace()string'] | AtomicMarketplaceV2Args['tuple']['emergencyPauseMarketplace()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.emergencyPauseMarketplace(params)))
        resultMappers.push((v) => client.decodeReturnValue('emergencyPauseMarketplace()string', v))
        return this
      },
      /**
       * Add a resumeMarketplace()string method call against the AtomicMarketplaceV2 contract
       */
      resumeMarketplace(params: CallParams<AtomicMarketplaceV2Args['obj']['resumeMarketplace()string'] | AtomicMarketplaceV2Args['tuple']['resumeMarketplace()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.resumeMarketplace(params)))
        resultMappers.push((v) => client.decodeReturnValue('resumeMarketplace()string', v))
        return this
      },
      /**
       * Add a withdrawMarketplaceFees(uint64,uint64)string method call against the AtomicMarketplaceV2 contract
       */
      withdrawMarketplaceFees(params: CallParams<AtomicMarketplaceV2Args['obj']['withdrawMarketplaceFees(uint64,uint64)string'] | AtomicMarketplaceV2Args['tuple']['withdrawMarketplaceFees(uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.withdrawMarketplaceFees(params)))
        resultMappers.push((v) => client.decodeReturnValue('withdrawMarketplaceFees(uint64,uint64)string', v))
        return this
      },
      /**
       * Add a clear state call to the AtomicMarketplaceV2 contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as AtomicMarketplaceV2Composer
  }
}
export type AtomicMarketplaceV2Composer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the initializeMarketplace(string,uint64,uint64,uint64,uint64)string ABI method.
   *
   * Initialize marketplace with configuration
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initializeMarketplace(params?: CallParams<AtomicMarketplaceV2Args['obj']['initializeMarketplace(string,uint64,uint64,uint64,uint64)string'] | AtomicMarketplaceV2Args['tuple']['initializeMarketplace(string,uint64,uint64,uint64,uint64)string']>): AtomicMarketplaceV2Composer<[...TReturns, AtomicMarketplaceV2Returns['initializeMarketplace(string,uint64,uint64,uint64,uint64)string'] | undefined]>

  /**
   * Calls the createListing(uint64,uint64,uint64,uint64,uint64,uint64)uint64 ABI method.
   *
   * Create marketplace listing for fractionalized BL shares
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createListing(params?: CallParams<AtomicMarketplaceV2Args['obj']['createListing(uint64,uint64,uint64,uint64,uint64,uint64)uint64'] | AtomicMarketplaceV2Args['tuple']['createListing(uint64,uint64,uint64,uint64,uint64,uint64)uint64']>): AtomicMarketplaceV2Composer<[...TReturns, AtomicMarketplaceV2Returns['createListing(uint64,uint64,uint64,uint64,uint64,uint64)uint64'] | undefined]>

  /**
   * Calls the atomicPurchase(uint64,uint64,uint64,uint64)uint64 ABI method.
   *
  * ATOMIC SETTLEMENT - The key innovation (simplified implementation)
  This eliminates manual intervention from the XDC version

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  atomicPurchase(params?: CallParams<AtomicMarketplaceV2Args['obj']['atomicPurchase(uint64,uint64,uint64,uint64)uint64'] | AtomicMarketplaceV2Args['tuple']['atomicPurchase(uint64,uint64,uint64,uint64)uint64']>): AtomicMarketplaceV2Composer<[...TReturns, AtomicMarketplaceV2Returns['atomicPurchase(uint64,uint64,uint64,uint64)uint64'] | undefined]>

  /**
   * Calls the atomicCrossBorderPurchase(uint64,uint64,uint64,uint64,uint64,uint64)uint64 ABI method.
   *
   * Cross-border atomic settlement (simplified)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  atomicCrossBorderPurchase(params?: CallParams<AtomicMarketplaceV2Args['obj']['atomicCrossBorderPurchase(uint64,uint64,uint64,uint64,uint64,uint64)uint64'] | AtomicMarketplaceV2Args['tuple']['atomicCrossBorderPurchase(uint64,uint64,uint64,uint64,uint64,uint64)uint64']>): AtomicMarketplaceV2Composer<[...TReturns, AtomicMarketplaceV2Returns['atomicCrossBorderPurchase(uint64,uint64,uint64,uint64,uint64,uint64)uint64'] | undefined]>

  /**
   * Calls the getListingInfo(uint64)string ABI method.
   *
   * Get listing information (simplified)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getListingInfo(params?: CallParams<AtomicMarketplaceV2Args['obj']['getListingInfo(uint64)string'] | AtomicMarketplaceV2Args['tuple']['getListingInfo(uint64)string']>): AtomicMarketplaceV2Composer<[...TReturns, AtomicMarketplaceV2Returns['getListingInfo(uint64)string'] | undefined]>

  /**
   * Calls the getSettlementInfo(uint64)string ABI method.
   *
   * Get settlement information (simplified)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getSettlementInfo(params?: CallParams<AtomicMarketplaceV2Args['obj']['getSettlementInfo(uint64)string'] | AtomicMarketplaceV2Args['tuple']['getSettlementInfo(uint64)string']>): AtomicMarketplaceV2Composer<[...TReturns, AtomicMarketplaceV2Returns['getSettlementInfo(uint64)string'] | undefined]>

  /**
   * Calls the getMarketplaceStats()string ABI method.
   *
   * Get marketplace statistics
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getMarketplaceStats(params?: CallParams<AtomicMarketplaceV2Args['obj']['getMarketplaceStats()string'] | AtomicMarketplaceV2Args['tuple']['getMarketplaceStats()string']>): AtomicMarketplaceV2Composer<[...TReturns, AtomicMarketplaceV2Returns['getMarketplaceStats()string'] | undefined]>

  /**
   * Calls the getUserStats(string)string ABI method.
   *
   * Get user trading statistics (simplified)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getUserStats(params?: CallParams<AtomicMarketplaceV2Args['obj']['getUserStats(string)string'] | AtomicMarketplaceV2Args['tuple']['getUserStats(string)string']>): AtomicMarketplaceV2Composer<[...TReturns, AtomicMarketplaceV2Returns['getUserStats(string)string'] | undefined]>

  /**
   * Calls the cancelListing(uint64)string ABI method.
   *
   * Cancel listing (simplified)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  cancelListing(params?: CallParams<AtomicMarketplaceV2Args['obj']['cancelListing(uint64)string'] | AtomicMarketplaceV2Args['tuple']['cancelListing(uint64)string']>): AtomicMarketplaceV2Composer<[...TReturns, AtomicMarketplaceV2Returns['cancelListing(uint64)string'] | undefined]>

  /**
   * Calls the updateListing(uint64,uint64,uint64,uint64)string ABI method.
   *
   * Update listing parameters (simplified)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateListing(params?: CallParams<AtomicMarketplaceV2Args['obj']['updateListing(uint64,uint64,uint64,uint64)string'] | AtomicMarketplaceV2Args['tuple']['updateListing(uint64,uint64,uint64,uint64)string']>): AtomicMarketplaceV2Composer<[...TReturns, AtomicMarketplaceV2Returns['updateListing(uint64,uint64,uint64,uint64)string'] | undefined]>

  /**
   * Calls the emergencyPauseMarketplace()string ABI method.
   *
   * Emergency pause (simplified)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  emergencyPauseMarketplace(params?: CallParams<AtomicMarketplaceV2Args['obj']['emergencyPauseMarketplace()string'] | AtomicMarketplaceV2Args['tuple']['emergencyPauseMarketplace()string']>): AtomicMarketplaceV2Composer<[...TReturns, AtomicMarketplaceV2Returns['emergencyPauseMarketplace()string'] | undefined]>

  /**
   * Calls the resumeMarketplace()string ABI method.
   *
   * Resume operations (simplified)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  resumeMarketplace(params?: CallParams<AtomicMarketplaceV2Args['obj']['resumeMarketplace()string'] | AtomicMarketplaceV2Args['tuple']['resumeMarketplace()string']>): AtomicMarketplaceV2Composer<[...TReturns, AtomicMarketplaceV2Returns['resumeMarketplace()string'] | undefined]>

  /**
   * Calls the withdrawMarketplaceFees(uint64,uint64)string ABI method.
   *
   * Withdraw collected fees (simplified)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdrawMarketplaceFees(params?: CallParams<AtomicMarketplaceV2Args['obj']['withdrawMarketplaceFees(uint64,uint64)string'] | AtomicMarketplaceV2Args['tuple']['withdrawMarketplaceFees(uint64,uint64)string']>): AtomicMarketplaceV2Composer<[...TReturns, AtomicMarketplaceV2Returns['withdrawMarketplaceFees(uint64,uint64)string'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the AtomicMarketplaceV2 smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): AtomicMarketplaceV2Composer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): AtomicMarketplaceV2Composer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<AtomicMarketplaceV2ComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<AtomicMarketplaceV2ComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<AtomicMarketplaceV2ComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<AtomicMarketplaceV2ComposerResults<TReturns>>
}
export type AtomicMarketplaceV2ComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

