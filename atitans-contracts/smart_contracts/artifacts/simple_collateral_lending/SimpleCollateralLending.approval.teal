#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 4 500 961 705
    bytecblock 0x151f7c75 0x00 "nextLoanId" "totalLoansIssued" "totalVolumeUSDC" "usdcAssetId" "loans" "requests" "defaultLiquidationRatio" "borrower" "lender" 0x0000
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:56
    // export default class SimpleCollateralLending extends Contract {
    txn NumAppArgs
    bz main_bare_routing@16
    pushbytess 0xb5e4f78c 0x02642eaf 0xeae7d7a6 0x46b13230 0x79dc832f 0xfdf534f5 0xb39eb105 0xd0f37475 0x62cf89bc 0xa97c0c38 0x8a0a5fa9 // method "initialize(uint64,uint64)bool", method "requestLoan(uint64,uint64,uint64,uint64,axfer)uint64", method "fundLoan(uint64,axfer)bool", method "repayLoan(uint64,axfer)bool", method "liquidateLoan(uint64)bool", method "getLoanRequest(uint64)(uint64,address,uint64,uint64,uint64,uint64,uint64,uint64,bool,bool)", method "getActiveLoan(uint64)(uint64,address,address,uint64,uint64,uint64,uint64,uint64,uint64,bool,bool)", method "getBorrowerLoans(address)uint64[]", method "getLenderLoans(address)uint64[]", method "getRiskBasedLoanTerms(uint64,uint64)(uint64,uint64,uint64)", method "getLendingStats()(uint64,uint64,uint64)"
    txna ApplicationArgs 0
    match main_initialize_route@3 main_requestLoan_route@4 main_fundLoan_route@5 main_repayLoan_route@6 main_liquidateLoan_route@7 main_getLoanRequest_route@8 main_getActiveLoan_route@9 main_getBorrowerLoans_route@10 main_getLenderLoans_route@11 main_getRiskBasedLoanTerms_route@12 main_getLendingStats_route@13

main_after_if_else@20:
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:56
    // export default class SimpleCollateralLending extends Contract {
    intc_0 // 0
    return

main_getLendingStats_route@13:
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:467
    // @abimethod({ readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub getLendingStats
    cover 2
    concat
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_getRiskBasedLoanTerms_route@12:
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:451
    // @abimethod({ readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:56
    // export default class SimpleCollateralLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:451
    // @abimethod({ readonly: true })
    callsub getRiskBasedLoanTerms
    cover 2
    concat
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_getLenderLoans_route@11:
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:440
    // @abimethod({ readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:56
    // export default class SimpleCollateralLending extends Contract {
    txna ApplicationArgs 1
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:440
    // @abimethod({ readonly: true })
    callsub getLenderLoans
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_getBorrowerLoans_route@10:
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:429
    // @abimethod({ readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:56
    // export default class SimpleCollateralLending extends Contract {
    txna ApplicationArgs 1
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:429
    // @abimethod({ readonly: true })
    callsub getBorrowerLoans
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_getActiveLoan_route@9:
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:420
    // @abimethod({ readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:56
    // export default class SimpleCollateralLending extends Contract {
    txna ApplicationArgs 1
    btoi
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:420
    // @abimethod({ readonly: true })
    callsub getActiveLoan
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_getLoanRequest_route@8:
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:411
    // @abimethod({ readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:56
    // export default class SimpleCollateralLending extends Contract {
    txna ApplicationArgs 1
    btoi
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:411
    // @abimethod({ readonly: true })
    callsub getLoanRequest
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_liquidateLoan_route@7:
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:348
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:56
    // export default class SimpleCollateralLending extends Contract {
    txna ApplicationArgs 1
    btoi
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:348
    // @abimethod()
    callsub liquidateLoan
    bytec_1 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_repayLoan_route@6:
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:297
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:56
    // export default class SimpleCollateralLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_2 // axfer
    ==
    assert // transaction type is axfer
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:297
    // @abimethod()
    callsub repayLoan
    bytec_1 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_fundLoan_route@5:
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:225
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:56
    // export default class SimpleCollateralLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_2 // axfer
    ==
    assert // transaction type is axfer
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:225
    // @abimethod()
    callsub fundLoan
    bytec_1 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_requestLoan_route@4:
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:160
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:56
    // export default class SimpleCollateralLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    txna ApplicationArgs 4
    btoi
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_2 // axfer
    ==
    assert // transaction type is axfer
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:160
    // @abimethod()
    callsub requestLoan
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_initialize_route@3:
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:142
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:56
    // export default class SimpleCollateralLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:142
    // @abimethod()
    callsub initialize
    bytec_1 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_bare_routing@16:
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:56
    // export default class SimpleCollateralLending extends Contract {
    txn OnCompletion
    bnz main_after_if_else@20
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts::SimpleCollateralLending.calculateLTVFromRisk(riskScore: uint64) -> uint64:
calculateLTVFromRisk:
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:62
    // private calculateLTVFromRisk(riskScore: uint64): uint64 {
    proto 1 1
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:69
    // if (riskScore <= 300) {
    frame_dig -1
    pushint 300 // 300
    <=
    bz calculateLTVFromRisk_else_body@2
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:70
    // return 8000 // 80% LTV
    pushint 8000 // 8000
    retsub

calculateLTVFromRisk_else_body@2:
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:71
    // } else if (riskScore <= 500) {
    frame_dig -1
    intc_3 // 500
    <=
    bz calculateLTVFromRisk_else_body@4
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:72
    // return 7000 // 70% LTV
    pushint 7000 // 7000
    retsub

calculateLTVFromRisk_else_body@4:
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:73
    // } else if (riskScore <= 700) {
    frame_dig -1
    pushint 700 // 700
    <=
    bz calculateLTVFromRisk_else_body@6
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:74
    // return 6000 // 60% LTV
    pushint 6000 // 6000
    retsub

calculateLTVFromRisk_else_body@6:
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:76
    // return 4000 // 40% LTV
    pushint 4000 // 4000
    retsub


// smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts::SimpleCollateralLending.getRiskBasedInterestRate(riskScore: uint64) -> uint64:
getRiskBasedInterestRate:
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:103
    // private getRiskBasedInterestRate(riskScore: uint64): uint64 {
    proto 1 1
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:110
    // if (riskScore <= 300) {
    frame_dig -1
    pushint 300 // 300
    <=
    bz getRiskBasedInterestRate_else_body@2
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:111
    // return 500  // 5% APR
    intc_3 // 500
    retsub

getRiskBasedInterestRate_else_body@2:
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:112
    // } else if (riskScore <= 500) {
    frame_dig -1
    intc_3 // 500
    <=
    bz getRiskBasedInterestRate_else_body@4
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:113
    // return 800  // 8% APR
    pushint 800 // 800
    retsub

getRiskBasedInterestRate_else_body@4:
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:114
    // } else if (riskScore <= 700) {
    frame_dig -1
    pushint 700 // 700
    <=
    bz getRiskBasedInterestRate_else_body@6
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:115
    // return 1200 // 12% APR
    pushint 1200 // 1200
    retsub

getRiskBasedInterestRate_else_body@6:
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:117
    // return 1800 // 18% APR
    pushint 1800 // 1800
    retsub


// smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts::SimpleCollateralLending.initialize(usdcAssetId: uint64, registryContractId: uint64) -> uint64:
initialize:
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:142-143
    // @abimethod()
    // public initialize(usdcAssetId: uint64, registryContractId: uint64): boolean {
    proto 2 1
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:144
    // assert(Txn.sender === Global.creatorAddress, 'Only creator can initialize')
    txn Sender
    global CreatorAddress
    ==
    assert // Only creator can initialize
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:132
    // public nextLoanId = GlobalState<uint64>()
    bytec_2 // "nextLoanId"
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:146
    // this.nextLoanId.value = 1
    intc_1 // 1
    app_global_put
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:133
    // public totalLoansIssued = GlobalState<uint64>()
    bytec_3 // "totalLoansIssued"
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:147
    // this.totalLoansIssued.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:134
    // public totalVolumeUSDC = GlobalState<uint64>()
    bytec 4 // "totalVolumeUSDC"
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:148
    // this.totalVolumeUSDC.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:135
    // public defaultLiquidationRatio = GlobalState<uint64>() // 150% = 15000 bps
    bytec 8 // "defaultLiquidationRatio"
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:149
    // this.defaultLiquidationRatio.value = 15000 // 150% collateralization
    pushint 15000 // 15000
    app_global_put
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:136
    // public usdcAssetId = GlobalState<uint64>()
    bytec 5 // "usdcAssetId"
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:150
    // this.usdcAssetId.value = usdcAssetId
    frame_dig -2
    app_global_put
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:137
    // public registryContractId = GlobalState<uint64>() // Reference to TradeInstrumentRegistry
    pushbytes "registryContractId"
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:151
    // this.registryContractId.value = registryContractId
    frame_dig -1
    app_global_put
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:153
    // return true
    intc_1 // 1
    retsub


// smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts::SimpleCollateralLending.requestLoan(collateralAssetId: uint64, collateralValue: uint64, requestedAmount: uint64, loanDurationDays: uint64, collateralTransfer: uint64) -> uint64:
requestLoan:
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:160-167
    // @abimethod()
    // public requestLoan(
    //   collateralAssetId: uint64,
    //   collateralValue: uint64,
    //   requestedAmount: uint64,
    //   loanDurationDays: uint64,
    //   collateralTransfer: gtxn.AssetTransferTxn
    // ): uint64 {
    proto 5 1
    intc_0 // 0
    pushbytes ""
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:132
    // public nextLoanId = GlobalState<uint64>()
    intc_0 // 0
    bytec_2 // "nextLoanId"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:169
    // if (this.nextLoanId.value === 0) {
    bnz requestLoan_after_if_else@2
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:132
    // public nextLoanId = GlobalState<uint64>()
    bytec_2 // "nextLoanId"
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:170
    // this.nextLoanId.value = 1
    intc_1 // 1
    app_global_put
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:133
    // public totalLoansIssued = GlobalState<uint64>()
    bytec_3 // "totalLoansIssued"
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:171
    // this.totalLoansIssued.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:134
    // public totalVolumeUSDC = GlobalState<uint64>()
    bytec 4 // "totalVolumeUSDC"
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:172
    // this.totalVolumeUSDC.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:135
    // public defaultLiquidationRatio = GlobalState<uint64>() // 150% = 15000 bps
    bytec 8 // "defaultLiquidationRatio"
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:173
    // this.defaultLiquidationRatio.value = 15000
    pushint 15000 // 15000
    app_global_put

requestLoan_after_if_else@2:
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:177
    // assert(collateralTransfer.xferAsset.id === collateralAssetId, 'Collateral asset mismatch')
    frame_dig -1
    gtxns XferAsset
    frame_dig -5
    ==
    assert // Collateral asset mismatch
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:178
    // assert(collateralTransfer.assetReceiver === Global.currentApplicationAddress, 'Must transfer collateral to contract')
    frame_dig -1
    gtxns AssetReceiver
    global CurrentApplicationAddress
    ==
    assert // Must transfer collateral to contract
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:179
    // assert(collateralTransfer.sender === Txn.sender, 'Collateral sender mismatch')
    frame_dig -1
    gtxns Sender
    txn Sender
    ==
    assert // Collateral sender mismatch
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:180
    // assert(collateralTransfer.assetAmount === 1, 'Must transfer entire eBL')
    frame_dig -1
    gtxns AssetAmount
    intc_1 // 1
    ==
    assert // Must transfer entire eBL
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:89
    // return 500
    intc_3 // 500
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:96
    // const ltvBps: uint64 = this.calculateLTVFromRisk(riskScore)
    callsub calculateLTVFromRisk
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:97
    // return (collateralValue * ltvBps) / 10000
    frame_dig -4
    *
    pushint 10000 // 10000
    /
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:189
    // assert(requestedAmount > 0, 'Requested amount must be positive')
    frame_dig -3
    assert // Requested amount must be positive
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:190
    // assert(requestedAmount <= maxLoanAmount, 'Requested amount exceeds risk-based LTV limit')
    frame_dig -3
    >=
    assert // Requested amount exceeds risk-based LTV limit
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:191
    // assert(loanDurationDays <= 365, 'Loan duration too long (max 1 year)')
    frame_dig -2
    pushint 365 // 365
    <=
    assert // Loan duration too long (max 1 year)
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:89
    // return 500
    intc_3 // 500
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:194
    // const riskBasedInterestRate: uint64 = this.getRiskBasedInterestRate(riskScore)
    callsub getRiskBasedInterestRate
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:132
    // public nextLoanId = GlobalState<uint64>()
    intc_0 // 0
    bytec_2 // "nextLoanId"
    app_global_get_ex
    swap
    dup
    cover 2
    frame_bury 1
    assert // check GlobalState exists
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:199
    // loanId: new arc4.UintN64(loanId),
    itob
    dup
    uncover 2
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:200
    // borrower: new arc4.Address(Txn.sender),
    txn Sender
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:201
    // collateralAssetId: new arc4.UintN64(collateralAssetId),
    frame_dig -5
    itob
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:202
    // collateralValue: new arc4.UintN64(collateralValue),
    frame_dig -4
    itob
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:203
    // requestedAmount: new arc4.UintN64(requestedAmount),
    frame_dig -3
    itob
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:204
    // interestRateBps: new arc4.UintN64(riskBasedInterestRate), // Auto-calculated based on risk
    uncover 4
    itob
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:205
    // loanDurationDays: new arc4.UintN64(loanDurationDays),
    frame_dig -2
    itob
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:206
    // requestTime: new arc4.UintN64(Global.latestTimestamp),
    global LatestTimestamp
    itob
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:198-209
    // const request = new LoanRequest({
    //   loanId: new arc4.UintN64(loanId),
    //   borrower: new arc4.Address(Txn.sender),
    //   collateralAssetId: new arc4.UintN64(collateralAssetId),
    //   collateralValue: new arc4.UintN64(collateralValue),
    //   requestedAmount: new arc4.UintN64(requestedAmount),
    //   interestRateBps: new arc4.UintN64(riskBasedInterestRate), // Auto-calculated based on risk
    //   loanDurationDays: new arc4.UintN64(loanDurationDays),
    //   requestTime: new arc4.UintN64(Global.latestTimestamp),
    //   isActive: new arc4.Bool(true),
    //   isFunded: new arc4.Bool(false)
    // })
    dig 7
    uncover 7
    concat
    uncover 6
    concat
    uncover 5
    concat
    uncover 4
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:207
    // isActive: new arc4.Bool(true),
    pushbytes 0x80
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:198-209
    // const request = new LoanRequest({
    //   loanId: new arc4.UintN64(loanId),
    //   borrower: new arc4.Address(Txn.sender),
    //   collateralAssetId: new arc4.UintN64(collateralAssetId),
    //   collateralValue: new arc4.UintN64(collateralValue),
    //   requestedAmount: new arc4.UintN64(requestedAmount),
    //   interestRateBps: new arc4.UintN64(riskBasedInterestRate), // Auto-calculated based on risk
    //   loanDurationDays: new arc4.UintN64(loanDurationDays),
    //   requestTime: new arc4.UintN64(Global.latestTimestamp),
    //   isActive: new arc4.Bool(true),
    //   isFunded: new arc4.Bool(false)
    // })
    concat
    intc 5 // 705
    intc_0 // 0
    setbit
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:124
    // public loanRequests = BoxMap<uint64, LoanRequest>({ keyPrefix: 'requests' })
    bytec 7 // "requests"
    uncover 2
    concat
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:212
    // this.loanRequests(loanId).value = request.copy()
    swap
    box_put
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:126
    // public borrowerLoans = BoxMap<arc4.Address, arc4.DynamicArray<arc4.UintN64>>({ keyPrefix: 'borrower' })
    bytec 9 // "borrower"
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:215
    // this.addLoanToBorrower(new arc4.Address(Txn.sender), loanId)
    txn Sender
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:126
    // public borrowerLoans = BoxMap<arc4.Address, arc4.DynamicArray<arc4.UintN64>>({ keyPrefix: 'borrower' })
    concat
    dup
    frame_bury 0
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:382
    // if (this.borrowerLoans(borrower).exists) {
    box_len
    bury 1
    bz requestLoan_else_body@7
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:383
    // const loans = this.borrowerLoans(borrower).value.copy()
    frame_dig 0
    dup
    box_get
    assert // Box must have value
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:384
    // loans.push(new arc4.UintN64(loanId))
    extract 2 0
    uncover 2
    concat
    dup
    len
    pushint 8 // 8
    /
    itob
    extract 6 2
    swap
    concat
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:385
    // this.borrowerLoans(borrower).value = loans.copy()
    dig 1
    box_del
    pop
    box_put

requestLoan_after_if_else@8:
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:217
    // this.nextLoanId.value = loanId + 1
    frame_dig 1
    dup
    intc_1 // 1
    +
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:132
    // public nextLoanId = GlobalState<uint64>()
    bytec_2 // "nextLoanId"
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:217
    // this.nextLoanId.value = loanId + 1
    swap
    app_global_put
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:219
    // return loanId
    frame_bury 0
    retsub

requestLoan_else_body@7:
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:388
    // newArray.push(new arc4.UintN64(loanId))
    pushbytes 0x0001
    swap
    concat
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:389
    // this.borrowerLoans(borrower).value = newArray.copy()
    frame_dig 0
    dup
    box_del
    pop
    swap
    box_put
    b requestLoan_after_if_else@8


// smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts::SimpleCollateralLending.fundLoan(loanId: uint64, usdcPayment: uint64) -> uint64:
fundLoan:
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:225-229
    // @abimethod()
    // public fundLoan(
    //   loanId: uint64,
    //   usdcPayment: gtxn.AssetTransferTxn
    // ): boolean {
    proto 2 1
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:230
    // assert(this.loanRequests(loanId).exists, 'Loan request not found')
    frame_dig -2
    itob
    dup
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:124
    // public loanRequests = BoxMap<uint64, LoanRequest>({ keyPrefix: 'requests' })
    bytec 7 // "requests"
    dig 1
    concat
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:230
    // assert(this.loanRequests(loanId).exists, 'Loan request not found')
    dup
    box_len
    bury 1
    assert // Loan request not found
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:231
    // const request = this.loanRequests(loanId).value.copy()
    dup
    box_get
    assert // Box must have value
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:234
    // assert(request.isActive.native === true, 'Request inactive')
    dup
    pushint 704 // 704
    getbit
    bytec_1 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    dup
    intc_0 // 0
    getbit
    intc_1 // 1
    ==
    assert // Request inactive
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:235
    // assert(request.isFunded.native === false, 'Already funded')
    dig 1
    intc 5 // 705
    getbit
    bytec_1 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    !
    assert // Already funded
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:238
    // assert(usdcPayment.xferAsset.id === this.usdcAssetId.value, 'Must pay with USDC')
    frame_dig -1
    gtxns XferAsset
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:136
    // public usdcAssetId = GlobalState<uint64>()
    intc_0 // 0
    bytec 5 // "usdcAssetId"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:238
    // assert(usdcPayment.xferAsset.id === this.usdcAssetId.value, 'Must pay with USDC')
    ==
    assert // Must pay with USDC
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:239
    // assert(usdcPayment.assetAmount === request.requestedAmount.native, 'Incorrect funding amount')
    frame_dig -1
    gtxns AssetAmount
    dig 2
    extract 56 8 // on error: Index access is out of bounds
    dig 3
    pushint 56 // 56
    extract_uint64
    dup
    cover 7
    uncover 2
    dig 1
    ==
    assert // Incorrect funding amount
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:240
    // assert(usdcPayment.assetReceiver === Global.currentApplicationAddress, 'Payment to wrong address')
    frame_dig -1
    gtxns AssetReceiver
    global CurrentApplicationAddress
    ==
    assert // Payment to wrong address
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:241
    // assert(usdcPayment.sender === Txn.sender, 'Payment sender mismatch')
    frame_dig -1
    gtxns Sender
    txn Sender
    ==
    assert // Payment sender mismatch
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:244
    // const interestAmount: uint64 = (request.requestedAmount.native * request.interestRateBps.native * request.loanDurationDays.native) / (10000 * 365)
    dig 3
    extract 64 8 // on error: Index access is out of bounds
    dig 4
    pushint 64 // 64
    extract_uint64
    dig 2
    *
    dig 5
    extract 72 8 // on error: Index access is out of bounds
    dig 6
    pushint 72 // 72
    extract_uint64
    uncover 2
    dig 1
    *
    pushint 3650000 // 3650000
    /
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:245
    // const repaymentAmount: uint64 = request.requestedAmount.native + interestAmount
    dig 4
    +
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:248
    // const dueDate: uint64 = Global.latestTimestamp + (request.loanDurationDays.native * 86400) // days to seconds
    global LatestTimestamp
    uncover 2
    pushint 86400 // 86400
    *
    +
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:251-258
    // itxn
    //   .assetTransfer({
    //     xferAsset: Asset(this.usdcAssetId.value),
    //     assetReceiver: request.borrower.bytes,
    //     assetAmount: request.requestedAmount.native,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:136
    // public usdcAssetId = GlobalState<uint64>()
    intc_0 // 0
    bytec 5 // "usdcAssetId"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:254
    // assetReceiver: request.borrower.bytes,
    dig 8
    extract 8 32 // on error: Index access is out of bounds
    uncover 6
    itxn_field AssetAmount
    dup
    itxn_field AssetReceiver
    swap
    itxn_field XferAsset
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:251-257
    // itxn
    //   .assetTransfer({
    //     xferAsset: Asset(this.usdcAssetId.value),
    //     assetReceiver: request.borrower.bytes,
    //     assetAmount: request.requestedAmount.native,
    //     fee: 0,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:256
    // fee: 0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:251-258
    // itxn
    //   .assetTransfer({
    //     xferAsset: Asset(this.usdcAssetId.value),
    //     assetReceiver: request.borrower.bytes,
    //     assetAmount: request.requestedAmount.native,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:264
    // lender: new arc4.Address(Txn.sender),
    txn Sender
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:265
    // collateralAssetId: request.collateralAssetId,
    dig 8
    extract 40 8 // on error: Index access is out of bounds
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:268
    // repaymentAmount: new arc4.UintN64(repaymentAmount),
    uncover 4
    itob
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:269
    // dueDate: new arc4.UintN64(dueDate),
    uncover 4
    itob
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:270
    // fundedTime: new arc4.UintN64(Global.latestTimestamp),
    global LatestTimestamp
    itob
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:261-273
    // const activeLoan = new ActiveLoan({
    //   loanId: new arc4.UintN64(loanId),
    //   borrower: request.borrower,
    //   lender: new arc4.Address(Txn.sender),
    //   collateralAssetId: request.collateralAssetId,
    //   principalAmount: request.requestedAmount,
    //   interestRateBps: request.interestRateBps,
    //   repaymentAmount: new arc4.UintN64(repaymentAmount),
    //   dueDate: new arc4.UintN64(dueDate),
    //   fundedTime: new arc4.UintN64(Global.latestTimestamp),
    //   isRepaid: new arc4.Bool(false),
    //   isLiquidated: new arc4.Bool(false)
    // })
    dig 12
    dig 6
    concat
    uncover 5
    concat
    dig 4
    concat
    dig 8
    concat
    dig 7
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:271
    // isRepaid: new arc4.Bool(false),
    bytec_1 // 0x00
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:261-273
    // const activeLoan = new ActiveLoan({
    //   loanId: new arc4.UintN64(loanId),
    //   borrower: request.borrower,
    //   lender: new arc4.Address(Txn.sender),
    //   collateralAssetId: request.collateralAssetId,
    //   principalAmount: request.requestedAmount,
    //   interestRateBps: request.interestRateBps,
    //   repaymentAmount: new arc4.UintN64(repaymentAmount),
    //   dueDate: new arc4.UintN64(dueDate),
    //   fundedTime: new arc4.UintN64(Global.latestTimestamp),
    //   isRepaid: new arc4.Bool(false),
    //   isLiquidated: new arc4.Bool(false)
    // })
    concat
    intc 4 // 961
    intc_0 // 0
    setbit
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:125
    // public activeLoans = BoxMap<uint64, ActiveLoan>({ keyPrefix: 'loans' })
    bytec 6 // "loans"
    uncover 10
    concat
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:276
    // this.activeLoans(loanId).value = activeLoan.copy()
    swap
    box_put
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:279-282
    // this.loanRequests(loanId).value = new LoanRequest({
    //   ...request,
    //   isFunded: new arc4.Bool(true)
    // })
    dig 6
    extract 0 8 // on error: Index access is out of bounds
    dig 7
    extract 48 8 // on error: Index access is out of bounds
    uncover 8
    extract 80 8 // on error: Index access is out of bounds
    uncover 2
    uncover 4
    concat
    uncover 3
    concat
    uncover 2
    concat
    uncover 4
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    swap
    concat
    intc 5 // 705
    intc_1 // 1
    setbit
    box_put
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:127
    // public lenderLoans = BoxMap<arc4.Address, arc4.DynamicArray<arc4.UintN64>>({ keyPrefix: 'lender' })
    bytec 10 // "lender"
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:285
    // this.addLoanToLender(new arc4.Address(Txn.sender), loanId)
    txn Sender
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:127
    // public lenderLoans = BoxMap<arc4.Address, arc4.DynamicArray<arc4.UintN64>>({ keyPrefix: 'lender' })
    concat
    dup
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:397
    // if (this.lenderLoans(lender).exists) {
    box_len
    bury 1
    bz fundLoan_else_body@4
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:398
    // const loans = this.lenderLoans(lender).value.copy()
    dup
    box_get
    assert // Box must have value
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:399
    // loans.push(new arc4.UintN64(loanId))
    extract 2 0
    frame_dig 0
    concat
    dup
    len
    pushint 8 // 8
    /
    itob
    extract 6 2
    swap
    concat
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:400
    // this.lenderLoans(lender).value = loans.copy()
    dig 1
    box_del
    pop
    box_put

fundLoan_after_if_else@5:
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:133
    // public totalLoansIssued = GlobalState<uint64>()
    intc_0 // 0
    bytec_3 // "totalLoansIssued"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:288
    // this.totalLoansIssued.value = this.totalLoansIssued.value + 1
    intc_1 // 1
    +
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:133
    // public totalLoansIssued = GlobalState<uint64>()
    bytec_3 // "totalLoansIssued"
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:288
    // this.totalLoansIssued.value = this.totalLoansIssued.value + 1
    swap
    app_global_put
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:134
    // public totalVolumeUSDC = GlobalState<uint64>()
    intc_0 // 0
    bytec 4 // "totalVolumeUSDC"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:289
    // this.totalVolumeUSDC.value = this.totalVolumeUSDC.value + request.requestedAmount.native
    frame_dig 1
    +
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:134
    // public totalVolumeUSDC = GlobalState<uint64>()
    bytec 4 // "totalVolumeUSDC"
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:289
    // this.totalVolumeUSDC.value = this.totalVolumeUSDC.value + request.requestedAmount.native
    swap
    app_global_put
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:291
    // return true
    intc_1 // 1
    frame_bury 0
    retsub

fundLoan_else_body@4:
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:403
    // newArray.push(new arc4.UintN64(loanId))
    frame_dig 0
    dup
    len
    pushint 8 // 8
    /
    itob
    extract 6 2
    swap
    concat
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:404
    // this.lenderLoans(lender).value = newArray.copy()
    swap
    dup
    box_del
    pop
    swap
    box_put
    b fundLoan_after_if_else@5


// smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts::SimpleCollateralLending.repayLoan(loanId: uint64, repayment: uint64) -> uint64:
repayLoan:
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:297-301
    // @abimethod()
    // public repayLoan(
    //   loanId: uint64,
    //   repayment: gtxn.AssetTransferTxn
    // ): boolean {
    proto 2 1
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:302
    // assert(this.activeLoans(loanId).exists, 'Active loan not found')
    frame_dig -2
    itob
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:125
    // public activeLoans = BoxMap<uint64, ActiveLoan>({ keyPrefix: 'loans' })
    bytec 6 // "loans"
    swap
    concat
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:302
    // assert(this.activeLoans(loanId).exists, 'Active loan not found')
    dup
    box_len
    bury 1
    assert // Active loan not found
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:303
    // const loan = this.activeLoans(loanId).value.copy()
    dup
    box_get
    assert // Box must have value
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:306
    // assert(loan.isRepaid.native === false, 'Already repaid')
    dup
    pushint 960 // 960
    getbit
    bytec_1 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    !
    assert // Already repaid
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:307
    // assert(loan.isLiquidated.native === false, 'Already liquidated')
    dup
    intc 4 // 961
    getbit
    bytec_1 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    dup
    !
    assert // Already liquidated
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:308
    // assert(loan.borrower.bytes === Txn.sender.bytes, 'Only borrower can repay')
    dig 1
    extract 8 32 // on error: Index access is out of bounds
    dup
    txn Sender
    ==
    assert // Only borrower can repay
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:311
    // assert(repayment.xferAsset.id === this.usdcAssetId.value, 'Must repay with USDC')
    frame_dig -1
    gtxns XferAsset
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:136
    // public usdcAssetId = GlobalState<uint64>()
    intc_0 // 0
    bytec 5 // "usdcAssetId"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:311
    // assert(repayment.xferAsset.id === this.usdcAssetId.value, 'Must repay with USDC')
    ==
    assert // Must repay with USDC
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:312
    // assert(repayment.assetAmount === loan.repaymentAmount.native, 'Incorrect repayment amount')
    frame_dig -1
    gtxns AssetAmount
    dig 3
    extract 96 8 // on error: Index access is out of bounds
    dig 4
    pushint 96 // 96
    extract_uint64
    uncover 2
    dig 1
    ==
    assert // Incorrect repayment amount
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:313
    // assert(repayment.assetReceiver === Global.currentApplicationAddress, 'Payment to wrong address')
    frame_dig -1
    gtxns AssetReceiver
    global CurrentApplicationAddress
    ==
    assert // Payment to wrong address
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:314
    // assert(repayment.sender === Txn.sender, 'Payment sender mismatch')
    frame_dig -1
    gtxns Sender
    txn Sender
    ==
    assert // Payment sender mismatch
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:317-324
    // itxn
    //   .assetTransfer({
    //     xferAsset: Asset(this.usdcAssetId.value),
    //     assetReceiver: loan.lender.bytes,
    //     assetAmount: loan.repaymentAmount.native,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:136
    // public usdcAssetId = GlobalState<uint64>()
    intc_0 // 0
    bytec 5 // "usdcAssetId"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:320
    // assetReceiver: loan.lender.bytes,
    dig 5
    extract 40 32 // on error: Index access is out of bounds
    uncover 2
    itxn_field AssetAmount
    dup
    itxn_field AssetReceiver
    swap
    itxn_field XferAsset
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:317-323
    // itxn
    //   .assetTransfer({
    //     xferAsset: Asset(this.usdcAssetId.value),
    //     assetReceiver: loan.lender.bytes,
    //     assetAmount: loan.repaymentAmount.native,
    //     fee: 0,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:322
    // fee: 0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:317-324
    // itxn
    //   .assetTransfer({
    //     xferAsset: Asset(this.usdcAssetId.value),
    //     assetReceiver: loan.lender.bytes,
    //     assetAmount: loan.repaymentAmount.native,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:327-334
    // itxn
    //   .assetTransfer({
    //     xferAsset: Asset(loan.collateralAssetId.native),
    //     assetReceiver: loan.borrower.bytes,
    //     assetAmount: 1,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:329
    // xferAsset: Asset(loan.collateralAssetId.native),
    dig 4
    extract 72 8 // on error: Index access is out of bounds
    dig 5
    pushint 72 // 72
    extract_uint64
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:331
    // assetAmount: 1,
    intc_1 // 1
    itxn_field AssetAmount
    dig 4
    itxn_field AssetReceiver
    itxn_field XferAsset
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:327-333
    // itxn
    //   .assetTransfer({
    //     xferAsset: Asset(loan.collateralAssetId.native),
    //     assetReceiver: loan.borrower.bytes,
    //     assetAmount: 1,
    //     fee: 0,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:332
    // fee: 0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:327-334
    // itxn
    //   .assetTransfer({
    //     xferAsset: Asset(loan.collateralAssetId.native),
    //     assetReceiver: loan.borrower.bytes,
    //     assetAmount: 1,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:337-340
    // this.activeLoans(loanId).value = new ActiveLoan({
    //   ...loan,
    //   isRepaid: new arc4.Bool(true)
    // })
    dig 5
    extract 0 8 // on error: Index access is out of bounds
    dig 6
    extract 80 8 // on error: Index access is out of bounds
    dig 7
    extract 88 8 // on error: Index access is out of bounds
    dig 8
    extract 104 8 // on error: Index access is out of bounds
    uncover 9
    extract 112 8 // on error: Index access is out of bounds
    uncover 4
    uncover 8
    concat
    uncover 6
    concat
    uncover 5
    concat
    uncover 4
    concat
    uncover 3
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:339
    // isRepaid: new arc4.Bool(true)
    pushbytes 0x80
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:337-340
    // this.activeLoans(loanId).value = new ActiveLoan({
    //   ...loan,
    //   isRepaid: new arc4.Bool(true)
    // })
    concat
    intc 4 // 961
    uncover 2
    setbit
    box_put
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:342
    // return true
    intc_1 // 1
    retsub


// smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts::SimpleCollateralLending.liquidateLoan(loanId: uint64) -> uint64:
liquidateLoan:
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:348-349
    // @abimethod()
    // public liquidateLoan(loanId: uint64): boolean {
    proto 1 1
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:350
    // assert(this.activeLoans(loanId).exists, 'Active loan not found')
    frame_dig -1
    itob
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:125
    // public activeLoans = BoxMap<uint64, ActiveLoan>({ keyPrefix: 'loans' })
    bytec 6 // "loans"
    swap
    concat
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:350
    // assert(this.activeLoans(loanId).exists, 'Active loan not found')
    dup
    box_len
    bury 1
    assert // Active loan not found
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:351
    // const loan = this.activeLoans(loanId).value.copy()
    dup
    box_get
    assert // Box must have value
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:354
    // assert(loan.isRepaid.native === false, 'Already repaid')
    dup
    pushint 960 // 960
    getbit
    bytec_1 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    dup
    intc_0 // 0
    getbit
    !
    assert // Already repaid
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:355
    // assert(loan.isLiquidated.native === false, 'Already liquidated')
    dig 1
    intc 4 // 961
    getbit
    bytec_1 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    !
    assert // Already liquidated
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:356
    // assert(loan.lender.bytes === Txn.sender.bytes, 'Only lender can liquidate')
    dig 1
    extract 40 32 // on error: Index access is out of bounds
    dup
    txn Sender
    ==
    assert // Only lender can liquidate
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:357
    // assert(Global.latestTimestamp > loan.dueDate.native, 'Loan not yet overdue')
    global LatestTimestamp
    dig 3
    extract 104 8 // on error: Index access is out of bounds
    dig 4
    pushint 104 // 104
    extract_uint64
    uncover 2
    <
    assert // Loan not yet overdue
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:360-367
    // itxn
    //   .assetTransfer({
    //     xferAsset: Asset(loan.collateralAssetId.native),
    //     assetReceiver: loan.lender.bytes,
    //     assetAmount: 1,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:362
    // xferAsset: Asset(loan.collateralAssetId.native),
    dig 3
    extract 72 8 // on error: Index access is out of bounds
    dig 4
    pushint 72 // 72
    extract_uint64
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:364
    // assetAmount: 1,
    intc_1 // 1
    itxn_field AssetAmount
    dig 3
    itxn_field AssetReceiver
    itxn_field XferAsset
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:360-366
    // itxn
    //   .assetTransfer({
    //     xferAsset: Asset(loan.collateralAssetId.native),
    //     assetReceiver: loan.lender.bytes,
    //     assetAmount: 1,
    //     fee: 0,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:365
    // fee: 0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:360-367
    // itxn
    //   .assetTransfer({
    //     xferAsset: Asset(loan.collateralAssetId.native),
    //     assetReceiver: loan.lender.bytes,
    //     assetAmount: 1,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:370-373
    // this.activeLoans(loanId).value = new ActiveLoan({
    //   ...loan,
    //   isLiquidated: new arc4.Bool(true)
    // })
    dig 4
    extract 0 8 // on error: Index access is out of bounds
    dig 5
    extract 8 32 // on error: Index access is out of bounds
    dig 6
    extract 80 8 // on error: Index access is out of bounds
    dig 7
    extract 88 8 // on error: Index access is out of bounds
    dig 8
    extract 96 8 // on error: Index access is out of bounds
    uncover 9
    extract 112 8 // on error: Index access is out of bounds
    uncover 5
    uncover 5
    concat
    uncover 7
    concat
    uncover 5
    concat
    uncover 4
    concat
    uncover 3
    concat
    uncover 2
    concat
    uncover 2
    concat
    swap
    concat
    swap
    concat
    intc 4 // 961
    intc_1 // 1
    setbit
    box_put
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:375
    // return true
    intc_1 // 1
    retsub


// smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts::SimpleCollateralLending.getLoanRequest(loanId: uint64) -> bytes:
getLoanRequest:
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:411-412
    // @abimethod({ readonly: true })
    // public getLoanRequest(loanId: uint64): LoanRequest {
    proto 1 1
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:413
    // assert(this.loanRequests(loanId).exists, 'Loan request not found')
    frame_dig -1
    itob
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:124
    // public loanRequests = BoxMap<uint64, LoanRequest>({ keyPrefix: 'requests' })
    bytec 7 // "requests"
    swap
    concat
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:413
    // assert(this.loanRequests(loanId).exists, 'Loan request not found')
    dup
    box_len
    bury 1
    assert // Loan request not found
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:414
    // return this.loanRequests(loanId).value
    box_get
    assert // Box must have value
    retsub


// smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts::SimpleCollateralLending.getActiveLoan(loanId: uint64) -> bytes:
getActiveLoan:
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:420-421
    // @abimethod({ readonly: true })
    // public getActiveLoan(loanId: uint64): ActiveLoan {
    proto 1 1
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:422
    // assert(this.activeLoans(loanId).exists, 'Active loan not found')
    frame_dig -1
    itob
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:125
    // public activeLoans = BoxMap<uint64, ActiveLoan>({ keyPrefix: 'loans' })
    bytec 6 // "loans"
    swap
    concat
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:422
    // assert(this.activeLoans(loanId).exists, 'Active loan not found')
    dup
    box_len
    bury 1
    assert // Active loan not found
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:423
    // return this.activeLoans(loanId).value
    box_get
    assert // Box must have value
    retsub


// smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts::SimpleCollateralLending.getBorrowerLoans(borrower: bytes) -> bytes:
getBorrowerLoans:
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:429-430
    // @abimethod({ readonly: true })
    // public getBorrowerLoans(borrower: arc4.Address): arc4.DynamicArray<arc4.UintN64> {
    proto 1 1
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:126
    // public borrowerLoans = BoxMap<arc4.Address, arc4.DynamicArray<arc4.UintN64>>({ keyPrefix: 'borrower' })
    bytec 9 // "borrower"
    frame_dig -1
    concat
    dup
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:431
    // if (this.borrowerLoans(borrower).exists) {
    box_len
    bury 1
    bz getBorrowerLoans_after_if_else@2
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:432
    // return this.borrowerLoans(borrower).value
    frame_dig 0
    box_get
    assert // Box must have value
    swap
    retsub

getBorrowerLoans_after_if_else@2:
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:434
    // return new arc4.DynamicArray<arc4.UintN64>()
    bytec 11 // 0x0000
    swap
    retsub


// smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts::SimpleCollateralLending.getLenderLoans(lender: bytes) -> bytes:
getLenderLoans:
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:440-441
    // @abimethod({ readonly: true })
    // public getLenderLoans(lender: arc4.Address): arc4.DynamicArray<arc4.UintN64> {
    proto 1 1
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:127
    // public lenderLoans = BoxMap<arc4.Address, arc4.DynamicArray<arc4.UintN64>>({ keyPrefix: 'lender' })
    bytec 10 // "lender"
    frame_dig -1
    concat
    dup
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:442
    // if (this.lenderLoans(lender).exists) {
    box_len
    bury 1
    bz getLenderLoans_after_if_else@2
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:443
    // return this.lenderLoans(lender).value
    frame_dig 0
    box_get
    assert // Box must have value
    swap
    retsub

getLenderLoans_after_if_else@2:
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:445
    // return new arc4.DynamicArray<arc4.UintN64>()
    bytec 11 // 0x0000
    swap
    retsub


// smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts::SimpleCollateralLending.getRiskBasedLoanTerms(collateralValue: uint64, riskScore: uint64) -> bytes, bytes, bytes:
getRiskBasedLoanTerms:
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:451-452
    // @abimethod({ readonly: true })
    // public getRiskBasedLoanTerms(collateralValue: uint64, riskScore: uint64): [arc4.UintN64, arc4.UintN64, arc4.UintN64] {
    proto 2 3
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:96
    // const ltvBps: uint64 = this.calculateLTVFromRisk(riskScore)
    frame_dig -1
    callsub calculateLTVFromRisk
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:97
    // return (collateralValue * ltvBps) / 10000
    frame_dig -2
    *
    pushint 10000 // 10000
    /
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:454
    // const interestRate: uint64 = this.getRiskBasedInterestRate(riskScore)
    frame_dig -1
    callsub getRiskBasedInterestRate
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:455
    // const ltvRatio: uint64 = this.calculateLTVFromRisk(riskScore)
    frame_dig -1
    callsub calculateLTVFromRisk
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:458
    // new arc4.UintN64(maxLoanAmount),
    uncover 2
    itob
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:459
    // new arc4.UintN64(interestRate),
    uncover 2
    itob
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:460
    // new arc4.UintN64(ltvRatio)
    uncover 2
    itob
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:457-461
    // return [
    //   new arc4.UintN64(maxLoanAmount),
    //   new arc4.UintN64(interestRate),
    //   new arc4.UintN64(ltvRatio)
    // ]
    retsub


// smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts::SimpleCollateralLending.getLendingStats() -> bytes, bytes, bytes:
getLendingStats:
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:133
    // public totalLoansIssued = GlobalState<uint64>()
    intc_0 // 0
    bytec_3 // "totalLoansIssued"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:470
    // new arc4.UintN64(this.totalLoansIssued.value),
    itob
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:134
    // public totalVolumeUSDC = GlobalState<uint64>()
    intc_0 // 0
    bytec 4 // "totalVolumeUSDC"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:471
    // new arc4.UintN64(this.totalVolumeUSDC.value),
    itob
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:132
    // public nextLoanId = GlobalState<uint64>()
    intc_0 // 0
    bytec_2 // "nextLoanId"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:472
    // new arc4.UintN64(this.nextLoanId.value - 1)
    intc_1 // 1
    -
    itob
    // smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts:469-473
    // return [
    //   new arc4.UintN64(this.totalLoansIssued.value),
    //   new arc4.UintN64(this.totalVolumeUSDC.value),
    //   new arc4.UintN64(this.nextLoanId.value - 1)
    // ]
    retsub
