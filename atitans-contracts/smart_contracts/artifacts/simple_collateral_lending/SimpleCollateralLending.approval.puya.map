{
  "version": 3,
  "sources": [
    "C:/SATHYA/CHAINAIM3003/mcp-servers/altry/atry2/atitans1/projects/atitans1-contracts/smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuDA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AA2ZG;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAhBA;;AAAA;AAAA;AAAA;;AAAA;AA3YH;;;AAAA;AAAA;;;AAAA;AA2YG;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AAhYH;;;AAgYG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AArXH;;;AAqXG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AA5WH;;;AAAA;AA4WG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAnWH;;;AAAA;AAmWG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AA/DA;;AAAA;AAAA;AAAA;;AAAA;AApSH;;;AAAA;AAoSG;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAnDA;;AAAA;AAAA;AAAA;;AAAA;AAjPH;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAiPG;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAxEA;;AAAA;AAAA;AAAA;;AAAA;AAzKH;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAyKG;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAjEA;;AAAA;AAAA;AAAA;;AAAA;AAxGH;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAwGG;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAlBA;;AAAA;AAAA;AAAA;;AAAA;AAtFH;;;AAAA;AAAA;;;AAAA;AAsFG;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAtFH;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAME;;;AAOM;;AAAa;;;AAAb;AAAJ;;;AACS;;;AAAP;AACS;;AAAa;AAAb;AAAJ;;;AACE;;;AAAP;AACS;;AAAa;;;AAAb;AAAJ;;;AACE;;;AAAP;AAEO;;;AAAP;AA2BJ;;;AAOM;;AAAa;;;AAAb;AAAJ;;;AACS;AAAP;AACS;;AAAa;AAAb;AAAJ;;;AACE;;;AAAP;AACS;;AAAa;;;AAAb;AAAJ;;;AACE;;;AAAP;AAEO;;;AAAP;AAyBJ;;;AAEa;;AAAkB;;AAAtB;AAAP;AAZK;AAcmB;AAAxB;AAbK;AAcyB;AAA9B;AAbK;;AAcwB;AAA7B;AAbK;;AAcgC;;;AAArC;AAbK;;AAcL;;AAAA;AAbK;;;;;;;;;;;;;;;;;;;;AAcL;;AAAA;AAEO;AAAP;AAOF;;;;;;AA5BO;AAAA;AAAA;AAAA;AAqCL;;;AArCK;AAsCqB;AAAxB;AArCG;AAsC2B;AAA9B;AArCG;;AAsC0B;AAA7B;AArCG;;AAsCkC;;;AAArC;AAIwB;;AAAA;;AAAnB;;AAAA;AAAP;AAC0B;;AAAA;;AAAyB;;AAA5C;AAAP;AAC0B;;AAAA;;AAAe;;AAAlC;AAAP;AAC0B;;AAAA;;AAAgB;AAAnC;AAAP;AA3FO;AAOgB;;;AACf;;AAAA;AAA4B;;;AAA7B;AA4FP;;AAAA;AACO;;AAAA;AAAP;AACO;;AAAoB;;;AAApB;AAAP;AAtGO;AAyG+B;;;AA9DjC;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAmEK;AAAA;AAAA;;AACuB;;AACZ;;AAAA;AACF;;AAAA;AACA;;AAAA;AACA;;AAAA;AACC;;AAAA;AACmB;;AAAxB;AARC;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AASJ;;;AATI;AAAA;;AAAA;AAAA;AA1E6C;;AAAA;;AAAA;AAwF7D;AAAA;AAtFwF;;AAyF5C;;AAzF4C;AAAA;AAAA;;AAgQvD;AAAA;;AAAjC;;;AAC6C;;AAAA;AAAA;AAAA;AAC3C;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AACA;;AAAA;;AAAA;AAxKsB;;AAAA;AAAS;AAAT;AArFnB;AAqFL;AAAA;AAEA;;AAAA;AAyKE;;;;AAAA;AAAA;AACA;;AAAA;AAAA;;AAAA;AAAA;;;;AApKJ;;;AAKS;;AAAA;AAAA;AA1GsD;;AAAA;;AAAA;AA0G5B;AAAA;AAAA;;AAAjC;AAC0C;AAAA;AAAA;AAG3B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAS;;AAAA;AAAW;AAA5B;AAAP;AACe;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAS;AAAjB;AAAP;AAGmB;;AAAA;;AAtGd;AAAA;;AAAA;AAAA;AAsGE;AAAP;AACmB;;AAAA;;AAAwB;;AAAA;;;AAAgB;;AAAhB;;AAAgB;AAAA;AAAA;;AAApD;;AAAA;;AAAA;AAAP;AACmB;;AAAA;;AAAyB;;AAArC;AAAP;AACmB;;AAAA;;AAAe;;AAA3B;AAAP;AAGyE;;AAAA;;;AAAgB;;AAAhB;;AAAgB;AAAzD;;AAAA;AAA0E;;AAAA;;;AAAiB;;AAAjB;;AAAiB;AAA3F;;AAAA;;AAAA;AAAsG;;;;;AAAvG;AACzB;;AAA0B;AAGD;;AAAmB;;AAAkC;;;;AAAlC;AAA1B;AAGxB;AAnHK;AAAA;;AAAA;AAAA;AAsH+B;;AAAT;;;;;;;;;;;;;AAH3B;;;AAKS;;;AALT;AAa+B;;AACF;;AAAA;;;AAGV;;AAAA;AACR;;AAAA;AAC2B;;AAAxB;AATK;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAUP;AAVO;AAAA;;AAAA;AAAA;AAxIwC;;AAAA;;AAAA;AAuJ3D;AAAA;AAGkD;;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;;;AAAhB;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAlC;AAxJsF;;AA8J5C;;AA9J4C;AAAA;AA8QzD;AAAA;;AAA7B;;;AACyC;AAAA;AAAA;AACvC;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AACA;;AAAA;;AAAA;AA3QG;AAAA;AAAA;AAAA;AA2JuD;AAA9B;AA3JzB;AA2JL;AAAA;AA1JK;AAAA;;AAAA;AAAA;AA2JwB;;AAAA;AA3JxB;;AA2JL;AAAA;AAEO;AAAP;;AAAA;AAgHE;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AACA;AAAA;AAAA;;AAAA;AAAA;;;;AA3GJ;;;AAKS;;AAAA;AAjLoD;;AAAA;AAAA;AAiL3B;AAAA;AAAA;;AAAhC;AACsC;AAAA;AAAA;AAG1B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAS;AAAd;AAAP;AACY;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAa;AAAlB;AAAA;AAAP;AACY;;AAAA;;;AAAL;AAA4B;;AAA5B;AAAP;AAGiB;;AAAA;;AA/KZ;AAAA;;AAAA;AAAA;AA+KE;AAAP;AACiB;;AAAA;;AAAqB;;AAAA;;;AAAgB;;AAAhB;;AAAgB;AAA/C;;AAAA;;AAAA;AAAP;AACiB;;AAAA;;AAAyB;;AAAnC;AAAP;AACiB;;AAAA;;AAAe;;AAAzB;AAAP;AAGA;AArLK;AAAA;;AAAA;AAAA;AAwL0B;;AAAP;;;;;;;;;;;;;AAHxB;;;AAKS;;;AALT;AAUA;AAE0B;;AAAA;;;AAAkB;;AAAlB;;AAAkB;AAE3B;;;;;;;;;AAJjB;;;AAKS;;;AALT;AAUgD;;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;;;AAAf;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAErB;;;AAFqB;AAAA;;AAAA;;AAAA;AAAjC;AAKO;AAAP;AAMF;;;AAES;;AAAA;AAjOoD;;AAAA;AAAA;AAiO3B;AAAA;AAAA;;AAAhC;AACsC;AAAA;AAAA;AAG1B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAS;;AAAA;AAAd;AAAP;AACY;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAa;AAAlB;AAAP;AACY;;AAAA;;;AAAL;AAA0B;;AAA1B;AAAP;AACc;;AAAuB;;AAAA;;;AAAQ;;AAAR;;AAAQ;AAAtC;;AAAA;AAAP;AAGA;AAE0B;;AAAA;;;AAAkB;;AAAlB;;AAAkB;AAE3B;;;;;;;;;AAJjB;;;AAKS;;;AALT;AAUgD;;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;;;AAAf;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAjC;AAKO;AAAP;AAoCF;;;AAES;;AAAA;AAjSsD;;AAAA;AAAA;AAiS5B;AAAA;AAAA;;AAAjC;AACiC;AAAA;AAAjC;AAMF;;;AAES;;AAAA;AAzSoD;;AAAA;AAAA;AAyS3B;AAAA;AAAA;;AAAhC;AACgC;AAAA;AAAhC;AAMF;;;AA/S0F;;AAAA;;AAAA;AAAA;AAiTvD;AAAA;;AAAjC;;;AACsC;;AAAA;AAAA;AAApC;AAAA;AAEK;;AAAP;AAAA;AAMF;;;AAzTwF;;AAAA;;AAAA;AAAA;AA2TzD;AAAA;;AAA7B;;;AACkC;;AAAA;AAAA;AAAhC;AAAA;AAEK;;AAAP;AAAA;AAMF;;;AAnWQ;;AAAiB;;;AACf;;AAAA;AAA4B;;;AAA7B;AAqWD;;AAAuB;;;AACvB;;AAAmB;;;AAGvB;;AAAA;AACA;;AAAA;AACA;;AAAA;AAHF;AApUK;AAAA;AAAA;AAAA;AAiVH;AAhVG;AAAA;;AAAA;AAAA;AAiVH;AAnVG;AAAA;AAAA;AAAA;AAoVsC;AAAxB;AAAjB;AAHF",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 4 500 961 705"
    },
    "12": {
      "op": "bytecblock 0x151f7c75 0x00 \"nextLoanId\" \"totalLoansIssued\" \"totalVolumeUSDC\" \"usdcAssetId\" \"loans\" \"requests\" \"defaultLiquidationRatio\" \"borrower\" \"lender\" 0x0000"
    },
    "135": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "137": {
      "op": "bz main_bare_routing@16",
      "stack_out": []
    },
    "140": {
      "op": "pushbytess 0xb5e4f78c 0x02642eaf 0xeae7d7a6 0x46b13230 0x79dc832f 0xfdf534f5 0xb39eb105 0xd0f37475 0x62cf89bc 0xa97c0c38 0x8a0a5fa9 // method \"initialize(uint64,uint64)bool\", method \"requestLoan(uint64,uint64,uint64,uint64,axfer)uint64\", method \"fundLoan(uint64,axfer)bool\", method \"repayLoan(uint64,axfer)bool\", method \"liquidateLoan(uint64)bool\", method \"getLoanRequest(uint64)(uint64,address,uint64,uint64,uint64,uint64,uint64,uint64,bool,bool)\", method \"getActiveLoan(uint64)(uint64,address,address,uint64,uint64,uint64,uint64,uint64,uint64,bool,bool)\", method \"getBorrowerLoans(address)uint64[]\", method \"getLenderLoans(address)uint64[]\", method \"getRiskBasedLoanTerms(uint64,uint64)(uint64,uint64,uint64)\", method \"getLendingStats()(uint64,uint64,uint64)\"",
      "defined_out": [
        "Method(fundLoan(uint64,axfer)bool)",
        "Method(getActiveLoan(uint64)(uint64,address,address,uint64,uint64,uint64,uint64,uint64,uint64,bool,bool))",
        "Method(getBorrowerLoans(address)uint64[])",
        "Method(getLenderLoans(address)uint64[])",
        "Method(getLendingStats()(uint64,uint64,uint64))",
        "Method(getLoanRequest(uint64)(uint64,address,uint64,uint64,uint64,uint64,uint64,uint64,bool,bool))",
        "Method(getRiskBasedLoanTerms(uint64,uint64)(uint64,uint64,uint64))",
        "Method(initialize(uint64,uint64)bool)",
        "Method(liquidateLoan(uint64)bool)",
        "Method(repayLoan(uint64,axfer)bool)",
        "Method(requestLoan(uint64,uint64,uint64,uint64,axfer)uint64)"
      ],
      "stack_out": [
        "Method(initialize(uint64,uint64)bool)",
        "Method(requestLoan(uint64,uint64,uint64,uint64,axfer)uint64)",
        "Method(fundLoan(uint64,axfer)bool)",
        "Method(repayLoan(uint64,axfer)bool)",
        "Method(liquidateLoan(uint64)bool)",
        "Method(getLoanRequest(uint64)(uint64,address,uint64,uint64,uint64,uint64,uint64,uint64,bool,bool))",
        "Method(getActiveLoan(uint64)(uint64,address,address,uint64,uint64,uint64,uint64,uint64,uint64,bool,bool))",
        "Method(getBorrowerLoans(address)uint64[])",
        "Method(getLenderLoans(address)uint64[])",
        "Method(getRiskBasedLoanTerms(uint64,uint64)(uint64,uint64,uint64))",
        "Method(getLendingStats()(uint64,uint64,uint64))"
      ]
    },
    "197": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(fundLoan(uint64,axfer)bool)",
        "Method(getActiveLoan(uint64)(uint64,address,address,uint64,uint64,uint64,uint64,uint64,uint64,bool,bool))",
        "Method(getBorrowerLoans(address)uint64[])",
        "Method(getLenderLoans(address)uint64[])",
        "Method(getLendingStats()(uint64,uint64,uint64))",
        "Method(getLoanRequest(uint64)(uint64,address,uint64,uint64,uint64,uint64,uint64,uint64,bool,bool))",
        "Method(getRiskBasedLoanTerms(uint64,uint64)(uint64,uint64,uint64))",
        "Method(initialize(uint64,uint64)bool)",
        "Method(liquidateLoan(uint64)bool)",
        "Method(repayLoan(uint64,axfer)bool)",
        "Method(requestLoan(uint64,uint64,uint64,uint64,axfer)uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(initialize(uint64,uint64)bool)",
        "Method(requestLoan(uint64,uint64,uint64,uint64,axfer)uint64)",
        "Method(fundLoan(uint64,axfer)bool)",
        "Method(repayLoan(uint64,axfer)bool)",
        "Method(liquidateLoan(uint64)bool)",
        "Method(getLoanRequest(uint64)(uint64,address,uint64,uint64,uint64,uint64,uint64,uint64,bool,bool))",
        "Method(getActiveLoan(uint64)(uint64,address,address,uint64,uint64,uint64,uint64,uint64,uint64,bool,bool))",
        "Method(getBorrowerLoans(address)uint64[])",
        "Method(getLenderLoans(address)uint64[])",
        "Method(getRiskBasedLoanTerms(uint64,uint64)(uint64,uint64,uint64))",
        "Method(getLendingStats()(uint64,uint64,uint64))",
        "tmp%2#0"
      ]
    },
    "200": {
      "op": "match main_initialize_route@3 main_requestLoan_route@4 main_fundLoan_route@5 main_repayLoan_route@6 main_liquidateLoan_route@7 main_getLoanRequest_route@8 main_getActiveLoan_route@9 main_getBorrowerLoans_route@10 main_getLenderLoans_route@11 main_getRiskBasedLoanTerms_route@12 main_getLendingStats_route@13",
      "stack_out": []
    },
    "224": {
      "block": "main_after_if_else@20",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "225": {
      "op": "return",
      "stack_out": []
    },
    "226": {
      "block": "main_getLendingStats_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "228": {
      "op": "!",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "229": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "230": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "232": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "233": {
      "callsub": "smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts::SimpleCollateralLending.getLendingStats",
      "op": "callsub getLendingStats",
      "defined_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0"
      ]
    },
    "236": {
      "op": "cover 2",
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0"
      ]
    },
    "238": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "239": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "elements_to_encode%5#0"
      ]
    },
    "240": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0"
      ]
    },
    "241": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0",
        "0x151f7c75"
      ]
    },
    "242": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "243": {
      "op": "concat",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "244": {
      "op": "log",
      "stack_out": []
    },
    "245": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "246": {
      "op": "return",
      "stack_out": []
    },
    "247": {
      "block": "main_getRiskBasedLoanTerms_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "249": {
      "op": "!",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "250": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "251": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "253": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "254": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%11#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%11#0"
      ]
    },
    "257": {
      "op": "btoi",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "258": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%12#0",
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0",
        "reinterpret_bytes[8]%12#0"
      ]
    },
    "261": {
      "op": "btoi",
      "defined_out": [
        "tmp%70#0",
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%70#0",
        "tmp%71#0"
      ]
    },
    "262": {
      "callsub": "smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts::SimpleCollateralLending.getRiskBasedLoanTerms",
      "op": "callsub getRiskBasedLoanTerms",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0"
      ]
    },
    "265": {
      "op": "cover 2",
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%0#0",
        "elements_to_encode%1#0"
      ]
    },
    "267": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%2#0",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "268": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "elements_to_encode%2#0"
      ]
    },
    "269": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0"
      ]
    },
    "270": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "0x151f7c75"
      ]
    },
    "271": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "272": {
      "op": "concat",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "273": {
      "op": "log",
      "stack_out": []
    },
    "274": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "275": {
      "op": "return",
      "stack_out": []
    },
    "276": {
      "block": "main_getLenderLoans_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "278": {
      "op": "!",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "279": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "280": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "282": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "283": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%1#0"
      ]
    },
    "286": {
      "callsub": "smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts::SimpleCollateralLending.getLenderLoans",
      "op": "callsub getLenderLoans",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "289": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0",
        "0x151f7c75"
      ]
    },
    "290": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%64#0"
      ]
    },
    "291": {
      "op": "concat",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "292": {
      "op": "log",
      "stack_out": []
    },
    "293": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "294": {
      "op": "return",
      "stack_out": []
    },
    "295": {
      "block": "main_getBorrowerLoans_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "297": {
      "op": "!",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "298": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "299": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "301": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "302": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "305": {
      "callsub": "smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts::SimpleCollateralLending.getBorrowerLoans",
      "op": "callsub getBorrowerLoans",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "308": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0",
        "0x151f7c75"
      ]
    },
    "309": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%58#0"
      ]
    },
    "310": {
      "op": "concat",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "311": {
      "op": "log",
      "stack_out": []
    },
    "312": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "313": {
      "op": "return",
      "stack_out": []
    },
    "314": {
      "block": "main_getActiveLoan_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "316": {
      "op": "!",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "317": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "318": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "320": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "321": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%10#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%10#0"
      ]
    },
    "324": {
      "op": "btoi",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "325": {
      "callsub": "smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts::SimpleCollateralLending.getActiveLoan",
      "op": "callsub getActiveLoan",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "328": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0",
        "0x151f7c75"
      ]
    },
    "329": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%52#0"
      ]
    },
    "330": {
      "op": "concat",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "331": {
      "op": "log",
      "stack_out": []
    },
    "332": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "333": {
      "op": "return",
      "stack_out": []
    },
    "334": {
      "block": "main_getLoanRequest_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "336": {
      "op": "!",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "337": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "338": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "340": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "341": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%9#0"
      ]
    },
    "344": {
      "op": "btoi",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "345": {
      "callsub": "smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts::SimpleCollateralLending.getLoanRequest",
      "op": "callsub getLoanRequest",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "348": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0",
        "0x151f7c75"
      ]
    },
    "349": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%45#0"
      ]
    },
    "350": {
      "op": "concat",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "351": {
      "op": "log",
      "stack_out": []
    },
    "352": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "353": {
      "op": "return",
      "stack_out": []
    },
    "354": {
      "block": "main_liquidateLoan_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "356": {
      "op": "!",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "357": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "358": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "360": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "361": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%8#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%8#0"
      ]
    },
    "364": {
      "op": "btoi",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "365": {
      "callsub": "smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts::SimpleCollateralLending.liquidateLoan",
      "op": "callsub liquidateLoan",
      "defined_out": [
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0"
      ]
    },
    "368": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "0x00"
      ]
    },
    "369": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "0x00",
        "0"
      ]
    },
    "370": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%4#0"
      ]
    },
    "372": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%3#0"
      ],
      "stack_out": [
        "encoded_bool%3#0"
      ]
    },
    "373": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%3#0"
      ],
      "stack_out": [
        "encoded_bool%3#0",
        "0x151f7c75"
      ]
    },
    "374": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%3#0"
      ]
    },
    "375": {
      "op": "concat",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "376": {
      "op": "log",
      "stack_out": []
    },
    "377": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "378": {
      "op": "return",
      "stack_out": []
    },
    "379": {
      "block": "main_repayLoan_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "381": {
      "op": "!",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "382": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "383": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "385": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "386": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%7#0"
      ]
    },
    "389": {
      "op": "btoi",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "390": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%31#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "tmp%32#0"
      ]
    },
    "392": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%31#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "tmp%32#0",
        "1"
      ]
    },
    "393": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%2#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "gtxn_idx%2#0"
      ]
    },
    "394": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)"
      ]
    },
    "395": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0"
      ]
    },
    "397": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "axfer"
      ]
    },
    "398": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0"
      ]
    },
    "399": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "tmp%31#0",
        "gtxn_idx%2#0"
      ]
    },
    "400": {
      "callsub": "smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts::SimpleCollateralLending.repayLoan",
      "op": "callsub repayLoan",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "403": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0",
        "0x00"
      ]
    },
    "404": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0",
        "0x00",
        "0"
      ]
    },
    "405": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%3#0"
      ]
    },
    "407": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%2#0"
      ],
      "stack_out": [
        "encoded_bool%2#0"
      ]
    },
    "408": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%2#0"
      ],
      "stack_out": [
        "encoded_bool%2#0",
        "0x151f7c75"
      ]
    },
    "409": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%2#0"
      ]
    },
    "410": {
      "op": "concat",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "411": {
      "op": "log",
      "stack_out": []
    },
    "412": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "413": {
      "op": "return",
      "stack_out": []
    },
    "414": {
      "block": "main_fundLoan_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "416": {
      "op": "!",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "417": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "418": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "420": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "421": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%6#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%6#0"
      ]
    },
    "424": {
      "op": "btoi",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "425": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%24#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "tmp%25#0"
      ]
    },
    "427": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%24#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "tmp%25#0",
        "1"
      ]
    },
    "428": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "gtxn_idx%1#0"
      ]
    },
    "429": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "430": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "432": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "axfer"
      ]
    },
    "433": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "434": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "tmp%24#0",
        "gtxn_idx%1#0"
      ]
    },
    "435": {
      "callsub": "smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts::SimpleCollateralLending.fundLoan",
      "op": "callsub fundLoan",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "438": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "0x00"
      ]
    },
    "439": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "0x00",
        "0"
      ]
    },
    "440": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%2#0"
      ]
    },
    "442": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%1#0"
      ],
      "stack_out": [
        "encoded_bool%1#0"
      ]
    },
    "443": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%1#0"
      ],
      "stack_out": [
        "encoded_bool%1#0",
        "0x151f7c75"
      ]
    },
    "444": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%1#0"
      ]
    },
    "445": {
      "op": "concat",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "446": {
      "op": "log",
      "stack_out": []
    },
    "447": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "448": {
      "op": "return",
      "stack_out": []
    },
    "449": {
      "block": "main_requestLoan_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "451": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "452": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "453": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "455": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "456": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "459": {
      "op": "btoi",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "460": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%3#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "463": {
      "op": "btoi",
      "defined_out": [
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "464": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%4#0",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%15#0",
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "467": {
      "op": "btoi",
      "defined_out": [
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "468": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%5#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0",
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "471": {
      "op": "btoi",
      "defined_out": [
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "472": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "474": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "1"
      ]
    },
    "475": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "gtxn_idx%0#0"
      ]
    },
    "476": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "477": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "479": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "axfer"
      ]
    },
    "480": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "481": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "gtxn_idx%0#0"
      ]
    },
    "482": {
      "callsub": "smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts::SimpleCollateralLending.requestLoan",
      "op": "callsub requestLoan",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "485": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "486": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "487": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "488": {
      "op": "concat",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "489": {
      "op": "log",
      "stack_out": []
    },
    "490": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "491": {
      "op": "return",
      "stack_out": []
    },
    "492": {
      "block": "main_initialize_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "494": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "495": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "496": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "498": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "499": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "502": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "503": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "506": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "507": {
      "callsub": "smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts::SimpleCollateralLending.initialize",
      "op": "callsub initialize",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "510": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "0x00"
      ]
    },
    "511": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "0x00",
        "0"
      ]
    },
    "512": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%0#0"
      ]
    },
    "514": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "515": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "516": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ]
    },
    "517": {
      "op": "concat",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "518": {
      "op": "log",
      "stack_out": []
    },
    "519": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "520": {
      "op": "return",
      "stack_out": []
    },
    "521": {
      "block": "main_bare_routing@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "523": {
      "op": "bnz main_after_if_else@20",
      "stack_out": []
    },
    "526": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "528": {
      "op": "!",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "529": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "530": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "531": {
      "op": "return",
      "stack_out": []
    },
    "532": {
      "subroutine": "smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts::SimpleCollateralLending.calculateLTVFromRisk",
      "params": {
        "riskScore#0": "uint64"
      },
      "block": "calculateLTVFromRisk",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "535": {
      "op": "frame_dig -1",
      "defined_out": [
        "riskScore#0 (copy)"
      ],
      "stack_out": [
        "riskScore#0 (copy)"
      ]
    },
    "537": {
      "op": "pushint 300 // 300",
      "defined_out": [
        "300",
        "riskScore#0 (copy)"
      ],
      "stack_out": [
        "riskScore#0 (copy)",
        "300"
      ]
    },
    "540": {
      "op": "<=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "541": {
      "op": "bz calculateLTVFromRisk_else_body@2",
      "stack_out": []
    },
    "544": {
      "op": "pushint 8000 // 8000",
      "defined_out": [
        "8000"
      ],
      "stack_out": [
        "8000"
      ]
    },
    "547": {
      "retsub": true,
      "op": "retsub"
    },
    "548": {
      "block": "calculateLTVFromRisk_else_body@2",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "riskScore#0 (copy)"
      ],
      "stack_out": [
        "riskScore#0 (copy)"
      ]
    },
    "550": {
      "op": "intc_3 // 500",
      "defined_out": [
        "500",
        "riskScore#0 (copy)"
      ],
      "stack_out": [
        "riskScore#0 (copy)",
        "500"
      ]
    },
    "551": {
      "op": "<=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "552": {
      "op": "bz calculateLTVFromRisk_else_body@4",
      "stack_out": []
    },
    "555": {
      "op": "pushint 7000 // 7000",
      "defined_out": [
        "7000"
      ],
      "stack_out": [
        "7000"
      ]
    },
    "558": {
      "retsub": true,
      "op": "retsub"
    },
    "559": {
      "block": "calculateLTVFromRisk_else_body@4",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "riskScore#0 (copy)"
      ],
      "stack_out": [
        "riskScore#0 (copy)"
      ]
    },
    "561": {
      "op": "pushint 700 // 700",
      "defined_out": [
        "700",
        "riskScore#0 (copy)"
      ],
      "stack_out": [
        "riskScore#0 (copy)",
        "700"
      ]
    },
    "564": {
      "op": "<=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "565": {
      "op": "bz calculateLTVFromRisk_else_body@6",
      "stack_out": []
    },
    "568": {
      "op": "pushint 6000 // 6000",
      "defined_out": [
        "6000"
      ],
      "stack_out": [
        "6000"
      ]
    },
    "571": {
      "retsub": true,
      "op": "retsub"
    },
    "572": {
      "block": "calculateLTVFromRisk_else_body@6",
      "stack_in": [],
      "op": "pushint 4000 // 4000",
      "defined_out": [
        "4000"
      ],
      "stack_out": [
        "4000"
      ]
    },
    "575": {
      "retsub": true,
      "op": "retsub"
    },
    "576": {
      "subroutine": "smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts::SimpleCollateralLending.getRiskBasedInterestRate",
      "params": {
        "riskScore#0": "uint64"
      },
      "block": "getRiskBasedInterestRate",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "579": {
      "op": "frame_dig -1",
      "defined_out": [
        "riskScore#0 (copy)"
      ],
      "stack_out": [
        "riskScore#0 (copy)"
      ]
    },
    "581": {
      "op": "pushint 300 // 300",
      "defined_out": [
        "300",
        "riskScore#0 (copy)"
      ],
      "stack_out": [
        "riskScore#0 (copy)",
        "300"
      ]
    },
    "584": {
      "op": "<=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "585": {
      "op": "bz getRiskBasedInterestRate_else_body@2",
      "stack_out": []
    },
    "588": {
      "op": "intc_3 // 500",
      "defined_out": [
        "500"
      ],
      "stack_out": [
        "500"
      ]
    },
    "589": {
      "retsub": true,
      "op": "retsub"
    },
    "590": {
      "block": "getRiskBasedInterestRate_else_body@2",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "riskScore#0 (copy)"
      ],
      "stack_out": [
        "riskScore#0 (copy)"
      ]
    },
    "592": {
      "op": "intc_3 // 500",
      "defined_out": [
        "500",
        "riskScore#0 (copy)"
      ],
      "stack_out": [
        "riskScore#0 (copy)",
        "500"
      ]
    },
    "593": {
      "op": "<=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "594": {
      "op": "bz getRiskBasedInterestRate_else_body@4",
      "stack_out": []
    },
    "597": {
      "op": "pushint 800 // 800",
      "defined_out": [
        "800"
      ],
      "stack_out": [
        "800"
      ]
    },
    "600": {
      "retsub": true,
      "op": "retsub"
    },
    "601": {
      "block": "getRiskBasedInterestRate_else_body@4",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "riskScore#0 (copy)"
      ],
      "stack_out": [
        "riskScore#0 (copy)"
      ]
    },
    "603": {
      "op": "pushint 700 // 700",
      "defined_out": [
        "700",
        "riskScore#0 (copy)"
      ],
      "stack_out": [
        "riskScore#0 (copy)",
        "700"
      ]
    },
    "606": {
      "op": "<=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "607": {
      "op": "bz getRiskBasedInterestRate_else_body@6",
      "stack_out": []
    },
    "610": {
      "op": "pushint 1200 // 1200",
      "defined_out": [
        "1200"
      ],
      "stack_out": [
        "1200"
      ]
    },
    "613": {
      "retsub": true,
      "op": "retsub"
    },
    "614": {
      "block": "getRiskBasedInterestRate_else_body@6",
      "stack_in": [],
      "op": "pushint 1800 // 1800",
      "defined_out": [
        "1800"
      ],
      "stack_out": [
        "1800"
      ]
    },
    "617": {
      "retsub": true,
      "op": "retsub"
    },
    "618": {
      "subroutine": "smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts::SimpleCollateralLending.initialize",
      "params": {
        "usdcAssetId#0": "uint64",
        "registryContractId#0": "uint64"
      },
      "block": "initialize",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "621": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "623": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "625": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "626": {
      "error": "Only creator can initialize",
      "op": "assert // Only creator can initialize",
      "stack_out": []
    },
    "627": {
      "op": "bytec_2 // \"nextLoanId\"",
      "defined_out": [
        "\"nextLoanId\""
      ],
      "stack_out": [
        "\"nextLoanId\""
      ]
    },
    "628": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"nextLoanId\"",
        "1"
      ],
      "stack_out": [
        "\"nextLoanId\"",
        "1"
      ]
    },
    "629": {
      "op": "app_global_put",
      "stack_out": []
    },
    "630": {
      "op": "bytec_3 // \"totalLoansIssued\"",
      "defined_out": [
        "\"totalLoansIssued\""
      ],
      "stack_out": [
        "\"totalLoansIssued\""
      ]
    },
    "631": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"totalLoansIssued\"",
        "0"
      ],
      "stack_out": [
        "\"totalLoansIssued\"",
        "0"
      ]
    },
    "632": {
      "op": "app_global_put",
      "stack_out": []
    },
    "633": {
      "op": "bytec 4 // \"totalVolumeUSDC\"",
      "defined_out": [
        "\"totalVolumeUSDC\""
      ],
      "stack_out": [
        "\"totalVolumeUSDC\""
      ]
    },
    "635": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"totalVolumeUSDC\"",
        "0"
      ]
    },
    "636": {
      "op": "app_global_put",
      "stack_out": []
    },
    "637": {
      "op": "bytec 8 // \"defaultLiquidationRatio\"",
      "defined_out": [
        "\"defaultLiquidationRatio\""
      ],
      "stack_out": [
        "\"defaultLiquidationRatio\""
      ]
    },
    "639": {
      "op": "pushint 15000 // 15000",
      "defined_out": [
        "\"defaultLiquidationRatio\"",
        "15000"
      ],
      "stack_out": [
        "\"defaultLiquidationRatio\"",
        "15000"
      ]
    },
    "642": {
      "op": "app_global_put",
      "stack_out": []
    },
    "643": {
      "op": "bytec 5 // \"usdcAssetId\"",
      "defined_out": [
        "\"usdcAssetId\""
      ],
      "stack_out": [
        "\"usdcAssetId\""
      ]
    },
    "645": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"usdcAssetId\"",
        "usdcAssetId#0 (copy)"
      ],
      "stack_out": [
        "\"usdcAssetId\"",
        "usdcAssetId#0 (copy)"
      ]
    },
    "647": {
      "op": "app_global_put",
      "stack_out": []
    },
    "648": {
      "op": "pushbytes \"registryContractId\"",
      "defined_out": [
        "\"registryContractId\""
      ],
      "stack_out": [
        "\"registryContractId\""
      ]
    },
    "668": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"registryContractId\"",
        "registryContractId#0 (copy)"
      ],
      "stack_out": [
        "\"registryContractId\"",
        "registryContractId#0 (copy)"
      ]
    },
    "670": {
      "op": "app_global_put",
      "stack_out": []
    },
    "671": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "672": {
      "retsub": true,
      "op": "retsub"
    },
    "673": {
      "subroutine": "smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts::SimpleCollateralLending.requestLoan",
      "params": {
        "collateralAssetId#0": "uint64",
        "collateralValue#0": "uint64",
        "requestedAmount#0": "uint64",
        "loanDurationDays#0": "uint64",
        "collateralTransfer#0": "uint64"
      },
      "block": "requestLoan",
      "stack_in": [],
      "op": "proto 5 1"
    },
    "676": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "677": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "tmp%0#1",
        "loanId#0"
      ]
    },
    "679": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "0"
      ]
    },
    "680": {
      "op": "bytec_2 // \"nextLoanId\"",
      "defined_out": [
        "\"nextLoanId\"",
        "0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "0",
        "\"nextLoanId\""
      ]
    },
    "681": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "682": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "maybe_value%0#0"
      ]
    },
    "683": {
      "op": "bnz requestLoan_after_if_else@2",
      "stack_out": [
        "tmp%0#1",
        "loanId#0"
      ]
    },
    "686": {
      "op": "bytec_2 // \"nextLoanId\"",
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "\"nextLoanId\""
      ]
    },
    "687": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"nextLoanId\"",
        "1"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "\"nextLoanId\"",
        "1"
      ]
    },
    "688": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#1",
        "loanId#0"
      ]
    },
    "689": {
      "op": "bytec_3 // \"totalLoansIssued\"",
      "defined_out": [
        "\"totalLoansIssued\""
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "\"totalLoansIssued\""
      ]
    },
    "690": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "\"totalLoansIssued\"",
        "0"
      ]
    },
    "691": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#1",
        "loanId#0"
      ]
    },
    "692": {
      "op": "bytec 4 // \"totalVolumeUSDC\"",
      "defined_out": [
        "\"totalVolumeUSDC\""
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "\"totalVolumeUSDC\""
      ]
    },
    "694": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "\"totalVolumeUSDC\"",
        "0"
      ]
    },
    "695": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#1",
        "loanId#0"
      ]
    },
    "696": {
      "op": "bytec 8 // \"defaultLiquidationRatio\"",
      "defined_out": [
        "\"defaultLiquidationRatio\""
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "\"defaultLiquidationRatio\""
      ]
    },
    "698": {
      "op": "pushint 15000 // 15000",
      "defined_out": [
        "\"defaultLiquidationRatio\"",
        "15000"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "\"defaultLiquidationRatio\"",
        "15000"
      ]
    },
    "701": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#1",
        "loanId#0"
      ]
    },
    "702": {
      "block": "requestLoan_after_if_else@2",
      "stack_in": [
        "tmp%0#1",
        "loanId#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "collateralTransfer#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "collateralTransfer#0 (copy)"
      ]
    },
    "704": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "tmp%1#0"
      ]
    },
    "706": {
      "op": "frame_dig -5",
      "defined_out": [
        "collateralAssetId#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "tmp%1#0",
        "collateralAssetId#0 (copy)"
      ]
    },
    "708": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "tmp%2#0"
      ]
    },
    "709": {
      "error": "Collateral asset mismatch",
      "op": "assert // Collateral asset mismatch",
      "stack_out": [
        "tmp%0#1",
        "loanId#0"
      ]
    },
    "710": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "collateralTransfer#0 (copy)"
      ]
    },
    "712": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "tmp%3#0"
      ]
    },
    "714": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "716": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "tmp%5#0"
      ]
    },
    "717": {
      "error": "Must transfer collateral to contract",
      "op": "assert // Must transfer collateral to contract",
      "stack_out": [
        "tmp%0#1",
        "loanId#0"
      ]
    },
    "718": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "collateralTransfer#0 (copy)"
      ]
    },
    "720": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "tmp%6#0"
      ]
    },
    "722": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "724": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "tmp%8#0"
      ]
    },
    "725": {
      "error": "Collateral sender mismatch",
      "op": "assert // Collateral sender mismatch",
      "stack_out": [
        "tmp%0#1",
        "loanId#0"
      ]
    },
    "726": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "collateralTransfer#0 (copy)"
      ]
    },
    "728": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "tmp%9#0"
      ]
    },
    "730": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "tmp%9#0",
        "1"
      ]
    },
    "731": {
      "op": "==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "tmp%10#0"
      ]
    },
    "732": {
      "error": "Must transfer entire eBL",
      "op": "assert // Must transfer entire eBL",
      "stack_out": [
        "tmp%0#1",
        "loanId#0"
      ]
    },
    "733": {
      "op": "intc_3 // 500",
      "defined_out": [
        "500"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "500"
      ]
    },
    "734": {
      "callsub": "smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts::SimpleCollateralLending.calculateLTVFromRisk",
      "op": "callsub calculateLTVFromRisk",
      "defined_out": [
        "ltvBps#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "ltvBps#0"
      ]
    },
    "737": {
      "op": "frame_dig -4",
      "defined_out": [
        "collateralValue#0 (copy)",
        "ltvBps#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "ltvBps#0",
        "collateralValue#0 (copy)"
      ]
    },
    "739": {
      "op": "*",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "tmp%0#2"
      ]
    },
    "740": {
      "op": "pushint 10000 // 10000",
      "defined_out": [
        "10000",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "tmp%0#2",
        "10000"
      ]
    },
    "743": {
      "op": "/",
      "defined_out": [
        "maxLoanAmount#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "maxLoanAmount#0"
      ]
    },
    "744": {
      "op": "frame_dig -3",
      "defined_out": [
        "maxLoanAmount#0",
        "requestedAmount#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "maxLoanAmount#0",
        "requestedAmount#0 (copy)"
      ]
    },
    "746": {
      "error": "Requested amount must be positive",
      "op": "assert // Requested amount must be positive",
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "maxLoanAmount#0"
      ]
    },
    "747": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "maxLoanAmount#0",
        "requestedAmount#0 (copy)"
      ]
    },
    "749": {
      "op": ">=",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "tmp%12#0"
      ]
    },
    "750": {
      "error": "Requested amount exceeds risk-based LTV limit",
      "op": "assert // Requested amount exceeds risk-based LTV limit",
      "stack_out": [
        "tmp%0#1",
        "loanId#0"
      ]
    },
    "751": {
      "op": "frame_dig -2",
      "defined_out": [
        "loanDurationDays#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "loanDurationDays#0 (copy)"
      ]
    },
    "753": {
      "op": "pushint 365 // 365",
      "defined_out": [
        "365",
        "loanDurationDays#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "loanDurationDays#0 (copy)",
        "365"
      ]
    },
    "756": {
      "op": "<=",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "tmp%13#0"
      ]
    },
    "757": {
      "error": "Loan duration too long (max 1 year)",
      "op": "assert // Loan duration too long (max 1 year)",
      "stack_out": [
        "tmp%0#1",
        "loanId#0"
      ]
    },
    "758": {
      "op": "intc_3 // 500",
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "500"
      ]
    },
    "759": {
      "callsub": "smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts::SimpleCollateralLending.getRiskBasedInterestRate",
      "op": "callsub getRiskBasedInterestRate",
      "defined_out": [
        "riskBasedInterestRate#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "riskBasedInterestRate#0"
      ]
    },
    "762": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "riskBasedInterestRate#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "riskBasedInterestRate#0",
        "0"
      ]
    },
    "763": {
      "op": "bytec_2 // \"nextLoanId\"",
      "defined_out": [
        "\"nextLoanId\"",
        "0",
        "riskBasedInterestRate#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "riskBasedInterestRate#0",
        "0",
        "\"nextLoanId\""
      ]
    },
    "764": {
      "op": "app_global_get_ex",
      "defined_out": [
        "loanId#0",
        "maybe_exists%1#0",
        "riskBasedInterestRate#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "riskBasedInterestRate#0",
        "loanId#0",
        "maybe_exists%1#0"
      ]
    },
    "765": {
      "op": "swap",
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "riskBasedInterestRate#0",
        "maybe_exists%1#0",
        "loanId#0"
      ]
    },
    "766": {
      "op": "dup",
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "riskBasedInterestRate#0",
        "maybe_exists%1#0",
        "loanId#0",
        "loanId#0 (copy)"
      ]
    },
    "767": {
      "op": "cover 2",
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "riskBasedInterestRate#0",
        "loanId#0",
        "maybe_exists%1#0",
        "loanId#0"
      ]
    },
    "769": {
      "op": "frame_bury 1",
      "defined_out": [
        "loanId#0",
        "maybe_exists%1#0",
        "riskBasedInterestRate#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "riskBasedInterestRate#0",
        "loanId#0",
        "maybe_exists%1#0"
      ]
    },
    "771": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "riskBasedInterestRate#0",
        "loanId#0"
      ]
    },
    "772": {
      "op": "itob",
      "defined_out": [
        "loanId#0",
        "riskBasedInterestRate#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "riskBasedInterestRate#0",
        "val_as_bytes%0#0"
      ]
    },
    "773": {
      "op": "dup",
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "riskBasedInterestRate#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ]
    },
    "774": {
      "op": "uncover 2",
      "defined_out": [
        "loanId#0",
        "riskBasedInterestRate#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0",
        "riskBasedInterestRate#0"
      ]
    },
    "776": {
      "op": "txn Sender",
      "defined_out": [
        "loanId#0",
        "riskBasedInterestRate#0",
        "tmp%14#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0",
        "riskBasedInterestRate#0",
        "tmp%14#0"
      ]
    },
    "778": {
      "op": "frame_dig -5",
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0",
        "riskBasedInterestRate#0",
        "tmp%14#0",
        "collateralAssetId#0 (copy)"
      ]
    },
    "780": {
      "op": "itob",
      "defined_out": [
        "loanId#0",
        "riskBasedInterestRate#0",
        "tmp%14#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0",
        "riskBasedInterestRate#0",
        "tmp%14#0",
        "val_as_bytes%1#0"
      ]
    },
    "781": {
      "op": "frame_dig -4",
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0",
        "riskBasedInterestRate#0",
        "tmp%14#0",
        "val_as_bytes%1#0",
        "collateralValue#0 (copy)"
      ]
    },
    "783": {
      "op": "itob",
      "defined_out": [
        "loanId#0",
        "riskBasedInterestRate#0",
        "tmp%14#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0",
        "riskBasedInterestRate#0",
        "tmp%14#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "784": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0",
        "riskBasedInterestRate#0",
        "tmp%14#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "requestedAmount#0 (copy)"
      ]
    },
    "786": {
      "op": "itob",
      "defined_out": [
        "loanId#0",
        "riskBasedInterestRate#0",
        "tmp%14#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0",
        "riskBasedInterestRate#0",
        "tmp%14#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "787": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0",
        "tmp%14#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "riskBasedInterestRate#0"
      ]
    },
    "789": {
      "op": "itob",
      "defined_out": [
        "loanId#0",
        "tmp%14#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0",
        "tmp%14#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ]
    },
    "790": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0",
        "tmp%14#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "loanDurationDays#0 (copy)"
      ]
    },
    "792": {
      "op": "itob",
      "defined_out": [
        "loanId#0",
        "tmp%14#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0",
        "tmp%14#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ]
    },
    "793": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "loanId#0",
        "tmp%14#0",
        "to_encode%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0",
        "tmp%14#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "to_encode%0#0"
      ]
    },
    "795": {
      "op": "itob",
      "defined_out": [
        "loanId#0",
        "tmp%14#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0",
        "tmp%14#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ]
    },
    "796": {
      "op": "dig 7",
      "defined_out": [
        "loanId#0",
        "tmp%14#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0",
        "tmp%14#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%0#0 (copy)"
      ]
    },
    "798": {
      "op": "uncover 7",
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%0#0 (copy)",
        "tmp%14#0"
      ]
    },
    "800": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "loanId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "801": {
      "op": "uncover 6",
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%1#0"
      ]
    },
    "803": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "loanId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "804": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0"
      ]
    },
    "806": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "loanId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "807": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%3#0"
      ]
    },
    "809": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "loanId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "810": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%4#0"
      ]
    },
    "812": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "loanId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "813": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%6#0",
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%5#0"
      ]
    },
    "815": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "loanId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%6#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "816": {
      "op": "swap",
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%7#0",
        "val_as_bytes%6#0"
      ]
    },
    "817": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "loanId#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "818": {
      "op": "pushbytes 0x80",
      "defined_out": [
        "0x80",
        "encoded_tuple_buffer%8#0",
        "loanId#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%8#0",
        "0x80"
      ]
    },
    "821": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "loanId#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "822": {
      "op": "intc 5 // 705",
      "defined_out": [
        "705",
        "encoded_tuple_buffer%9#0",
        "loanId#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%9#0",
        "705"
      ]
    },
    "824": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%9#0",
        "705",
        "0"
      ]
    },
    "825": {
      "op": "setbit",
      "defined_out": [
        "loanId#0",
        "request#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0",
        "request#0"
      ]
    },
    "826": {
      "op": "bytec 7 // \"requests\"",
      "defined_out": [
        "\"requests\"",
        "loanId#0",
        "request#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0",
        "request#0",
        "\"requests\""
      ]
    },
    "828": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "val_as_bytes%0#0",
        "request#0",
        "\"requests\"",
        "val_as_bytes%0#0"
      ]
    },
    "830": {
      "op": "concat",
      "defined_out": [
        "loanId#0",
        "request#0",
        "tmp%16#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "val_as_bytes%0#0",
        "request#0",
        "tmp%16#0"
      ]
    },
    "831": {
      "op": "swap",
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "val_as_bytes%0#0",
        "tmp%16#0",
        "request#0"
      ]
    },
    "832": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "val_as_bytes%0#0"
      ]
    },
    "833": {
      "op": "bytec 9 // \"borrower\"",
      "defined_out": [
        "\"borrower\"",
        "loanId#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "val_as_bytes%0#0",
        "\"borrower\""
      ]
    },
    "835": {
      "op": "txn Sender",
      "defined_out": [
        "\"borrower\"",
        "borrower#0",
        "loanId#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "val_as_bytes%0#0",
        "\"borrower\"",
        "borrower#0"
      ]
    },
    "837": {
      "op": "concat",
      "defined_out": [
        "loanId#0",
        "tmp%0#1",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "val_as_bytes%0#0",
        "tmp%0#1"
      ]
    },
    "838": {
      "op": "dup",
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "val_as_bytes%0#0",
        "tmp%0#1",
        "tmp%0#1"
      ]
    },
    "839": {
      "op": "frame_bury 0",
      "defined_out": [
        "loanId#0",
        "tmp%0#1",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "val_as_bytes%0#0",
        "tmp%0#1"
      ]
    },
    "841": {
      "op": "box_len",
      "defined_out": [
        "loanId#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#1",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "842": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "val_as_bytes%0#0",
        "maybe_exists%0#0"
      ]
    },
    "844": {
      "op": "bz requestLoan_else_body@7",
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "val_as_bytes%0#0"
      ]
    },
    "847": {
      "op": "frame_dig 0",
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "val_as_bytes%0#0",
        "tmp%0#1"
      ]
    },
    "849": {
      "op": "dup",
      "defined_out": [
        "loanId#0",
        "tmp%0#1",
        "tmp%0#1 (copy)",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "val_as_bytes%0#0",
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ]
    },
    "850": {
      "op": "box_get",
      "defined_out": [
        "loanId#0",
        "loans#0",
        "maybe_exists%1#0",
        "tmp%0#1",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "val_as_bytes%0#0",
        "tmp%0#1",
        "loans#0",
        "maybe_exists%1#0"
      ]
    },
    "851": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "val_as_bytes%0#0",
        "tmp%0#1",
        "loans#0"
      ]
    },
    "852": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%0#0",
        "loanId#0",
        "tmp%0#1",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "val_as_bytes%0#0",
        "tmp%0#1",
        "expr_value_trimmed%0#0"
      ]
    },
    "855": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "tmp%0#1",
        "expr_value_trimmed%0#0",
        "val_as_bytes%0#0"
      ]
    },
    "857": {
      "op": "concat",
      "defined_out": [
        "concatenated%0#0",
        "loanId#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "tmp%0#1",
        "concatenated%0#0"
      ]
    },
    "858": {
      "op": "dup",
      "defined_out": [
        "concatenated%0#0",
        "concatenated%0#0 (copy)",
        "loanId#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "tmp%0#1",
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ]
    },
    "859": {
      "op": "len",
      "defined_out": [
        "byte_len%0#0",
        "concatenated%0#0",
        "loanId#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "tmp%0#1",
        "concatenated%0#0",
        "byte_len%0#0"
      ]
    },
    "860": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "byte_len%0#0",
        "concatenated%0#0",
        "loanId#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "tmp%0#1",
        "concatenated%0#0",
        "byte_len%0#0",
        "8"
      ]
    },
    "862": {
      "op": "/",
      "defined_out": [
        "concatenated%0#0",
        "len_%0#0",
        "loanId#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "tmp%0#1",
        "concatenated%0#0",
        "len_%0#0"
      ]
    },
    "863": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concatenated%0#0",
        "loanId#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "tmp%0#1",
        "concatenated%0#0",
        "as_bytes%0#0"
      ]
    },
    "864": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%0#0",
        "len_16_bit%0#0",
        "loanId#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "tmp%0#1",
        "concatenated%0#0",
        "len_16_bit%0#0"
      ]
    },
    "867": {
      "op": "swap",
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "tmp%0#1",
        "len_16_bit%0#0",
        "concatenated%0#0"
      ]
    },
    "868": {
      "op": "concat",
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "tmp%0#1",
        "loans#0"
      ]
    },
    "869": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "tmp%0#1",
        "loans#0",
        "tmp%0#1 (copy)"
      ]
    },
    "871": {
      "op": "box_del",
      "defined_out": [
        "loanId#0",
        "loans#0",
        "tmp%0#1",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "tmp%0#1",
        "loans#0",
        "{box_del}"
      ]
    },
    "872": {
      "op": "pop",
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "tmp%0#1",
        "loans#0"
      ]
    },
    "873": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#1",
        "loanId#0"
      ]
    },
    "874": {
      "block": "requestLoan_after_if_else@8",
      "stack_in": [
        "tmp%0#1",
        "loanId#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "loanId#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "loanId#0"
      ]
    },
    "876": {
      "op": "dup",
      "defined_out": [
        "loanId#0",
        "loanId#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "loanId#0",
        "loanId#0 (copy)"
      ]
    },
    "877": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "loanId#0",
        "loanId#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "loanId#0",
        "loanId#0 (copy)",
        "1"
      ]
    },
    "878": {
      "op": "+",
      "defined_out": [
        "loanId#0",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "loanId#0",
        "new_state_value%0#0"
      ]
    },
    "879": {
      "op": "bytec_2 // \"nextLoanId\"",
      "defined_out": [
        "\"nextLoanId\"",
        "loanId#0",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "loanId#0",
        "new_state_value%0#0",
        "\"nextLoanId\""
      ]
    },
    "880": {
      "op": "swap",
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "loanId#0",
        "\"nextLoanId\"",
        "new_state_value%0#0"
      ]
    },
    "881": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "loanId#0"
      ]
    },
    "882": {
      "op": "frame_bury 0"
    },
    "884": {
      "retsub": true,
      "op": "retsub"
    },
    "885": {
      "block": "requestLoan_else_body@7",
      "stack_in": [
        "tmp%0#1",
        "loanId#0",
        "val_as_bytes%0#0"
      ],
      "op": "pushbytes 0x0001",
      "defined_out": [
        "0x0001"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "val_as_bytes%0#0",
        "0x0001"
      ]
    },
    "889": {
      "op": "swap",
      "defined_out": [
        "0x0001",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "0x0001",
        "val_as_bytes%0#0"
      ]
    },
    "890": {
      "op": "concat",
      "defined_out": [
        "newArray#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "newArray#1"
      ]
    },
    "891": {
      "op": "frame_dig 0",
      "defined_out": [
        "newArray#1",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "newArray#1",
        "tmp%0#1"
      ]
    },
    "893": {
      "op": "dup",
      "defined_out": [
        "newArray#1",
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "newArray#1",
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ]
    },
    "894": {
      "op": "box_del",
      "defined_out": [
        "newArray#1",
        "tmp%0#1",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "newArray#1",
        "tmp%0#1",
        "{box_del}"
      ]
    },
    "895": {
      "op": "pop",
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "newArray#1",
        "tmp%0#1"
      ]
    },
    "896": {
      "op": "swap",
      "stack_out": [
        "tmp%0#1",
        "loanId#0",
        "tmp%0#1",
        "newArray#1"
      ]
    },
    "897": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#1",
        "loanId#0"
      ]
    },
    "898": {
      "op": "b requestLoan_after_if_else@8"
    },
    "901": {
      "subroutine": "smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts::SimpleCollateralLending.fundLoan",
      "params": {
        "loanId#0": "uint64",
        "usdcPayment#0": "uint64"
      },
      "block": "fundLoan",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "904": {
      "op": "frame_dig -2",
      "defined_out": [
        "loanId#0 (copy)"
      ],
      "stack_out": [
        "loanId#0 (copy)"
      ]
    },
    "906": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "907": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "908": {
      "op": "bytec 7 // \"requests\"",
      "defined_out": [
        "\"requests\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "\"requests\""
      ]
    },
    "910": {
      "op": "dig 1",
      "defined_out": [
        "\"requests\"",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "\"requests\"",
        "tmp%0#0 (copy)"
      ]
    },
    "912": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "913": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "914": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "915": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "maybe_exists%0#0"
      ]
    },
    "917": {
      "error": "Loan request not found",
      "op": "assert // Loan request not found",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "918": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "919": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "maybe_exists%1#0"
      ]
    },
    "920": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0"
      ]
    },
    "921": {
      "op": "dup",
      "defined_out": [
        "request#0",
        "request#0 (copy)",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "request#0 (copy)"
      ]
    },
    "922": {
      "op": "pushint 704 // 704",
      "defined_out": [
        "704",
        "request#0",
        "request#0 (copy)",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "request#0 (copy)",
        "704"
      ]
    },
    "925": {
      "op": "getbit",
      "defined_out": [
        "is_true%0#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "is_true%0#0"
      ]
    },
    "926": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "is_true%0#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "is_true%0#0",
        "0x00"
      ]
    },
    "927": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "is_true%0#0",
        "0x00",
        "0"
      ]
    },
    "928": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "0x00",
        "0",
        "is_true%0#0"
      ]
    },
    "930": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0"
      ]
    },
    "931": {
      "op": "dup",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%0#0 (copy)",
        "request#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "encoded_bool%0#0 (copy)"
      ]
    },
    "932": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "encoded_bool%0#0 (copy)",
        "0"
      ]
    },
    "933": {
      "op": "getbit",
      "defined_out": [
        "encoded_bool%0#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%4#0"
      ]
    },
    "934": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "encoded_bool%0#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%4#0",
        "1"
      ]
    },
    "935": {
      "op": "==",
      "defined_out": [
        "encoded_bool%0#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%5#0"
      ]
    },
    "936": {
      "error": "Request inactive",
      "op": "assert // Request inactive",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0"
      ]
    },
    "937": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "request#0 (copy)"
      ]
    },
    "939": {
      "op": "intc 5 // 705",
      "defined_out": [
        "705",
        "encoded_bool%0#0",
        "request#0",
        "request#0 (copy)",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "request#0 (copy)",
        "705"
      ]
    },
    "941": {
      "op": "getbit",
      "defined_out": [
        "encoded_bool%0#0",
        "is_true%1#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "is_true%1#0"
      ]
    },
    "942": {
      "op": "bytec_1 // 0x00",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "is_true%1#0",
        "0x00"
      ]
    },
    "943": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "is_true%1#0",
        "0x00",
        "0"
      ]
    },
    "944": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "0x00",
        "0",
        "is_true%1#0"
      ]
    },
    "946": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0"
      ]
    },
    "947": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "0"
      ]
    },
    "948": {
      "op": "getbit",
      "defined_out": [
        "encoded_bool%0#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%6#0"
      ]
    },
    "949": {
      "op": "!",
      "defined_out": [
        "encoded_bool%0#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%7#0"
      ]
    },
    "950": {
      "error": "Already funded",
      "op": "assert // Already funded",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0"
      ]
    },
    "951": {
      "op": "frame_dig -1",
      "defined_out": [
        "encoded_bool%0#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "usdcPayment#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "usdcPayment#0 (copy)"
      ]
    },
    "953": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "encoded_bool%0#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%8#0"
      ]
    },
    "955": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%8#0",
        "0"
      ]
    },
    "956": {
      "op": "bytec 5 // \"usdcAssetId\"",
      "defined_out": [
        "\"usdcAssetId\"",
        "0",
        "encoded_bool%0#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%8#0",
        "0",
        "\"usdcAssetId\""
      ]
    },
    "958": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%8#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "959": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%8#0",
        "maybe_value%2#0"
      ]
    },
    "960": {
      "op": "==",
      "defined_out": [
        "encoded_bool%0#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%9#0"
      ]
    },
    "961": {
      "error": "Must pay with USDC",
      "op": "assert // Must pay with USDC",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0"
      ]
    },
    "962": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "usdcPayment#0 (copy)"
      ]
    },
    "964": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "encoded_bool%0#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%10#0"
      ]
    },
    "966": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%10#0",
        "request#0 (copy)"
      ]
    },
    "968": {
      "error": "Index access is out of bounds",
      "op": "extract 56 8 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_bool%0#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "971": {
      "op": "dig 3",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%10#0",
        "tmp%11#0",
        "request#0 (copy)"
      ]
    },
    "973": {
      "op": "pushint 56 // 56",
      "defined_out": [
        "56",
        "encoded_bool%0#0",
        "request#0",
        "request#0 (copy)",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%10#0",
        "tmp%11#0",
        "request#0 (copy)",
        "56"
      ]
    },
    "975": {
      "op": "extract_uint64",
      "defined_out": [
        "encoded_bool%0#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "976": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%12#0"
      ]
    },
    "977": {
      "op": "cover 7",
      "defined_out": [
        "encoded_bool%0#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "979": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%10#0"
      ]
    },
    "981": {
      "op": "dig 1",
      "defined_out": [
        "encoded_bool%0#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%12#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%10#0",
        "tmp%12#0 (copy)"
      ]
    },
    "983": {
      "op": "==",
      "defined_out": [
        "encoded_bool%0#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "984": {
      "error": "Incorrect funding amount",
      "op": "assert // Incorrect funding amount",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "985": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%12#0",
        "usdcPayment#0 (copy)"
      ]
    },
    "987": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "encoded_bool%0#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%14#0"
      ]
    },
    "989": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "encoded_bool%0#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "991": {
      "op": "==",
      "defined_out": [
        "encoded_bool%0#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%16#0"
      ]
    },
    "992": {
      "error": "Payment to wrong address",
      "op": "assert // Payment to wrong address",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "993": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%12#0",
        "usdcPayment#0 (copy)"
      ]
    },
    "995": {
      "op": "gtxns Sender",
      "defined_out": [
        "encoded_bool%0#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%17#0"
      ]
    },
    "997": {
      "op": "txn Sender",
      "defined_out": [
        "encoded_bool%0#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "999": {
      "op": "==",
      "defined_out": [
        "encoded_bool%0#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%19#0"
      ]
    },
    "1000": {
      "error": "Payment sender mismatch",
      "op": "assert // Payment sender mismatch",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "1001": {
      "op": "dig 3",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%12#0",
        "request#0 (copy)"
      ]
    },
    "1003": {
      "error": "Index access is out of bounds",
      "op": "extract 64 8 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_bool%0#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0"
      ]
    },
    "1006": {
      "op": "dig 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "request#0 (copy)"
      ]
    },
    "1008": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "64",
        "encoded_bool%0#0",
        "request#0",
        "request#0 (copy)",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "request#0 (copy)",
        "64"
      ]
    },
    "1010": {
      "op": "extract_uint64",
      "defined_out": [
        "encoded_bool%0#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%23#0"
      ]
    },
    "1011": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%23#0",
        "tmp%12#0 (copy)"
      ]
    },
    "1013": {
      "op": "*",
      "defined_out": [
        "encoded_bool%0#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%24#0"
      ]
    },
    "1014": {
      "op": "dig 5",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%24#0",
        "request#0 (copy)"
      ]
    },
    "1016": {
      "error": "Index access is out of bounds",
      "op": "extract 72 8 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_bool%0#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%25#0"
      ]
    },
    "1019": {
      "op": "dig 6",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%25#0",
        "request#0 (copy)"
      ]
    },
    "1021": {
      "op": "pushint 72 // 72",
      "defined_out": [
        "72",
        "encoded_bool%0#0",
        "request#0",
        "request#0 (copy)",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%25#0",
        "request#0 (copy)",
        "72"
      ]
    },
    "1023": {
      "op": "extract_uint64",
      "defined_out": [
        "encoded_bool%0#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0"
      ]
    },
    "1024": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%24#0"
      ]
    },
    "1026": {
      "op": "dig 1",
      "defined_out": [
        "encoded_bool%0#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%26#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%24#0",
        "tmp%26#0 (copy)"
      ]
    },
    "1028": {
      "op": "*",
      "defined_out": [
        "encoded_bool%0#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%27#0"
      ]
    },
    "1029": {
      "op": "pushint 3650000 // 3650000",
      "defined_out": [
        "3650000",
        "encoded_bool%0#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%27#0",
        "3650000"
      ]
    },
    "1034": {
      "op": "/",
      "defined_out": [
        "encoded_bool%0#0",
        "interestAmount#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%26#0",
        "interestAmount#0"
      ]
    },
    "1035": {
      "op": "dig 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%26#0",
        "interestAmount#0",
        "tmp%12#0 (copy)"
      ]
    },
    "1037": {
      "op": "+",
      "defined_out": [
        "encoded_bool%0#0",
        "repaymentAmount#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%26#0",
        "repaymentAmount#0"
      ]
    },
    "1038": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "encoded_bool%0#0",
        "repaymentAmount#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%26#0",
        "repaymentAmount#0",
        "tmp%30#0"
      ]
    },
    "1040": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0",
        "repaymentAmount#0",
        "tmp%30#0",
        "tmp%26#0"
      ]
    },
    "1042": {
      "op": "pushint 86400 // 86400",
      "defined_out": [
        "86400",
        "encoded_bool%0#0",
        "repaymentAmount#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0",
        "repaymentAmount#0",
        "tmp%30#0",
        "tmp%26#0",
        "86400"
      ]
    },
    "1046": {
      "op": "*",
      "defined_out": [
        "encoded_bool%0#0",
        "repaymentAmount#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%30#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0",
        "repaymentAmount#0",
        "tmp%30#0",
        "tmp%33#0"
      ]
    },
    "1047": {
      "op": "+",
      "defined_out": [
        "dueDate#0",
        "encoded_bool%0#0",
        "repaymentAmount#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0",
        "repaymentAmount#0",
        "dueDate#0"
      ]
    },
    "1048": {
      "op": "itxn_begin"
    },
    "1049": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0",
        "repaymentAmount#0",
        "dueDate#0",
        "0"
      ]
    },
    "1050": {
      "op": "bytec 5 // \"usdcAssetId\"",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0",
        "repaymentAmount#0",
        "dueDate#0",
        "0",
        "\"usdcAssetId\""
      ]
    },
    "1052": {
      "op": "app_global_get_ex",
      "defined_out": [
        "dueDate#0",
        "encoded_bool%0#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "repaymentAmount#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0",
        "repaymentAmount#0",
        "dueDate#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1053": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0",
        "repaymentAmount#0",
        "dueDate#0",
        "maybe_value%3#0"
      ]
    },
    "1054": {
      "op": "dig 8",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0",
        "repaymentAmount#0",
        "dueDate#0",
        "maybe_value%3#0",
        "request#0 (copy)"
      ]
    },
    "1056": {
      "error": "Index access is out of bounds",
      "op": "extract 8 32 // on error: Index access is out of bounds",
      "defined_out": [
        "dueDate#0",
        "encoded_bool%0#0",
        "maybe_value%3#0",
        "reinterpret_bytes[32]%0#0",
        "repaymentAmount#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0",
        "repaymentAmount#0",
        "dueDate#0",
        "maybe_value%3#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "1059": {
      "op": "uncover 6",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "repaymentAmount#0",
        "dueDate#0",
        "maybe_value%3#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%12#0"
      ]
    },
    "1061": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "repaymentAmount#0",
        "dueDate#0",
        "maybe_value%3#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "1063": {
      "op": "dup",
      "defined_out": [
        "dueDate#0",
        "encoded_bool%0#0",
        "maybe_value%3#0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%0#0 (copy)",
        "repaymentAmount#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "repaymentAmount#0",
        "dueDate#0",
        "maybe_value%3#0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%0#0 (copy)"
      ]
    },
    "1064": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "repaymentAmount#0",
        "dueDate#0",
        "maybe_value%3#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "1066": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "repaymentAmount#0",
        "dueDate#0",
        "reinterpret_bytes[32]%0#0",
        "maybe_value%3#0"
      ]
    },
    "1067": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "repaymentAmount#0",
        "dueDate#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "1069": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "dueDate#0",
        "encoded_bool%0#0",
        "reinterpret_bytes[32]%0#0",
        "repaymentAmount#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "repaymentAmount#0",
        "dueDate#0",
        "reinterpret_bytes[32]%0#0",
        "4"
      ]
    },
    "1070": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "repaymentAmount#0",
        "dueDate#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "1072": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "repaymentAmount#0",
        "dueDate#0",
        "reinterpret_bytes[32]%0#0",
        "0"
      ]
    },
    "1073": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "repaymentAmount#0",
        "dueDate#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "1075": {
      "op": "itxn_submit"
    },
    "1076": {
      "op": "txn Sender",
      "defined_out": [
        "dueDate#0",
        "encoded_bool%0#0",
        "reinterpret_bytes[32]%0#0",
        "repaymentAmount#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "repaymentAmount#0",
        "dueDate#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%36#0"
      ]
    },
    "1078": {
      "op": "dig 8",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "repaymentAmount#0",
        "dueDate#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%36#0",
        "request#0 (copy)"
      ]
    },
    "1080": {
      "error": "Index access is out of bounds",
      "op": "extract 40 8 // on error: Index access is out of bounds",
      "defined_out": [
        "dueDate#0",
        "encoded_bool%0#0",
        "reinterpret_bytes[32]%0#0",
        "repaymentAmount#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%36#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "repaymentAmount#0",
        "dueDate#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%36#0",
        "tmp%37#0"
      ]
    },
    "1083": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "dueDate#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%36#0",
        "tmp%37#0",
        "repaymentAmount#0"
      ]
    },
    "1085": {
      "op": "itob",
      "defined_out": [
        "dueDate#0",
        "encoded_bool%0#0",
        "reinterpret_bytes[32]%0#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%36#0",
        "tmp%37#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "dueDate#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%36#0",
        "tmp%37#0",
        "val_as_bytes%1#0"
      ]
    },
    "1086": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%36#0",
        "tmp%37#0",
        "val_as_bytes%1#0",
        "dueDate#0"
      ]
    },
    "1088": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "reinterpret_bytes[32]%0#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%36#0",
        "tmp%37#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%36#0",
        "tmp%37#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "1089": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "encoded_bool%0#0",
        "reinterpret_bytes[32]%0#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%36#0",
        "tmp%37#0",
        "to_encode%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%36#0",
        "tmp%37#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "to_encode%0#0"
      ]
    },
    "1091": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "reinterpret_bytes[32]%0#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%36#0",
        "tmp%37#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%36#0",
        "tmp%37#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "1092": {
      "op": "dig 12",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%36#0",
        "tmp%37#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1094": {
      "op": "dig 6",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%36#0",
        "tmp%37#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%0#0 (copy)",
        "reinterpret_bytes[32]%0#0 (copy)"
      ]
    },
    "1096": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%2#0",
        "reinterpret_bytes[32]%0#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%36#0",
        "tmp%37#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%36#0",
        "tmp%37#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1097": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%37#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%2#0",
        "tmp%36#0"
      ]
    },
    "1099": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%3#0",
        "reinterpret_bytes[32]%0#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%37#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%37#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1100": {
      "op": "dig 4",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%3#0",
        "reinterpret_bytes[32]%0#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%37#0",
        "tmp%37#0 (copy)",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%37#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%3#0",
        "tmp%37#0 (copy)"
      ]
    },
    "1102": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%4#0",
        "reinterpret_bytes[32]%0#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%37#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%37#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "1103": {
      "op": "dig 8",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%4#0",
        "reinterpret_bytes[32]%0#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%11#0 (copy)",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%37#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%37#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%4#0",
        "tmp%11#0 (copy)"
      ]
    },
    "1105": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%5#0",
        "reinterpret_bytes[32]%0#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%37#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%37#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "1106": {
      "op": "dig 7",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%5#0",
        "reinterpret_bytes[32]%0#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%22#0 (copy)",
        "tmp%25#0",
        "tmp%37#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%37#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%5#0",
        "tmp%22#0 (copy)"
      ]
    },
    "1108": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%6#0",
        "reinterpret_bytes[32]%0#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%37#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%37#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "1109": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%37#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%1#0"
      ]
    },
    "1111": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%7#0",
        "reinterpret_bytes[32]%0#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%37#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%37#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "1112": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%37#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%7#0",
        "val_as_bytes%2#0"
      ]
    },
    "1114": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%8#0",
        "reinterpret_bytes[32]%0#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%37#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%37#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "1115": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%37#0",
        "encoded_tuple_buffer%8#0",
        "val_as_bytes%3#0"
      ]
    },
    "1116": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%9#0",
        "reinterpret_bytes[32]%0#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%37#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "1117": {
      "op": "bytec_1 // 0x00",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%37#0",
        "encoded_tuple_buffer%9#0",
        "0x00"
      ]
    },
    "1118": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%10#0",
        "reinterpret_bytes[32]%0#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%37#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "1119": {
      "op": "intc 4 // 961",
      "defined_out": [
        "961",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%10#0",
        "reinterpret_bytes[32]%0#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%37#0",
        "encoded_tuple_buffer%10#0",
        "961"
      ]
    },
    "1121": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%37#0",
        "encoded_tuple_buffer%10#0",
        "961",
        "0"
      ]
    },
    "1122": {
      "op": "setbit",
      "defined_out": [
        "activeLoan#0",
        "encoded_bool%0#0",
        "reinterpret_bytes[32]%0#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%37#0",
        "activeLoan#0"
      ]
    },
    "1123": {
      "op": "bytec 6 // \"loans\"",
      "defined_out": [
        "\"loans\"",
        "activeLoan#0",
        "encoded_bool%0#0",
        "reinterpret_bytes[32]%0#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%37#0",
        "activeLoan#0",
        "\"loans\""
      ]
    },
    "1125": {
      "op": "uncover 10",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%37#0",
        "activeLoan#0",
        "\"loans\"",
        "tmp%0#0"
      ]
    },
    "1127": {
      "op": "concat",
      "defined_out": [
        "activeLoan#0",
        "encoded_bool%0#0",
        "reinterpret_bytes[32]%0#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%37#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%37#0",
        "activeLoan#0",
        "tmp%41#0"
      ]
    },
    "1128": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%37#0",
        "tmp%41#0",
        "activeLoan#0"
      ]
    },
    "1129": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%37#0"
      ]
    },
    "1130": {
      "op": "dig 6",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%37#0",
        "request#0 (copy)"
      ]
    },
    "1132": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_bool%0#0",
        "reinterpret_bytes[32]%0#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%37#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%37#0",
        "tmp%42#0"
      ]
    },
    "1135": {
      "op": "dig 7",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%37#0",
        "tmp%42#0",
        "request#0 (copy)"
      ]
    },
    "1137": {
      "error": "Index access is out of bounds",
      "op": "extract 48 8 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_bool%0#0",
        "reinterpret_bytes[32]%0#0",
        "request#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%37#0",
        "tmp%42#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%1#0",
        "request#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%37#0",
        "tmp%42#0",
        "tmp%45#0"
      ]
    },
    "1140": {
      "op": "uncover 8",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%1#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%37#0",
        "tmp%42#0",
        "tmp%45#0",
        "request#0"
      ]
    },
    "1142": {
      "error": "Index access is out of bounds",
      "op": "extract 80 8 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_bool%0#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%37#0",
        "tmp%42#0",
        "tmp%45#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%1#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%37#0",
        "tmp%42#0",
        "tmp%45#0",
        "tmp%49#0"
      ]
    },
    "1145": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%1#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%37#0",
        "tmp%45#0",
        "tmp%49#0",
        "tmp%42#0"
      ]
    },
    "1147": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%1#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%37#0",
        "tmp%45#0",
        "tmp%49#0",
        "tmp%42#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "1149": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%14#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%37#0",
        "tmp%45#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%1#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%37#0",
        "tmp%45#0",
        "tmp%49#0",
        "encoded_tuple_buffer%14#0"
      ]
    },
    "1150": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%1#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%45#0",
        "tmp%49#0",
        "encoded_tuple_buffer%14#0",
        "tmp%37#0"
      ]
    },
    "1152": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%15#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%45#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%1#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%45#0",
        "tmp%49#0",
        "encoded_tuple_buffer%15#0"
      ]
    },
    "1153": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%1#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%49#0",
        "encoded_tuple_buffer%15#0",
        "tmp%45#0"
      ]
    },
    "1155": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%16#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%1#0",
        "encoded_bool%0#0",
        "tmp%11#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%49#0",
        "encoded_tuple_buffer%16#0"
      ]
    },
    "1156": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%1#0",
        "encoded_bool%0#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%49#0",
        "encoded_tuple_buffer%16#0",
        "tmp%11#0"
      ]
    },
    "1158": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%17#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%1#0",
        "encoded_bool%0#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%49#0",
        "encoded_tuple_buffer%17#0"
      ]
    },
    "1159": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%1#0",
        "encoded_bool%0#0",
        "tmp%25#0",
        "tmp%49#0",
        "encoded_tuple_buffer%17#0",
        "tmp%22#0"
      ]
    },
    "1161": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%18#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%12#0",
        "tmp%25#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%1#0",
        "encoded_bool%0#0",
        "tmp%25#0",
        "tmp%49#0",
        "encoded_tuple_buffer%18#0"
      ]
    },
    "1162": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%1#0",
        "encoded_bool%0#0",
        "tmp%49#0",
        "encoded_tuple_buffer%18#0",
        "tmp%25#0"
      ]
    },
    "1164": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%19#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%12#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%1#0",
        "encoded_bool%0#0",
        "tmp%49#0",
        "encoded_tuple_buffer%19#0"
      ]
    },
    "1165": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%1#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%19#0",
        "tmp%49#0"
      ]
    },
    "1166": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%20#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%1#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%20#0"
      ]
    },
    "1167": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%1#0",
        "encoded_tuple_buffer%20#0",
        "encoded_bool%0#0"
      ]
    },
    "1168": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%21#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%1#0",
        "encoded_tuple_buffer%21#0"
      ]
    },
    "1169": {
      "op": "intc 5 // 705",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%1#0",
        "encoded_tuple_buffer%21#0",
        "705"
      ]
    },
    "1171": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%1#0",
        "encoded_tuple_buffer%21#0",
        "705",
        "1"
      ]
    },
    "1172": {
      "op": "setbit",
      "defined_out": [
        "encoded_tuple_buffer%22#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%1#0",
        "encoded_tuple_buffer%22#0"
      ]
    },
    "1173": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0"
      ]
    },
    "1174": {
      "op": "bytec 10 // \"lender\"",
      "defined_out": [
        "\"lender\"",
        "tmp%0#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "\"lender\""
      ]
    },
    "1176": {
      "op": "txn Sender",
      "defined_out": [
        "\"lender\"",
        "lender#0",
        "tmp%0#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "\"lender\"",
        "lender#0"
      ]
    },
    "1178": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#1",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#1"
      ]
    },
    "1179": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#1",
        "tmp%0#1"
      ]
    },
    "1180": {
      "op": "box_len",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#1",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1181": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#1",
        "maybe_exists%0#0"
      ]
    },
    "1183": {
      "op": "bz fundLoan_else_body@4",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#1"
      ]
    },
    "1186": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#1",
        "tmp%0#1 (copy)",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ]
    },
    "1187": {
      "op": "box_get",
      "defined_out": [
        "loans#0",
        "maybe_exists%1#0",
        "tmp%0#0",
        "tmp%0#1",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#1",
        "loans#0",
        "maybe_exists%1#0"
      ]
    },
    "1188": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#1",
        "loans#0"
      ]
    },
    "1189": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%0#0",
        "tmp%0#0",
        "tmp%0#1",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#1",
        "expr_value_trimmed%0#0"
      ]
    },
    "1192": {
      "op": "frame_dig 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#1",
        "expr_value_trimmed%0#0",
        "tmp%0#0"
      ]
    },
    "1194": {
      "op": "concat",
      "defined_out": [
        "concatenated%0#0",
        "tmp%0#0",
        "tmp%0#1",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#1",
        "concatenated%0#0"
      ]
    },
    "1195": {
      "op": "dup",
      "defined_out": [
        "concatenated%0#0",
        "concatenated%0#0 (copy)",
        "tmp%0#0",
        "tmp%0#1",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#1",
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ]
    },
    "1196": {
      "op": "len",
      "defined_out": [
        "byte_len%0#0",
        "concatenated%0#0",
        "tmp%0#0",
        "tmp%0#1",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#1",
        "concatenated%0#0",
        "byte_len%0#0"
      ]
    },
    "1197": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "byte_len%0#0",
        "concatenated%0#0",
        "tmp%0#0",
        "tmp%0#1",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#1",
        "concatenated%0#0",
        "byte_len%0#0",
        "8"
      ]
    },
    "1199": {
      "op": "/",
      "defined_out": [
        "concatenated%0#0",
        "len_%0#0",
        "tmp%0#0",
        "tmp%0#1",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#1",
        "concatenated%0#0",
        "len_%0#0"
      ]
    },
    "1200": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concatenated%0#0",
        "tmp%0#0",
        "tmp%0#1",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#1",
        "concatenated%0#0",
        "as_bytes%0#0"
      ]
    },
    "1201": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%0#0",
        "len_16_bit%0#0",
        "tmp%0#0",
        "tmp%0#1",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#1",
        "concatenated%0#0",
        "len_16_bit%0#0"
      ]
    },
    "1204": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#1",
        "len_16_bit%0#0",
        "concatenated%0#0"
      ]
    },
    "1205": {
      "op": "concat",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#1",
        "loans#0"
      ]
    },
    "1206": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#1",
        "loans#0",
        "tmp%0#1 (copy)"
      ]
    },
    "1208": {
      "op": "box_del",
      "defined_out": [
        "loans#0",
        "tmp%0#0",
        "tmp%0#1",
        "tmp%12#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#1",
        "loans#0",
        "{box_del}"
      ]
    },
    "1209": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#1",
        "loans#0"
      ]
    },
    "1210": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0"
      ]
    },
    "1211": {
      "block": "fundLoan_after_if_else@5",
      "stack_in": [
        "tmp%0#0",
        "tmp%12#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "0"
      ]
    },
    "1212": {
      "op": "bytec_3 // \"totalLoansIssued\"",
      "defined_out": [
        "\"totalLoansIssued\"",
        "0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "0",
        "\"totalLoansIssued\""
      ]
    },
    "1213": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1214": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "maybe_value%4#0"
      ]
    },
    "1215": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "maybe_value%4#0",
        "1"
      ]
    },
    "1216": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "new_state_value%0#0"
      ]
    },
    "1217": {
      "op": "bytec_3 // \"totalLoansIssued\"",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "new_state_value%0#0",
        "\"totalLoansIssued\""
      ]
    },
    "1218": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "\"totalLoansIssued\"",
        "new_state_value%0#0"
      ]
    },
    "1219": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0"
      ]
    },
    "1220": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "0"
      ]
    },
    "1221": {
      "op": "bytec 4 // \"totalVolumeUSDC\"",
      "defined_out": [
        "\"totalVolumeUSDC\"",
        "0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "0",
        "\"totalVolumeUSDC\""
      ]
    },
    "1223": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "1224": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "maybe_value%5#0"
      ]
    },
    "1225": {
      "op": "frame_dig 1",
      "defined_out": [
        "maybe_value%5#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "maybe_value%5#0",
        "tmp%12#0"
      ]
    },
    "1227": {
      "op": "+",
      "defined_out": [
        "new_state_value%1#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "new_state_value%1#0"
      ]
    },
    "1228": {
      "op": "bytec 4 // \"totalVolumeUSDC\"",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "new_state_value%1#0",
        "\"totalVolumeUSDC\""
      ]
    },
    "1230": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "\"totalVolumeUSDC\"",
        "new_state_value%1#0"
      ]
    },
    "1231": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0"
      ]
    },
    "1232": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "1"
      ]
    },
    "1233": {
      "op": "frame_bury 0"
    },
    "1235": {
      "retsub": true,
      "op": "retsub"
    },
    "1236": {
      "block": "fundLoan_else_body@4",
      "stack_in": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#1"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#1",
        "tmp%0#0"
      ]
    },
    "1238": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#1",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1239": {
      "op": "len",
      "defined_out": [
        "byte_len%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#1",
        "tmp%0#0",
        "byte_len%1#0"
      ]
    },
    "1240": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "byte_len%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#1",
        "tmp%0#0",
        "byte_len%1#0",
        "8"
      ]
    },
    "1242": {
      "op": "/",
      "defined_out": [
        "len_%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#1",
        "tmp%0#0",
        "len_%1#0"
      ]
    },
    "1243": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#1",
        "tmp%0#0",
        "as_bytes%1#0"
      ]
    },
    "1244": {
      "op": "extract 6 2",
      "defined_out": [
        "len_16_bit%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#1",
        "tmp%0#0",
        "len_16_bit%1#0"
      ]
    },
    "1247": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#1",
        "len_16_bit%1#0",
        "tmp%0#0"
      ]
    },
    "1248": {
      "op": "concat",
      "defined_out": [
        "newArray#1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#1",
        "newArray#1"
      ]
    },
    "1249": {
      "op": "swap",
      "defined_out": [
        "newArray#1",
        "tmp%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "newArray#1",
        "tmp%0#1"
      ]
    },
    "1250": {
      "op": "dup",
      "defined_out": [
        "newArray#1",
        "tmp%0#0",
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "newArray#1",
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ]
    },
    "1251": {
      "op": "box_del",
      "defined_out": [
        "newArray#1",
        "tmp%0#0",
        "tmp%0#1",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "newArray#1",
        "tmp%0#1",
        "{box_del}"
      ]
    },
    "1252": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "newArray#1",
        "tmp%0#1"
      ]
    },
    "1253": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%0#1",
        "newArray#1"
      ]
    },
    "1254": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0"
      ]
    },
    "1255": {
      "op": "b fundLoan_after_if_else@5"
    },
    "1258": {
      "subroutine": "smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts::SimpleCollateralLending.repayLoan",
      "params": {
        "loanId#0": "uint64",
        "repayment#0": "uint64"
      },
      "block": "repayLoan",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1261": {
      "op": "frame_dig -2",
      "defined_out": [
        "loanId#0 (copy)"
      ],
      "stack_out": [
        "loanId#0 (copy)"
      ]
    },
    "1263": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1264": {
      "op": "bytec 6 // \"loans\"",
      "defined_out": [
        "\"loans\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"loans\""
      ]
    },
    "1266": {
      "op": "swap",
      "stack_out": [
        "\"loans\"",
        "tmp%0#0"
      ]
    },
    "1267": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1268": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "1269": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1270": {
      "op": "bury 1",
      "stack_out": [
        "tmp%1#0",
        "maybe_exists%0#0"
      ]
    },
    "1272": {
      "error": "Active loan not found",
      "op": "assert // Active loan not found",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1273": {
      "op": "dup",
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "1274": {
      "op": "box_get",
      "defined_out": [
        "loan#0",
        "maybe_exists%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "maybe_exists%1#0"
      ]
    },
    "1275": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%1#0",
        "loan#0"
      ]
    },
    "1276": {
      "op": "dup",
      "defined_out": [
        "loan#0",
        "loan#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "loan#0 (copy)"
      ]
    },
    "1277": {
      "op": "pushint 960 // 960",
      "defined_out": [
        "960",
        "loan#0",
        "loan#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "loan#0 (copy)",
        "960"
      ]
    },
    "1280": {
      "op": "getbit",
      "defined_out": [
        "is_true%0#0",
        "loan#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "is_true%0#0"
      ]
    },
    "1281": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "is_true%0#0",
        "loan#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "is_true%0#0",
        "0x00"
      ]
    },
    "1282": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "is_true%0#0",
        "loan#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "is_true%0#0",
        "0x00",
        "0"
      ]
    },
    "1283": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "0x00",
        "0",
        "is_true%0#0"
      ]
    },
    "1285": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "loan#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0"
      ]
    },
    "1286": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0",
        "0"
      ]
    },
    "1287": {
      "op": "getbit",
      "defined_out": [
        "loan#0",
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%4#0"
      ]
    },
    "1288": {
      "op": "!",
      "defined_out": [
        "loan#0",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%5#0"
      ]
    },
    "1289": {
      "error": "Already repaid",
      "op": "assert // Already repaid",
      "stack_out": [
        "tmp%1#0",
        "loan#0"
      ]
    },
    "1290": {
      "op": "dup",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "loan#0 (copy)"
      ]
    },
    "1291": {
      "op": "intc 4 // 961",
      "defined_out": [
        "961",
        "loan#0",
        "loan#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "loan#0 (copy)",
        "961"
      ]
    },
    "1293": {
      "op": "getbit",
      "defined_out": [
        "is_true%1#0",
        "loan#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "is_true%1#0"
      ]
    },
    "1294": {
      "op": "bytec_1 // 0x00",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "is_true%1#0",
        "0x00"
      ]
    },
    "1295": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "is_true%1#0",
        "0x00",
        "0"
      ]
    },
    "1296": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "0x00",
        "0",
        "is_true%1#0"
      ]
    },
    "1298": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%1#0",
        "loan#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%1#0"
      ]
    },
    "1299": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%1#0",
        "0"
      ]
    },
    "1300": {
      "op": "getbit",
      "defined_out": [
        "loan#0",
        "tmp%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0"
      ]
    },
    "1301": {
      "op": "dup",
      "defined_out": [
        "loan#0",
        "tmp%1#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "1302": {
      "op": "!",
      "defined_out": [
        "loan#0",
        "tmp%1#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "1303": {
      "error": "Already liquidated",
      "op": "assert // Already liquidated",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0"
      ]
    },
    "1304": {
      "op": "dig 1",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "loan#0 (copy)"
      ]
    },
    "1306": {
      "error": "Index access is out of bounds",
      "op": "extract 8 32 // on error: Index access is out of bounds",
      "defined_out": [
        "loan#0",
        "tmp%1#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "1309": {
      "op": "dup"
    },
    "1310": {
      "op": "txn Sender",
      "defined_out": [
        "loan#0",
        "tmp%1#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%8#0 (copy)",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%8#0 (copy)",
        "tmp%9#0"
      ]
    },
    "1312": {
      "op": "==",
      "defined_out": [
        "loan#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "1313": {
      "error": "Only borrower can repay",
      "op": "assert // Only borrower can repay",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "1314": {
      "op": "frame_dig -1",
      "defined_out": [
        "loan#0",
        "repayment#0 (copy)",
        "tmp%1#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "repayment#0 (copy)"
      ]
    },
    "1316": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "loan#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%11#0"
      ]
    },
    "1318": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%11#0",
        "0"
      ]
    },
    "1319": {
      "op": "bytec 5 // \"usdcAssetId\"",
      "defined_out": [
        "\"usdcAssetId\"",
        "0",
        "loan#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%11#0",
        "0",
        "\"usdcAssetId\""
      ]
    },
    "1321": {
      "op": "app_global_get_ex",
      "defined_out": [
        "loan#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%11#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1322": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%11#0",
        "maybe_value%2#0"
      ]
    },
    "1323": {
      "op": "==",
      "defined_out": [
        "loan#0",
        "tmp%1#0",
        "tmp%12#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%12#0"
      ]
    },
    "1324": {
      "error": "Must repay with USDC",
      "op": "assert // Must repay with USDC",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "1325": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "repayment#0 (copy)"
      ]
    },
    "1327": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "loan#0",
        "tmp%1#0",
        "tmp%13#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%13#0"
      ]
    },
    "1329": {
      "op": "dig 3",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%13#0",
        "loan#0 (copy)"
      ]
    },
    "1331": {
      "error": "Index access is out of bounds",
      "op": "extract 96 8 // on error: Index access is out of bounds",
      "defined_out": [
        "loan#0",
        "tmp%1#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "1334": {
      "op": "dig 4",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%13#0",
        "tmp%14#0",
        "loan#0 (copy)"
      ]
    },
    "1336": {
      "op": "pushint 96 // 96",
      "defined_out": [
        "96",
        "loan#0",
        "loan#0 (copy)",
        "tmp%1#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%13#0",
        "tmp%14#0",
        "loan#0 (copy)",
        "96"
      ]
    },
    "1338": {
      "op": "extract_uint64",
      "defined_out": [
        "loan#0",
        "tmp%1#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "1339": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%13#0"
      ]
    },
    "1341": {
      "op": "dig 1",
      "defined_out": [
        "loan#0",
        "tmp%1#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%15#0 (copy)",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%13#0",
        "tmp%15#0 (copy)"
      ]
    },
    "1343": {
      "op": "==",
      "defined_out": [
        "loan#0",
        "tmp%1#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "1344": {
      "error": "Incorrect repayment amount",
      "op": "assert // Incorrect repayment amount",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "1345": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%14#0",
        "tmp%15#0",
        "repayment#0 (copy)"
      ]
    },
    "1347": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "loan#0",
        "tmp%1#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%17#0"
      ]
    },
    "1349": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "loan#0",
        "tmp%1#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "1351": {
      "op": "==",
      "defined_out": [
        "loan#0",
        "tmp%1#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%19#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%19#0"
      ]
    },
    "1352": {
      "error": "Payment to wrong address",
      "op": "assert // Payment to wrong address",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "1353": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%14#0",
        "tmp%15#0",
        "repayment#0 (copy)"
      ]
    },
    "1355": {
      "op": "gtxns Sender",
      "defined_out": [
        "loan#0",
        "tmp%1#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%20#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%20#0"
      ]
    },
    "1357": {
      "op": "txn Sender",
      "defined_out": [
        "loan#0",
        "tmp%1#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%20#0",
        "tmp%21#0"
      ]
    },
    "1359": {
      "op": "==",
      "defined_out": [
        "loan#0",
        "tmp%1#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%22#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%22#0"
      ]
    },
    "1360": {
      "error": "Payment sender mismatch",
      "op": "assert // Payment sender mismatch",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "1361": {
      "op": "itxn_begin"
    },
    "1362": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%14#0",
        "tmp%15#0",
        "0"
      ]
    },
    "1363": {
      "op": "bytec 5 // \"usdcAssetId\"",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%14#0",
        "tmp%15#0",
        "0",
        "\"usdcAssetId\""
      ]
    },
    "1365": {
      "op": "app_global_get_ex",
      "defined_out": [
        "loan#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%1#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1366": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0"
      ]
    },
    "1367": {
      "op": "dig 5",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "loan#0 (copy)"
      ]
    },
    "1369": {
      "error": "Index access is out of bounds",
      "op": "extract 40 32 // on error: Index access is out of bounds",
      "defined_out": [
        "loan#0",
        "maybe_value%3#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%1#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "1372": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%14#0",
        "maybe_value%3#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%15#0"
      ]
    },
    "1374": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%14#0",
        "maybe_value%3#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "1376": {
      "op": "dup",
      "defined_out": [
        "loan#0",
        "maybe_value%3#0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%0#0 (copy)",
        "tmp%1#0",
        "tmp%14#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%14#0",
        "maybe_value%3#0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%0#0 (copy)"
      ]
    },
    "1377": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%14#0",
        "maybe_value%3#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "1379": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%14#0",
        "reinterpret_bytes[32]%0#0",
        "maybe_value%3#0"
      ]
    },
    "1380": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%14#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "1382": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "loan#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%1#0",
        "tmp%14#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%14#0",
        "reinterpret_bytes[32]%0#0",
        "4"
      ]
    },
    "1383": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%14#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "1385": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%14#0",
        "reinterpret_bytes[32]%0#0",
        "0"
      ]
    },
    "1386": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%14#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "1388": {
      "op": "itxn_submit"
    },
    "1389": {
      "op": "itxn_begin"
    },
    "1390": {
      "op": "dig 4",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%14#0",
        "reinterpret_bytes[32]%0#0",
        "loan#0 (copy)"
      ]
    },
    "1392": {
      "error": "Index access is out of bounds",
      "op": "extract 72 8 // on error: Index access is out of bounds",
      "defined_out": [
        "loan#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%1#0",
        "tmp%14#0",
        "tmp%24#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%14#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%24#0"
      ]
    },
    "1395": {
      "op": "dig 5",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%14#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%24#0",
        "loan#0 (copy)"
      ]
    },
    "1397": {
      "op": "pushint 72 // 72",
      "defined_out": [
        "72",
        "loan#0",
        "loan#0 (copy)",
        "reinterpret_bytes[32]%0#0",
        "tmp%1#0",
        "tmp%14#0",
        "tmp%24#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%14#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%24#0",
        "loan#0 (copy)",
        "72"
      ]
    },
    "1399": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%1%%param_XferAsset_idx_0#0",
        "loan#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%1#0",
        "tmp%14#0",
        "tmp%24#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%14#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%24#0",
        "inner_txn_params%1%%param_XferAsset_idx_0#0"
      ]
    },
    "1400": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "inner_txn_params%1%%param_XferAsset_idx_0#0",
        "loan#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%1#0",
        "tmp%14#0",
        "tmp%24#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%14#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%24#0",
        "inner_txn_params%1%%param_XferAsset_idx_0#0",
        "1"
      ]
    },
    "1401": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%14#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%24#0",
        "inner_txn_params%1%%param_XferAsset_idx_0#0"
      ]
    },
    "1403": {
      "op": "dig 4",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%14#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%24#0",
        "inner_txn_params%1%%param_XferAsset_idx_0#0",
        "tmp%8#0 (copy)"
      ]
    },
    "1405": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%14#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%24#0",
        "inner_txn_params%1%%param_XferAsset_idx_0#0"
      ]
    },
    "1407": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%14#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%24#0"
      ]
    },
    "1409": {
      "op": "intc_2 // 4",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%14#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%24#0",
        "4"
      ]
    },
    "1410": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%14#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%24#0"
      ]
    },
    "1412": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%14#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%24#0",
        "0"
      ]
    },
    "1413": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%14#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%24#0"
      ]
    },
    "1415": {
      "op": "itxn_submit"
    },
    "1416": {
      "op": "dig 5",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%14#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%24#0",
        "loan#0 (copy)"
      ]
    },
    "1418": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "loan#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%1#0",
        "tmp%14#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%14#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%24#0",
        "tmp%25#0"
      ]
    },
    "1421": {
      "op": "dig 6",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%14#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%24#0",
        "tmp%25#0",
        "loan#0 (copy)"
      ]
    },
    "1423": {
      "error": "Index access is out of bounds",
      "op": "extract 80 8 // on error: Index access is out of bounds",
      "defined_out": [
        "loan#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%1#0",
        "tmp%14#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%29#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%14#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%29#0"
      ]
    },
    "1426": {
      "op": "dig 7",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%14#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%29#0",
        "loan#0 (copy)"
      ]
    },
    "1428": {
      "error": "Index access is out of bounds",
      "op": "extract 88 8 // on error: Index access is out of bounds",
      "defined_out": [
        "loan#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%1#0",
        "tmp%14#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%14#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%29#0",
        "tmp%30#0"
      ]
    },
    "1431": {
      "op": "dig 8",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%14#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%29#0",
        "tmp%30#0",
        "loan#0 (copy)"
      ]
    },
    "1433": {
      "error": "Index access is out of bounds",
      "op": "extract 104 8 // on error: Index access is out of bounds",
      "defined_out": [
        "loan#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%1#0",
        "tmp%14#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%32#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%14#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%32#0"
      ]
    },
    "1436": {
      "op": "uncover 9",
      "stack_out": [
        "tmp%1#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%14#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%32#0",
        "loan#0"
      ]
    },
    "1438": {
      "error": "Index access is out of bounds",
      "op": "extract 112 8 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "tmp%1#0",
        "tmp%14#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%14#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%32#0",
        "tmp%33#0"
      ]
    },
    "1441": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%1#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%14#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%24#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%25#0"
      ]
    },
    "1443": {
      "op": "uncover 8",
      "stack_out": [
        "tmp%1#0",
        "tmp%6#0",
        "tmp%14#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%24#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%25#0",
        "tmp%8#0"
      ]
    },
    "1445": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%1#0",
        "tmp%14#0",
        "tmp%24#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%6#0",
        "tmp%14#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%24#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%32#0",
        "tmp%33#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1446": {
      "op": "uncover 6",
      "stack_out": [
        "tmp%1#0",
        "tmp%6#0",
        "tmp%14#0",
        "tmp%24#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%32#0",
        "tmp%33#0",
        "encoded_tuple_buffer%2#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "1448": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%1#0",
        "tmp%14#0",
        "tmp%24#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%6#0",
        "tmp%14#0",
        "tmp%24#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%32#0",
        "tmp%33#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1449": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%1#0",
        "tmp%6#0",
        "tmp%14#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%32#0",
        "tmp%33#0",
        "encoded_tuple_buffer%3#0",
        "tmp%24#0"
      ]
    },
    "1451": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%1#0",
        "tmp%14#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%6#0",
        "tmp%14#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%32#0",
        "tmp%33#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "1452": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%1#0",
        "tmp%6#0",
        "tmp%14#0",
        "tmp%30#0",
        "tmp%32#0",
        "tmp%33#0",
        "encoded_tuple_buffer%4#0",
        "tmp%29#0"
      ]
    },
    "1454": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "tmp%1#0",
        "tmp%14#0",
        "tmp%30#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%6#0",
        "tmp%14#0",
        "tmp%30#0",
        "tmp%32#0",
        "tmp%33#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "1455": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%1#0",
        "tmp%6#0",
        "tmp%14#0",
        "tmp%32#0",
        "tmp%33#0",
        "encoded_tuple_buffer%5#0",
        "tmp%30#0"
      ]
    },
    "1457": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "tmp%1#0",
        "tmp%14#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%6#0",
        "tmp%14#0",
        "tmp%32#0",
        "tmp%33#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "1458": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%1#0",
        "tmp%6#0",
        "tmp%32#0",
        "tmp%33#0",
        "encoded_tuple_buffer%6#0",
        "tmp%14#0"
      ]
    },
    "1460": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "tmp%1#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%6#0",
        "tmp%32#0",
        "tmp%33#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "1461": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%6#0",
        "tmp%33#0",
        "encoded_tuple_buffer%7#0",
        "tmp%32#0"
      ]
    },
    "1463": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "tmp%1#0",
        "tmp%33#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%6#0",
        "tmp%33#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "1464": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "tmp%6#0",
        "encoded_tuple_buffer%8#0",
        "tmp%33#0"
      ]
    },
    "1465": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "tmp%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%6#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "1466": {
      "op": "pushbytes 0x80",
      "defined_out": [
        "0x80",
        "encoded_tuple_buffer%9#0",
        "tmp%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%6#0",
        "encoded_tuple_buffer%9#0",
        "0x80"
      ]
    },
    "1469": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "tmp%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%6#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "1470": {
      "op": "intc 4 // 961",
      "stack_out": [
        "tmp%1#0",
        "tmp%6#0",
        "encoded_tuple_buffer%10#0",
        "961"
      ]
    },
    "1472": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "encoded_tuple_buffer%10#0",
        "961",
        "tmp%6#0"
      ]
    },
    "1474": {
      "op": "setbit",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "1475": {
      "op": "box_put",
      "stack_out": []
    },
    "1476": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "1477": {
      "retsub": true,
      "op": "retsub"
    },
    "1478": {
      "subroutine": "smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts::SimpleCollateralLending.liquidateLoan",
      "params": {
        "loanId#0": "uint64"
      },
      "block": "liquidateLoan",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1481": {
      "op": "frame_dig -1",
      "defined_out": [
        "loanId#0 (copy)"
      ],
      "stack_out": [
        "loanId#0 (copy)"
      ]
    },
    "1483": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1484": {
      "op": "bytec 6 // \"loans\"",
      "defined_out": [
        "\"loans\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"loans\""
      ]
    },
    "1486": {
      "op": "swap",
      "stack_out": [
        "\"loans\"",
        "tmp%0#0"
      ]
    },
    "1487": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1488": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "1489": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1490": {
      "op": "bury 1",
      "stack_out": [
        "tmp%1#0",
        "maybe_exists%0#0"
      ]
    },
    "1492": {
      "error": "Active loan not found",
      "op": "assert // Active loan not found",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1493": {
      "op": "dup",
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "1494": {
      "op": "box_get",
      "defined_out": [
        "loan#0",
        "maybe_exists%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "maybe_exists%1#0"
      ]
    },
    "1495": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%1#0",
        "loan#0"
      ]
    },
    "1496": {
      "op": "dup",
      "defined_out": [
        "loan#0",
        "loan#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "loan#0 (copy)"
      ]
    },
    "1497": {
      "op": "pushint 960 // 960",
      "defined_out": [
        "960",
        "loan#0",
        "loan#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "loan#0 (copy)",
        "960"
      ]
    },
    "1500": {
      "op": "getbit",
      "defined_out": [
        "is_true%0#0",
        "loan#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "is_true%0#0"
      ]
    },
    "1501": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "is_true%0#0",
        "loan#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "is_true%0#0",
        "0x00"
      ]
    },
    "1502": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "is_true%0#0",
        "loan#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "is_true%0#0",
        "0x00",
        "0"
      ]
    },
    "1503": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "0x00",
        "0",
        "is_true%0#0"
      ]
    },
    "1505": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "loan#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0"
      ]
    },
    "1506": {
      "op": "dup",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%0#0 (copy)",
        "loan#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0",
        "encoded_bool%0#0 (copy)"
      ]
    },
    "1507": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0",
        "encoded_bool%0#0 (copy)",
        "0"
      ]
    },
    "1508": {
      "op": "getbit",
      "defined_out": [
        "encoded_bool%0#0",
        "loan#0",
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0",
        "tmp%4#0"
      ]
    },
    "1509": {
      "op": "!",
      "defined_out": [
        "encoded_bool%0#0",
        "loan#0",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0",
        "tmp%5#0"
      ]
    },
    "1510": {
      "error": "Already repaid",
      "op": "assert // Already repaid",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0"
      ]
    },
    "1511": {
      "op": "dig 1",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0",
        "loan#0 (copy)"
      ]
    },
    "1513": {
      "op": "intc 4 // 961",
      "defined_out": [
        "961",
        "encoded_bool%0#0",
        "loan#0",
        "loan#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0",
        "loan#0 (copy)",
        "961"
      ]
    },
    "1515": {
      "op": "getbit",
      "defined_out": [
        "encoded_bool%0#0",
        "is_true%1#0",
        "loan#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0",
        "is_true%1#0"
      ]
    },
    "1516": {
      "op": "bytec_1 // 0x00",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0",
        "is_true%1#0",
        "0x00"
      ]
    },
    "1517": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0",
        "is_true%1#0",
        "0x00",
        "0"
      ]
    },
    "1518": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0",
        "0x00",
        "0",
        "is_true%1#0"
      ]
    },
    "1520": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "loan#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0"
      ]
    },
    "1521": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "0"
      ]
    },
    "1522": {
      "op": "getbit",
      "defined_out": [
        "encoded_bool%0#0",
        "loan#0",
        "tmp%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0",
        "tmp%6#0"
      ]
    },
    "1523": {
      "op": "!",
      "defined_out": [
        "encoded_bool%0#0",
        "loan#0",
        "tmp%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0",
        "tmp%7#0"
      ]
    },
    "1524": {
      "error": "Already liquidated",
      "op": "assert // Already liquidated",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0"
      ]
    },
    "1525": {
      "op": "dig 1",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0",
        "loan#0 (copy)"
      ]
    },
    "1527": {
      "error": "Index access is out of bounds",
      "op": "extract 40 32 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_bool%0#0",
        "loan#0",
        "tmp%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0",
        "tmp%8#0"
      ]
    },
    "1530": {
      "op": "dup"
    },
    "1531": {
      "op": "txn Sender",
      "defined_out": [
        "encoded_bool%0#0",
        "loan#0",
        "tmp%1#0",
        "tmp%8#0",
        "tmp%8#0 (copy)",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0",
        "tmp%8#0",
        "tmp%8#0 (copy)",
        "tmp%9#0"
      ]
    },
    "1533": {
      "op": "==",
      "defined_out": [
        "encoded_bool%0#0",
        "loan#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0",
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "1534": {
      "error": "Only lender can liquidate",
      "op": "assert // Only lender can liquidate",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0",
        "tmp%8#0"
      ]
    },
    "1535": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "encoded_bool%0#0",
        "loan#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0",
        "tmp%8#0",
        "tmp%11#0"
      ]
    },
    "1537": {
      "op": "dig 3",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0",
        "tmp%8#0",
        "tmp%11#0",
        "loan#0 (copy)"
      ]
    },
    "1539": {
      "error": "Index access is out of bounds",
      "op": "extract 104 8 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_bool%0#0",
        "loan#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0",
        "tmp%8#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "1542": {
      "op": "dig 4",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0",
        "tmp%8#0",
        "tmp%11#0",
        "tmp%12#0",
        "loan#0 (copy)"
      ]
    },
    "1544": {
      "op": "pushint 104 // 104",
      "defined_out": [
        "104",
        "encoded_bool%0#0",
        "loan#0",
        "loan#0 (copy)",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0",
        "tmp%8#0",
        "tmp%11#0",
        "tmp%12#0",
        "loan#0 (copy)",
        "104"
      ]
    },
    "1546": {
      "op": "extract_uint64",
      "defined_out": [
        "encoded_bool%0#0",
        "loan#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0",
        "tmp%8#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "1547": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0",
        "tmp%8#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%11#0"
      ]
    },
    "1549": {
      "op": "<",
      "defined_out": [
        "encoded_bool%0#0",
        "loan#0",
        "tmp%1#0",
        "tmp%12#0",
        "tmp%14#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0",
        "tmp%8#0",
        "tmp%12#0",
        "tmp%14#0"
      ]
    },
    "1550": {
      "error": "Loan not yet overdue",
      "op": "assert // Loan not yet overdue",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0",
        "tmp%8#0",
        "tmp%12#0"
      ]
    },
    "1551": {
      "op": "itxn_begin"
    },
    "1552": {
      "op": "dig 3",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0",
        "tmp%8#0",
        "tmp%12#0",
        "loan#0 (copy)"
      ]
    },
    "1554": {
      "error": "Index access is out of bounds",
      "op": "extract 72 8 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_bool%0#0",
        "loan#0",
        "tmp%1#0",
        "tmp%12#0",
        "tmp%15#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0",
        "tmp%8#0",
        "tmp%12#0",
        "tmp%15#0"
      ]
    },
    "1557": {
      "op": "dig 4",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0",
        "tmp%8#0",
        "tmp%12#0",
        "tmp%15#0",
        "loan#0 (copy)"
      ]
    },
    "1559": {
      "op": "pushint 72 // 72",
      "defined_out": [
        "72",
        "encoded_bool%0#0",
        "loan#0",
        "loan#0 (copy)",
        "tmp%1#0",
        "tmp%12#0",
        "tmp%15#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0",
        "tmp%8#0",
        "tmp%12#0",
        "tmp%15#0",
        "loan#0 (copy)",
        "72"
      ]
    },
    "1561": {
      "op": "extract_uint64",
      "defined_out": [
        "encoded_bool%0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "loan#0",
        "tmp%1#0",
        "tmp%12#0",
        "tmp%15#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0",
        "tmp%8#0",
        "tmp%12#0",
        "tmp%15#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "1562": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "encoded_bool%0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "loan#0",
        "tmp%1#0",
        "tmp%12#0",
        "tmp%15#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0",
        "tmp%8#0",
        "tmp%12#0",
        "tmp%15#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "1"
      ]
    },
    "1563": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0",
        "tmp%8#0",
        "tmp%12#0",
        "tmp%15#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "1565": {
      "op": "dig 3",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0",
        "tmp%8#0",
        "tmp%12#0",
        "tmp%15#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "tmp%8#0 (copy)"
      ]
    },
    "1567": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0",
        "tmp%8#0",
        "tmp%12#0",
        "tmp%15#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "1569": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0",
        "tmp%8#0",
        "tmp%12#0",
        "tmp%15#0"
      ]
    },
    "1571": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "encoded_bool%0#0",
        "loan#0",
        "tmp%1#0",
        "tmp%12#0",
        "tmp%15#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0",
        "tmp%8#0",
        "tmp%12#0",
        "tmp%15#0",
        "4"
      ]
    },
    "1572": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0",
        "tmp%8#0",
        "tmp%12#0",
        "tmp%15#0"
      ]
    },
    "1574": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0",
        "tmp%8#0",
        "tmp%12#0",
        "tmp%15#0",
        "0"
      ]
    },
    "1575": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0",
        "tmp%8#0",
        "tmp%12#0",
        "tmp%15#0"
      ]
    },
    "1577": {
      "op": "itxn_submit"
    },
    "1578": {
      "op": "dig 4",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0",
        "tmp%8#0",
        "tmp%12#0",
        "tmp%15#0",
        "loan#0 (copy)"
      ]
    },
    "1580": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_bool%0#0",
        "loan#0",
        "tmp%1#0",
        "tmp%12#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0",
        "tmp%8#0",
        "tmp%12#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "1583": {
      "op": "dig 5",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0",
        "tmp%8#0",
        "tmp%12#0",
        "tmp%15#0",
        "tmp%16#0",
        "loan#0 (copy)"
      ]
    },
    "1585": {
      "error": "Index access is out of bounds",
      "op": "extract 8 32 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_bool%0#0",
        "loan#0",
        "tmp%1#0",
        "tmp%12#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0",
        "tmp%8#0",
        "tmp%12#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "1588": {
      "op": "dig 6",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0",
        "tmp%8#0",
        "tmp%12#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "loan#0 (copy)"
      ]
    },
    "1590": {
      "error": "Index access is out of bounds",
      "op": "extract 80 8 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_bool%0#0",
        "loan#0",
        "tmp%1#0",
        "tmp%12#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%20#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0",
        "tmp%8#0",
        "tmp%12#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%20#0"
      ]
    },
    "1593": {
      "op": "dig 7",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0",
        "tmp%8#0",
        "tmp%12#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%20#0",
        "loan#0 (copy)"
      ]
    },
    "1595": {
      "error": "Index access is out of bounds",
      "op": "extract 88 8 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_bool%0#0",
        "loan#0",
        "tmp%1#0",
        "tmp%12#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0",
        "tmp%8#0",
        "tmp%12#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%20#0",
        "tmp%21#0"
      ]
    },
    "1598": {
      "op": "dig 8",
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0",
        "tmp%8#0",
        "tmp%12#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%20#0",
        "tmp%21#0",
        "loan#0 (copy)"
      ]
    },
    "1600": {
      "error": "Index access is out of bounds",
      "op": "extract 96 8 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_bool%0#0",
        "loan#0",
        "tmp%1#0",
        "tmp%12#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "loan#0",
        "encoded_bool%0#0",
        "tmp%8#0",
        "tmp%12#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0"
      ]
    },
    "1603": {
      "op": "uncover 9",
      "stack_out": [
        "tmp%1#0",
        "encoded_bool%0#0",
        "tmp%8#0",
        "tmp%12#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "loan#0"
      ]
    },
    "1605": {
      "error": "Index access is out of bounds",
      "op": "extract 112 8 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_bool%0#0",
        "tmp%1#0",
        "tmp%12#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "encoded_bool%0#0",
        "tmp%8#0",
        "tmp%12#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%24#0"
      ]
    },
    "1608": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%1#0",
        "encoded_bool%0#0",
        "tmp%8#0",
        "tmp%12#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%16#0"
      ]
    },
    "1610": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%1#0",
        "encoded_bool%0#0",
        "tmp%8#0",
        "tmp%12#0",
        "tmp%15#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "1612": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%12#0",
        "tmp%15#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "encoded_bool%0#0",
        "tmp%8#0",
        "tmp%12#0",
        "tmp%15#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%24#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1613": {
      "op": "uncover 7",
      "stack_out": [
        "tmp%1#0",
        "encoded_bool%0#0",
        "tmp%12#0",
        "tmp%15#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%24#0",
        "encoded_tuple_buffer%2#0",
        "tmp%8#0"
      ]
    },
    "1615": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%3#0",
        "tmp%1#0",
        "tmp%12#0",
        "tmp%15#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "encoded_bool%0#0",
        "tmp%12#0",
        "tmp%15#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%24#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1616": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%1#0",
        "encoded_bool%0#0",
        "tmp%12#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%24#0",
        "encoded_tuple_buffer%3#0",
        "tmp%15#0"
      ]
    },
    "1618": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%4#0",
        "tmp%1#0",
        "tmp%12#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "encoded_bool%0#0",
        "tmp%12#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%24#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "1619": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%1#0",
        "encoded_bool%0#0",
        "tmp%12#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%24#0",
        "encoded_tuple_buffer%4#0",
        "tmp%20#0"
      ]
    },
    "1621": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%5#0",
        "tmp%1#0",
        "tmp%12#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "encoded_bool%0#0",
        "tmp%12#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%24#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "1622": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%1#0",
        "encoded_bool%0#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%24#0",
        "encoded_tuple_buffer%5#0",
        "tmp%21#0"
      ]
    },
    "1624": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%6#0",
        "tmp%1#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "encoded_bool%0#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%24#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "1625": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "encoded_bool%0#0",
        "tmp%12#0",
        "tmp%24#0",
        "encoded_tuple_buffer%6#0",
        "tmp%22#0"
      ]
    },
    "1627": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%7#0",
        "tmp%1#0",
        "tmp%12#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "encoded_bool%0#0",
        "tmp%12#0",
        "tmp%24#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "1628": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "encoded_bool%0#0",
        "tmp%24#0",
        "encoded_tuple_buffer%7#0",
        "tmp%12#0"
      ]
    },
    "1630": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%8#0",
        "tmp%1#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "encoded_bool%0#0",
        "tmp%24#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "1631": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%8#0",
        "tmp%24#0"
      ]
    },
    "1632": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%9#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "1633": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "encoded_tuple_buffer%9#0",
        "encoded_bool%0#0"
      ]
    },
    "1634": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "1635": {
      "op": "intc 4 // 961",
      "stack_out": [
        "tmp%1#0",
        "encoded_tuple_buffer%10#0",
        "961"
      ]
    },
    "1637": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%1#0",
        "encoded_tuple_buffer%10#0",
        "961",
        "1"
      ]
    },
    "1638": {
      "op": "setbit",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "1639": {
      "op": "box_put",
      "stack_out": []
    },
    "1640": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "1641": {
      "retsub": true,
      "op": "retsub"
    },
    "1642": {
      "subroutine": "smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts::SimpleCollateralLending.getLoanRequest",
      "params": {
        "loanId#0": "uint64"
      },
      "block": "getLoanRequest",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1645": {
      "op": "frame_dig -1",
      "defined_out": [
        "loanId#0 (copy)"
      ],
      "stack_out": [
        "loanId#0 (copy)"
      ]
    },
    "1647": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1648": {
      "op": "bytec 7 // \"requests\"",
      "defined_out": [
        "\"requests\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"requests\""
      ]
    },
    "1650": {
      "op": "swap",
      "stack_out": [
        "\"requests\"",
        "tmp%0#0"
      ]
    },
    "1651": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1652": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "1653": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1654": {
      "op": "bury 1",
      "stack_out": [
        "tmp%1#0",
        "maybe_exists%0#0"
      ]
    },
    "1656": {
      "error": "Loan request not found",
      "op": "assert // Loan request not found",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1657": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1658": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1659": {
      "retsub": true,
      "op": "retsub"
    },
    "1660": {
      "subroutine": "smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts::SimpleCollateralLending.getActiveLoan",
      "params": {
        "loanId#0": "uint64"
      },
      "block": "getActiveLoan",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1663": {
      "op": "frame_dig -1",
      "defined_out": [
        "loanId#0 (copy)"
      ],
      "stack_out": [
        "loanId#0 (copy)"
      ]
    },
    "1665": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1666": {
      "op": "bytec 6 // \"loans\"",
      "defined_out": [
        "\"loans\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"loans\""
      ]
    },
    "1668": {
      "op": "swap",
      "stack_out": [
        "\"loans\"",
        "tmp%0#0"
      ]
    },
    "1669": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1670": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "1671": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1672": {
      "op": "bury 1",
      "stack_out": [
        "tmp%1#0",
        "maybe_exists%0#0"
      ]
    },
    "1674": {
      "error": "Active loan not found",
      "op": "assert // Active loan not found",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1675": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1676": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1677": {
      "retsub": true,
      "op": "retsub"
    },
    "1678": {
      "subroutine": "smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts::SimpleCollateralLending.getBorrowerLoans",
      "params": {
        "borrower#0": "bytes"
      },
      "block": "getBorrowerLoans",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1681": {
      "op": "bytec 9 // \"borrower\"",
      "defined_out": [
        "\"borrower\""
      ],
      "stack_out": [
        "\"borrower\""
      ]
    },
    "1683": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"borrower\"",
        "borrower#0 (copy)"
      ],
      "stack_out": [
        "\"borrower\"",
        "borrower#0 (copy)"
      ]
    },
    "1685": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1686": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "1687": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1688": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1690": {
      "op": "bz getBorrowerLoans_after_if_else@2",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1693": {
      "op": "frame_dig 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "1695": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1696": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "1697": {
      "op": "swap"
    },
    "1698": {
      "retsub": true,
      "op": "retsub"
    },
    "1699": {
      "block": "getBorrowerLoans_after_if_else@2",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "bytec 11 // 0x0000",
      "defined_out": [
        "0x0000"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x0000"
      ]
    },
    "1701": {
      "op": "swap"
    },
    "1702": {
      "retsub": true,
      "op": "retsub"
    },
    "1703": {
      "subroutine": "smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts::SimpleCollateralLending.getLenderLoans",
      "params": {
        "lender#0": "bytes"
      },
      "block": "getLenderLoans",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1706": {
      "op": "bytec 10 // \"lender\"",
      "defined_out": [
        "\"lender\""
      ],
      "stack_out": [
        "\"lender\""
      ]
    },
    "1708": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"lender\"",
        "lender#0 (copy)"
      ],
      "stack_out": [
        "\"lender\"",
        "lender#0 (copy)"
      ]
    },
    "1710": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1711": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "1712": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1713": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1715": {
      "op": "bz getLenderLoans_after_if_else@2",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1718": {
      "op": "frame_dig 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "1720": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1721": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "1722": {
      "op": "swap"
    },
    "1723": {
      "retsub": true,
      "op": "retsub"
    },
    "1724": {
      "block": "getLenderLoans_after_if_else@2",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "bytec 11 // 0x0000",
      "defined_out": [
        "0x0000"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x0000"
      ]
    },
    "1726": {
      "op": "swap"
    },
    "1727": {
      "retsub": true,
      "op": "retsub"
    },
    "1728": {
      "subroutine": "smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts::SimpleCollateralLending.getRiskBasedLoanTerms",
      "params": {
        "collateralValue#0": "uint64",
        "riskScore#0": "uint64"
      },
      "block": "getRiskBasedLoanTerms",
      "stack_in": [],
      "op": "proto 2 3"
    },
    "1731": {
      "op": "frame_dig -1",
      "defined_out": [
        "riskScore#0 (copy)"
      ],
      "stack_out": [
        "riskScore#0 (copy)"
      ]
    },
    "1733": {
      "callsub": "smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts::SimpleCollateralLending.calculateLTVFromRisk",
      "op": "callsub calculateLTVFromRisk",
      "defined_out": [
        "ltvBps#0"
      ],
      "stack_out": [
        "ltvBps#0"
      ]
    },
    "1736": {
      "op": "frame_dig -2",
      "defined_out": [
        "collateralValue#0 (copy)",
        "ltvBps#0"
      ],
      "stack_out": [
        "ltvBps#0",
        "collateralValue#0 (copy)"
      ]
    },
    "1738": {
      "op": "*",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1739": {
      "op": "pushint 10000 // 10000",
      "defined_out": [
        "10000",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "10000"
      ]
    },
    "1742": {
      "op": "/",
      "defined_out": [
        "maxLoanAmount#0"
      ],
      "stack_out": [
        "maxLoanAmount#0"
      ]
    },
    "1743": {
      "op": "frame_dig -1",
      "stack_out": [
        "maxLoanAmount#0",
        "riskScore#0 (copy)"
      ]
    },
    "1745": {
      "callsub": "smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts::SimpleCollateralLending.getRiskBasedInterestRate",
      "op": "callsub getRiskBasedInterestRate",
      "defined_out": [
        "interestRate#0",
        "maxLoanAmount#0"
      ],
      "stack_out": [
        "maxLoanAmount#0",
        "interestRate#0"
      ]
    },
    "1748": {
      "op": "frame_dig -1",
      "stack_out": [
        "maxLoanAmount#0",
        "interestRate#0",
        "riskScore#0 (copy)"
      ]
    },
    "1750": {
      "callsub": "smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts::SimpleCollateralLending.calculateLTVFromRisk",
      "op": "callsub calculateLTVFromRisk",
      "defined_out": [
        "interestRate#0",
        "ltvRatio#0",
        "maxLoanAmount#0"
      ],
      "stack_out": [
        "maxLoanAmount#0",
        "interestRate#0",
        "ltvRatio#0"
      ]
    },
    "1753": {
      "op": "uncover 2",
      "stack_out": [
        "interestRate#0",
        "ltvRatio#0",
        "maxLoanAmount#0"
      ]
    },
    "1755": {
      "op": "itob",
      "defined_out": [
        "interestRate#0",
        "ltvRatio#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "interestRate#0",
        "ltvRatio#0",
        "val_as_bytes%0#0"
      ]
    },
    "1756": {
      "op": "uncover 2",
      "stack_out": [
        "ltvRatio#0",
        "val_as_bytes%0#0",
        "interestRate#0"
      ]
    },
    "1758": {
      "op": "itob",
      "defined_out": [
        "ltvRatio#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "ltvRatio#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "1759": {
      "op": "uncover 2",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "ltvRatio#0"
      ]
    },
    "1761": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "1762": {
      "retsub": true,
      "op": "retsub"
    },
    "1763": {
      "subroutine": "smart_contracts/simple_collateral_lending/SimpleCollateralLending.algo.ts::SimpleCollateralLending.getLendingStats",
      "params": {},
      "block": "getLendingStats",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1764": {
      "op": "bytec_3 // \"totalLoansIssued\"",
      "defined_out": [
        "\"totalLoansIssued\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalLoansIssued\""
      ]
    },
    "1765": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1766": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1767": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "1768": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "1769": {
      "op": "bytec 4 // \"totalVolumeUSDC\"",
      "defined_out": [
        "\"totalVolumeUSDC\"",
        "0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0",
        "\"totalVolumeUSDC\""
      ]
    },
    "1771": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1772": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%1#0"
      ]
    },
    "1773": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "1774": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "0"
      ]
    },
    "1775": {
      "op": "bytec_2 // \"nextLoanId\"",
      "defined_out": [
        "\"nextLoanId\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "0",
        "\"nextLoanId\""
      ]
    },
    "1776": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1777": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%2#0"
      ]
    },
    "1778": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%2#0",
        "1"
      ]
    },
    "1779": {
      "op": "-",
      "defined_out": [
        "to_encode%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "to_encode%0#0"
      ]
    },
    "1780": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "1781": {
      "retsub": true,
      "op": "retsub"
    }
  }
}