/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"NegotiableFinBLV1","structs":{},"methods":[{"name":"hello","args":[{"type":"string","name":"name"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Test method like HelloWorld","events":[],"recommendations":{}},{"name":"createFinancialBL","args":[{"type":"string","name":"description"},{"type":"uint64","name":"cargoValue"},{"type":"uint64","name":"blType"},{"type":"uint64","name":"creditRating"},{"type":"uint64","name":"riskScore"},{"type":"uint64","name":"yieldRate"},{"type":"string","name":"vleiID"},{"type":"string","name":"jurisdictionCode"},{"type":"string","name":"complianceHash"},{"type":"string","name":"incoterms"},{"type":"string","name":"insurancePolicyID"},{"type":"string","name":"lcrReference"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Create Financial BL (simplified)","events":[],"recommendations":{}},{"name":"getBLFinancialInfo","args":[{"type":"string","name":"blId"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get BL financial info (simplified)","events":[],"recommendations":{}},{"name":"verifyCompliance","args":[{"type":"string","name":"blId"},{"type":"string","name":"regulatoryHash"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Verify compliance (simplified)","events":[],"recommendations":{}},{"name":"tokenizeForTrading","args":[{"type":"string","name":"blId"},{"type":"uint64","name":"fractionalShares"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Tokenize for trading (simplified)","events":[],"recommendations":{}},{"name":"calculateYield","args":[{"type":"string","name":"blId"},{"type":"uint64","name":"investmentAmount"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Calculate yield (simplified)","events":[],"recommendations":{}},{"name":"getCounters","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get counter values","events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":2,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{"blCounter":{"keyType":"AVMString","valueType":"AVMUint64","key":"YmxDb3VudGVy"},"totalValueLocked":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxWYWx1ZUxvY2tlZA=="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[109,133,160,194,230,260,346],"errorMessage":"OnCompletion is not NoOp"},{"pc":[381],"errorMessage":"can only call when creating"},{"pc":[112,136,163,197,233,263,349],"errorMessage":"can only call when not creating"},{"pc":[441,450,618,632],"errorMessage":"check GlobalState exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiACAAEmBAQVH3x1CWJsQ291bnRlchB0b3RhbFZhbHVlTG9ja2VkA0JMIDEbQQFFggcEAr7OEQR9Af0jBJvQExAEBLMT3ATxuUCpBOm67CsEBJT5DzYaAI4HAO8AmQB7AFcANQAaAAIiQzEZFEQxGESIAelJFRZXBgJMUChMULAjQzEZFEQxGEQ2GgFXAgA2GgIXiAG+FihMULAjQzEZFEQxGEQ2GgFXAgA2GgIXiAGCSRUWVwYCTFAoTFCwI0MxGRREMRhENhoBVwIANhoCVwIAiAE/SRUWVwYCTFAoTFCwI0MxGRREMRhENhoBVwIAiAD1SRUWVwYCTFAoTFCwI0MxGRREMRhENhoBVwIANhoCFzYaAxc2GgQXNhoFFzYaBhc2GgdXAgA2GghXAgA2GglXAgA2GgpXAgA2GgtXAgA2GgxXAgCIAFRJFRZXBgJMUChMULAjQzEZFEQxGEQ2GgFXAgCIABlJFRZXBgJMUChMULAjQzEZQP7uMRgURCNDigEBgBRIZWxsbyBmcm9tIEZpbkJMVjEsIIv/UImKDAEiKWVFAUAAAykiZyIqZUUBQAADKiJnIillRCMIKUxnIiplRIv1CCpMZ4AZQ3JlYXRlZCBGaW5hbmNpYWwgQkwgZm9yIIv0UImKAQGABkZpbkJMIIv/UIAaOiBGaW5hbmNpYWwgaW5mbyBhdmFpbGFibGVQiYoCASuL/lCAFCBjb21wbGlhbmNlIHZlcmlmaWVkUImKAgEri/5QgBYgdG9rZW5pemVkIGZvciB0cmFkaW5nUImKAgGL/4EUCokiKWVFAUEABiIpZUUBRCIqZUUBQQAGIiplRQFEgBJDb3VudGVycyBhdmFpbGFibGWJ","clear":"CoEBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the NegotiableFinBlv1 contract
 */
export type NegotiableFinBlv1Args = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'hello(string)string': {
      name: string
    }
    'createFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string)string': {
      description: string
      cargoValue: bigint | number
      blType: bigint | number
      creditRating: bigint | number
      riskScore: bigint | number
      yieldRate: bigint | number
      vleiId: string
      jurisdictionCode: string
      complianceHash: string
      incoterms: string
      insurancePolicyId: string
      lcrReference: string
    }
    'getBLFinancialInfo(string)string': {
      blId: string
    }
    'verifyCompliance(string,string)string': {
      blId: string
      regulatoryHash: string
    }
    'tokenizeForTrading(string,uint64)string': {
      blId: string
      fractionalShares: bigint | number
    }
    'calculateYield(string,uint64)uint64': {
      blId: string
      investmentAmount: bigint | number
    }
    'getCounters()string': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'hello(string)string': [name: string]
    'createFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string)string': [description: string, cargoValue: bigint | number, blType: bigint | number, creditRating: bigint | number, riskScore: bigint | number, yieldRate: bigint | number, vleiId: string, jurisdictionCode: string, complianceHash: string, incoterms: string, insurancePolicyId: string, lcrReference: string]
    'getBLFinancialInfo(string)string': [blId: string]
    'verifyCompliance(string,string)string': [blId: string, regulatoryHash: string]
    'tokenizeForTrading(string,uint64)string': [blId: string, fractionalShares: bigint | number]
    'calculateYield(string,uint64)uint64': [blId: string, investmentAmount: bigint | number]
    'getCounters()string': []
  }
}

/**
 * The return type for each method
 */
export type NegotiableFinBlv1Returns = {
  'hello(string)string': string
  'createFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string)string': string
  'getBLFinancialInfo(string)string': string
  'verifyCompliance(string,string)string': string
  'tokenizeForTrading(string,uint64)string': string
  'calculateYield(string,uint64)uint64': bigint
  'getCounters()string': string
}

/**
 * Defines the types of available calls and state of the NegotiableFinBlv1 smart contract.
 */
export type NegotiableFinBlv1Types = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'hello(string)string' | 'hello', {
      argsObj: NegotiableFinBlv1Args['obj']['hello(string)string']
      argsTuple: NegotiableFinBlv1Args['tuple']['hello(string)string']
      returns: NegotiableFinBlv1Returns['hello(string)string']
    }>
    & Record<'createFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string)string' | 'createFinancialBL', {
      argsObj: NegotiableFinBlv1Args['obj']['createFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string)string']
      argsTuple: NegotiableFinBlv1Args['tuple']['createFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string)string']
      returns: NegotiableFinBlv1Returns['createFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string)string']
    }>
    & Record<'getBLFinancialInfo(string)string' | 'getBLFinancialInfo', {
      argsObj: NegotiableFinBlv1Args['obj']['getBLFinancialInfo(string)string']
      argsTuple: NegotiableFinBlv1Args['tuple']['getBLFinancialInfo(string)string']
      returns: NegotiableFinBlv1Returns['getBLFinancialInfo(string)string']
    }>
    & Record<'verifyCompliance(string,string)string' | 'verifyCompliance', {
      argsObj: NegotiableFinBlv1Args['obj']['verifyCompliance(string,string)string']
      argsTuple: NegotiableFinBlv1Args['tuple']['verifyCompliance(string,string)string']
      returns: NegotiableFinBlv1Returns['verifyCompliance(string,string)string']
    }>
    & Record<'tokenizeForTrading(string,uint64)string' | 'tokenizeForTrading', {
      argsObj: NegotiableFinBlv1Args['obj']['tokenizeForTrading(string,uint64)string']
      argsTuple: NegotiableFinBlv1Args['tuple']['tokenizeForTrading(string,uint64)string']
      returns: NegotiableFinBlv1Returns['tokenizeForTrading(string,uint64)string']
    }>
    & Record<'calculateYield(string,uint64)uint64' | 'calculateYield', {
      argsObj: NegotiableFinBlv1Args['obj']['calculateYield(string,uint64)uint64']
      argsTuple: NegotiableFinBlv1Args['tuple']['calculateYield(string,uint64)uint64']
      returns: NegotiableFinBlv1Returns['calculateYield(string,uint64)uint64']
    }>
    & Record<'getCounters()string' | 'getCounters', {
      argsObj: NegotiableFinBlv1Args['obj']['getCounters()string']
      argsTuple: NegotiableFinBlv1Args['tuple']['getCounters()string']
      returns: NegotiableFinBlv1Returns['getCounters()string']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        blCounter: bigint
        totalValueLocked: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type NegotiableFinBlv1Signatures = keyof NegotiableFinBlv1Types['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type NegotiableFinBlv1NonVoidMethodSignatures = keyof NegotiableFinBlv1Types['methods'] extends infer T ? T extends keyof NegotiableFinBlv1Types['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the NegotiableFinBlv1 smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends NegotiableFinBlv1Signatures> = NegotiableFinBlv1Types['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the NegotiableFinBlv1 smart contract to the method's return type
 */
export type MethodReturn<TSignature extends NegotiableFinBlv1Signatures> = NegotiableFinBlv1Types['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = NegotiableFinBlv1Types['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type NegotiableFinBlv1CreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type NegotiableFinBlv1DeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: NegotiableFinBlv1CreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the NegotiableFinBlv1 smart contract
 */
export abstract class NegotiableFinBlv1ParamsFactory {
  /**
   * Constructs a no op call for the hello(string)string ABI method
   *
   * Test method like HelloWorld
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static hello(params: CallParams<NegotiableFinBlv1Args['obj']['hello(string)string'] | NegotiableFinBlv1Args['tuple']['hello(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'hello(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name],
    }
  }
  /**
   * Constructs a no op call for the createFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string)string ABI method
   *
   * Create Financial BL (simplified)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createFinancialBl(params: CallParams<NegotiableFinBlv1Args['obj']['createFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string)string'] | NegotiableFinBlv1Args['tuple']['createFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.description, params.args.cargoValue, params.args.blType, params.args.creditRating, params.args.riskScore, params.args.yieldRate, params.args.vleiId, params.args.jurisdictionCode, params.args.complianceHash, params.args.incoterms, params.args.insurancePolicyId, params.args.lcrReference],
    }
  }
  /**
   * Constructs a no op call for the getBLFinancialInfo(string)string ABI method
   *
   * Get BL financial info (simplified)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getBlFinancialInfo(params: CallParams<NegotiableFinBlv1Args['obj']['getBLFinancialInfo(string)string'] | NegotiableFinBlv1Args['tuple']['getBLFinancialInfo(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getBLFinancialInfo(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.blId],
    }
  }
  /**
   * Constructs a no op call for the verifyCompliance(string,string)string ABI method
   *
   * Verify compliance (simplified)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static verifyCompliance(params: CallParams<NegotiableFinBlv1Args['obj']['verifyCompliance(string,string)string'] | NegotiableFinBlv1Args['tuple']['verifyCompliance(string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'verifyCompliance(string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.blId, params.args.regulatoryHash],
    }
  }
  /**
   * Constructs a no op call for the tokenizeForTrading(string,uint64)string ABI method
   *
   * Tokenize for trading (simplified)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static tokenizeForTrading(params: CallParams<NegotiableFinBlv1Args['obj']['tokenizeForTrading(string,uint64)string'] | NegotiableFinBlv1Args['tuple']['tokenizeForTrading(string,uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'tokenizeForTrading(string,uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.blId, params.args.fractionalShares],
    }
  }
  /**
   * Constructs a no op call for the calculateYield(string,uint64)uint64 ABI method
   *
   * Calculate yield (simplified)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static calculateYield(params: CallParams<NegotiableFinBlv1Args['obj']['calculateYield(string,uint64)uint64'] | NegotiableFinBlv1Args['tuple']['calculateYield(string,uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'calculateYield(string,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.blId, params.args.investmentAmount],
    }
  }
  /**
   * Constructs a no op call for the getCounters()string ABI method
   *
   * Get counter values
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getCounters(params: CallParams<NegotiableFinBlv1Args['obj']['getCounters()string'] | NegotiableFinBlv1Args['tuple']['getCounters()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getCounters()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the NegotiableFinBLV1 smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class NegotiableFinBlv1Factory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `NegotiableFinBlv1Factory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new NegotiableFinBlv1Client(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new NegotiableFinBlv1Client(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the NegotiableFinBLV1 smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: NegotiableFinBlv1DeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new NegotiableFinBlv1Client(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the NegotiableFinBLV1 smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the NegotiableFinBLV1 smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the NegotiableFinBLV1 smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new NegotiableFinBlv1Client(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the NegotiableFinBLV1 smart contract
 */
export class NegotiableFinBlv1Client {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `NegotiableFinBlv1Client`
   *
   * @param appClient An `AppClient` instance which has been created with the NegotiableFinBlv1 app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `NegotiableFinBlv1Client`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends NegotiableFinBlv1NonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `NegotiableFinBlv1Client` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<NegotiableFinBlv1Client> {
    return new NegotiableFinBlv1Client(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `NegotiableFinBlv1Client` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<NegotiableFinBlv1Client> {
    return new NegotiableFinBlv1Client(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the NegotiableFinBLV1 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the NegotiableFinBLV1 smart contract using the `hello(string)string` ABI method.
     *
     * Test method like HelloWorld
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    hello: (params: CallParams<NegotiableFinBlv1Args['obj']['hello(string)string'] | NegotiableFinBlv1Args['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(NegotiableFinBlv1ParamsFactory.hello(params))
    },

    /**
     * Makes a call to the NegotiableFinBLV1 smart contract using the `createFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string)string` ABI method.
     *
     * Create Financial BL (simplified)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createFinancialBl: (params: CallParams<NegotiableFinBlv1Args['obj']['createFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string)string'] | NegotiableFinBlv1Args['tuple']['createFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(NegotiableFinBlv1ParamsFactory.createFinancialBl(params))
    },

    /**
     * Makes a call to the NegotiableFinBLV1 smart contract using the `getBLFinancialInfo(string)string` ABI method.
     *
     * Get BL financial info (simplified)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getBlFinancialInfo: (params: CallParams<NegotiableFinBlv1Args['obj']['getBLFinancialInfo(string)string'] | NegotiableFinBlv1Args['tuple']['getBLFinancialInfo(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(NegotiableFinBlv1ParamsFactory.getBlFinancialInfo(params))
    },

    /**
     * Makes a call to the NegotiableFinBLV1 smart contract using the `verifyCompliance(string,string)string` ABI method.
     *
     * Verify compliance (simplified)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    verifyCompliance: (params: CallParams<NegotiableFinBlv1Args['obj']['verifyCompliance(string,string)string'] | NegotiableFinBlv1Args['tuple']['verifyCompliance(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(NegotiableFinBlv1ParamsFactory.verifyCompliance(params))
    },

    /**
     * Makes a call to the NegotiableFinBLV1 smart contract using the `tokenizeForTrading(string,uint64)string` ABI method.
     *
     * Tokenize for trading (simplified)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    tokenizeForTrading: (params: CallParams<NegotiableFinBlv1Args['obj']['tokenizeForTrading(string,uint64)string'] | NegotiableFinBlv1Args['tuple']['tokenizeForTrading(string,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(NegotiableFinBlv1ParamsFactory.tokenizeForTrading(params))
    },

    /**
     * Makes a call to the NegotiableFinBLV1 smart contract using the `calculateYield(string,uint64)uint64` ABI method.
     *
     * Calculate yield (simplified)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    calculateYield: (params: CallParams<NegotiableFinBlv1Args['obj']['calculateYield(string,uint64)uint64'] | NegotiableFinBlv1Args['tuple']['calculateYield(string,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(NegotiableFinBlv1ParamsFactory.calculateYield(params))
    },

    /**
     * Makes a call to the NegotiableFinBLV1 smart contract using the `getCounters()string` ABI method.
     *
     * Get counter values
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getCounters: (params: CallParams<NegotiableFinBlv1Args['obj']['getCounters()string'] | NegotiableFinBlv1Args['tuple']['getCounters()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(NegotiableFinBlv1ParamsFactory.getCounters(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the NegotiableFinBLV1 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the NegotiableFinBLV1 smart contract using the `hello(string)string` ABI method.
     *
     * Test method like HelloWorld
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    hello: (params: CallParams<NegotiableFinBlv1Args['obj']['hello(string)string'] | NegotiableFinBlv1Args['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(NegotiableFinBlv1ParamsFactory.hello(params))
    },

    /**
     * Makes a call to the NegotiableFinBLV1 smart contract using the `createFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string)string` ABI method.
     *
     * Create Financial BL (simplified)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createFinancialBl: (params: CallParams<NegotiableFinBlv1Args['obj']['createFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string)string'] | NegotiableFinBlv1Args['tuple']['createFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(NegotiableFinBlv1ParamsFactory.createFinancialBl(params))
    },

    /**
     * Makes a call to the NegotiableFinBLV1 smart contract using the `getBLFinancialInfo(string)string` ABI method.
     *
     * Get BL financial info (simplified)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getBlFinancialInfo: (params: CallParams<NegotiableFinBlv1Args['obj']['getBLFinancialInfo(string)string'] | NegotiableFinBlv1Args['tuple']['getBLFinancialInfo(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(NegotiableFinBlv1ParamsFactory.getBlFinancialInfo(params))
    },

    /**
     * Makes a call to the NegotiableFinBLV1 smart contract using the `verifyCompliance(string,string)string` ABI method.
     *
     * Verify compliance (simplified)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    verifyCompliance: (params: CallParams<NegotiableFinBlv1Args['obj']['verifyCompliance(string,string)string'] | NegotiableFinBlv1Args['tuple']['verifyCompliance(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(NegotiableFinBlv1ParamsFactory.verifyCompliance(params))
    },

    /**
     * Makes a call to the NegotiableFinBLV1 smart contract using the `tokenizeForTrading(string,uint64)string` ABI method.
     *
     * Tokenize for trading (simplified)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    tokenizeForTrading: (params: CallParams<NegotiableFinBlv1Args['obj']['tokenizeForTrading(string,uint64)string'] | NegotiableFinBlv1Args['tuple']['tokenizeForTrading(string,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(NegotiableFinBlv1ParamsFactory.tokenizeForTrading(params))
    },

    /**
     * Makes a call to the NegotiableFinBLV1 smart contract using the `calculateYield(string,uint64)uint64` ABI method.
     *
     * Calculate yield (simplified)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    calculateYield: (params: CallParams<NegotiableFinBlv1Args['obj']['calculateYield(string,uint64)uint64'] | NegotiableFinBlv1Args['tuple']['calculateYield(string,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(NegotiableFinBlv1ParamsFactory.calculateYield(params))
    },

    /**
     * Makes a call to the NegotiableFinBLV1 smart contract using the `getCounters()string` ABI method.
     *
     * Get counter values
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getCounters: (params: CallParams<NegotiableFinBlv1Args['obj']['getCounters()string'] | NegotiableFinBlv1Args['tuple']['getCounters()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(NegotiableFinBlv1ParamsFactory.getCounters(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the NegotiableFinBLV1 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the NegotiableFinBLV1 smart contract using the `hello(string)string` ABI method.
     *
     * Test method like HelloWorld
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    hello: async (params: CallParams<NegotiableFinBlv1Args['obj']['hello(string)string'] | NegotiableFinBlv1Args['tuple']['hello(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(NegotiableFinBlv1ParamsFactory.hello(params))
      return {...result, return: result.return as unknown as (undefined | NegotiableFinBlv1Returns['hello(string)string'])}
    },

    /**
     * Makes a call to the NegotiableFinBLV1 smart contract using the `createFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string)string` ABI method.
     *
     * Create Financial BL (simplified)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createFinancialBl: async (params: CallParams<NegotiableFinBlv1Args['obj']['createFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string)string'] | NegotiableFinBlv1Args['tuple']['createFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(NegotiableFinBlv1ParamsFactory.createFinancialBl(params))
      return {...result, return: result.return as unknown as (undefined | NegotiableFinBlv1Returns['createFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string)string'])}
    },

    /**
     * Makes a call to the NegotiableFinBLV1 smart contract using the `getBLFinancialInfo(string)string` ABI method.
     *
     * Get BL financial info (simplified)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getBlFinancialInfo: async (params: CallParams<NegotiableFinBlv1Args['obj']['getBLFinancialInfo(string)string'] | NegotiableFinBlv1Args['tuple']['getBLFinancialInfo(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(NegotiableFinBlv1ParamsFactory.getBlFinancialInfo(params))
      return {...result, return: result.return as unknown as (undefined | NegotiableFinBlv1Returns['getBLFinancialInfo(string)string'])}
    },

    /**
     * Makes a call to the NegotiableFinBLV1 smart contract using the `verifyCompliance(string,string)string` ABI method.
     *
     * Verify compliance (simplified)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    verifyCompliance: async (params: CallParams<NegotiableFinBlv1Args['obj']['verifyCompliance(string,string)string'] | NegotiableFinBlv1Args['tuple']['verifyCompliance(string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(NegotiableFinBlv1ParamsFactory.verifyCompliance(params))
      return {...result, return: result.return as unknown as (undefined | NegotiableFinBlv1Returns['verifyCompliance(string,string)string'])}
    },

    /**
     * Makes a call to the NegotiableFinBLV1 smart contract using the `tokenizeForTrading(string,uint64)string` ABI method.
     *
     * Tokenize for trading (simplified)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    tokenizeForTrading: async (params: CallParams<NegotiableFinBlv1Args['obj']['tokenizeForTrading(string,uint64)string'] | NegotiableFinBlv1Args['tuple']['tokenizeForTrading(string,uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(NegotiableFinBlv1ParamsFactory.tokenizeForTrading(params))
      return {...result, return: result.return as unknown as (undefined | NegotiableFinBlv1Returns['tokenizeForTrading(string,uint64)string'])}
    },

    /**
     * Makes a call to the NegotiableFinBLV1 smart contract using the `calculateYield(string,uint64)uint64` ABI method.
     *
     * Calculate yield (simplified)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    calculateYield: async (params: CallParams<NegotiableFinBlv1Args['obj']['calculateYield(string,uint64)uint64'] | NegotiableFinBlv1Args['tuple']['calculateYield(string,uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(NegotiableFinBlv1ParamsFactory.calculateYield(params))
      return {...result, return: result.return as unknown as (undefined | NegotiableFinBlv1Returns['calculateYield(string,uint64)uint64'])}
    },

    /**
     * Makes a call to the NegotiableFinBLV1 smart contract using the `getCounters()string` ABI method.
     *
     * Get counter values
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getCounters: async (params: CallParams<NegotiableFinBlv1Args['obj']['getCounters()string'] | NegotiableFinBlv1Args['tuple']['getCounters()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(NegotiableFinBlv1ParamsFactory.getCounters(params))
      return {...result, return: result.return as unknown as (undefined | NegotiableFinBlv1Returns['getCounters()string'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new NegotiableFinBlv1Client(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current NegotiableFinBLV1 app
   */
  state = {
    /**
     * Methods to access global state for the current NegotiableFinBLV1 app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          blCounter: result.blCounter,
          totalValueLocked: result.totalValueLocked,
        }
      },
      /**
       * Get the current value of the blCounter key in global state
       */
      blCounter: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("blCounter")) as bigint | undefined },
      /**
       * Get the current value of the totalValueLocked key in global state
       */
      totalValueLocked: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalValueLocked")) as bigint | undefined },
    },
  }

  public newGroup(): NegotiableFinBlv1Composer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a hello(string)string method call against the NegotiableFinBLV1 contract
       */
      hello(params: CallParams<NegotiableFinBlv1Args['obj']['hello(string)string'] | NegotiableFinBlv1Args['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.hello(params)))
        resultMappers.push((v) => client.decodeReturnValue('hello(string)string', v))
        return this
      },
      /**
       * Add a createFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string)string method call against the NegotiableFinBLV1 contract
       */
      createFinancialBl(params: CallParams<NegotiableFinBlv1Args['obj']['createFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string)string'] | NegotiableFinBlv1Args['tuple']['createFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createFinancialBl(params)))
        resultMappers.push((v) => client.decodeReturnValue('createFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string)string', v))
        return this
      },
      /**
       * Add a getBLFinancialInfo(string)string method call against the NegotiableFinBLV1 contract
       */
      getBlFinancialInfo(params: CallParams<NegotiableFinBlv1Args['obj']['getBLFinancialInfo(string)string'] | NegotiableFinBlv1Args['tuple']['getBLFinancialInfo(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getBlFinancialInfo(params)))
        resultMappers.push((v) => client.decodeReturnValue('getBLFinancialInfo(string)string', v))
        return this
      },
      /**
       * Add a verifyCompliance(string,string)string method call against the NegotiableFinBLV1 contract
       */
      verifyCompliance(params: CallParams<NegotiableFinBlv1Args['obj']['verifyCompliance(string,string)string'] | NegotiableFinBlv1Args['tuple']['verifyCompliance(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.verifyCompliance(params)))
        resultMappers.push((v) => client.decodeReturnValue('verifyCompliance(string,string)string', v))
        return this
      },
      /**
       * Add a tokenizeForTrading(string,uint64)string method call against the NegotiableFinBLV1 contract
       */
      tokenizeForTrading(params: CallParams<NegotiableFinBlv1Args['obj']['tokenizeForTrading(string,uint64)string'] | NegotiableFinBlv1Args['tuple']['tokenizeForTrading(string,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.tokenizeForTrading(params)))
        resultMappers.push((v) => client.decodeReturnValue('tokenizeForTrading(string,uint64)string', v))
        return this
      },
      /**
       * Add a calculateYield(string,uint64)uint64 method call against the NegotiableFinBLV1 contract
       */
      calculateYield(params: CallParams<NegotiableFinBlv1Args['obj']['calculateYield(string,uint64)uint64'] | NegotiableFinBlv1Args['tuple']['calculateYield(string,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.calculateYield(params)))
        resultMappers.push((v) => client.decodeReturnValue('calculateYield(string,uint64)uint64', v))
        return this
      },
      /**
       * Add a getCounters()string method call against the NegotiableFinBLV1 contract
       */
      getCounters(params: CallParams<NegotiableFinBlv1Args['obj']['getCounters()string'] | NegotiableFinBlv1Args['tuple']['getCounters()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getCounters(params)))
        resultMappers.push((v) => client.decodeReturnValue('getCounters()string', v))
        return this
      },
      /**
       * Add a clear state call to the NegotiableFinBLV1 contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as NegotiableFinBlv1Composer
  }
}
export type NegotiableFinBlv1Composer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the hello(string)string ABI method.
   *
   * Test method like HelloWorld
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  hello(params?: CallParams<NegotiableFinBlv1Args['obj']['hello(string)string'] | NegotiableFinBlv1Args['tuple']['hello(string)string']>): NegotiableFinBlv1Composer<[...TReturns, NegotiableFinBlv1Returns['hello(string)string'] | undefined]>

  /**
   * Calls the createFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string)string ABI method.
   *
   * Create Financial BL (simplified)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createFinancialBl(params?: CallParams<NegotiableFinBlv1Args['obj']['createFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string)string'] | NegotiableFinBlv1Args['tuple']['createFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string)string']>): NegotiableFinBlv1Composer<[...TReturns, NegotiableFinBlv1Returns['createFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string)string'] | undefined]>

  /**
   * Calls the getBLFinancialInfo(string)string ABI method.
   *
   * Get BL financial info (simplified)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getBlFinancialInfo(params?: CallParams<NegotiableFinBlv1Args['obj']['getBLFinancialInfo(string)string'] | NegotiableFinBlv1Args['tuple']['getBLFinancialInfo(string)string']>): NegotiableFinBlv1Composer<[...TReturns, NegotiableFinBlv1Returns['getBLFinancialInfo(string)string'] | undefined]>

  /**
   * Calls the verifyCompliance(string,string)string ABI method.
   *
   * Verify compliance (simplified)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  verifyCompliance(params?: CallParams<NegotiableFinBlv1Args['obj']['verifyCompliance(string,string)string'] | NegotiableFinBlv1Args['tuple']['verifyCompliance(string,string)string']>): NegotiableFinBlv1Composer<[...TReturns, NegotiableFinBlv1Returns['verifyCompliance(string,string)string'] | undefined]>

  /**
   * Calls the tokenizeForTrading(string,uint64)string ABI method.
   *
   * Tokenize for trading (simplified)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  tokenizeForTrading(params?: CallParams<NegotiableFinBlv1Args['obj']['tokenizeForTrading(string,uint64)string'] | NegotiableFinBlv1Args['tuple']['tokenizeForTrading(string,uint64)string']>): NegotiableFinBlv1Composer<[...TReturns, NegotiableFinBlv1Returns['tokenizeForTrading(string,uint64)string'] | undefined]>

  /**
   * Calls the calculateYield(string,uint64)uint64 ABI method.
   *
   * Calculate yield (simplified)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculateYield(params?: CallParams<NegotiableFinBlv1Args['obj']['calculateYield(string,uint64)uint64'] | NegotiableFinBlv1Args['tuple']['calculateYield(string,uint64)uint64']>): NegotiableFinBlv1Composer<[...TReturns, NegotiableFinBlv1Returns['calculateYield(string,uint64)uint64'] | undefined]>

  /**
   * Calls the getCounters()string ABI method.
   *
   * Get counter values
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getCounters(params?: CallParams<NegotiableFinBlv1Args['obj']['getCounters()string'] | NegotiableFinBlv1Args['tuple']['getCounters()string']>): NegotiableFinBlv1Composer<[...TReturns, NegotiableFinBlv1Returns['getCounters()string'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the NegotiableFinBLV1 smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): NegotiableFinBlv1Composer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): NegotiableFinBlv1Composer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<NegotiableFinBlv1ComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<NegotiableFinBlv1ComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<NegotiableFinBlv1ComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<NegotiableFinBlv1ComposerResults<TReturns>>
}
export type NegotiableFinBlv1ComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

