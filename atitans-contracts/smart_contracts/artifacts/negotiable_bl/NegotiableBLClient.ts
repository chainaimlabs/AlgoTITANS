/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"NegotiableBL","structs":{},"methods":[{"name":"hello","args":[{"type":"string","name":"name"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Simple hello method for testing","events":[],"recommendations":{}},{"name":"createBL","args":[{"type":"string","name":"description"},{"type":"string","name":"price"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Create a new Bill of Lading (simplified version)","events":[],"recommendations":{}},{"name":"listBL","args":[{"type":"string","name":"blId"},{"type":"string","name":"price"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"List BL for sale","events":[],"recommendations":{}},{"name":"transferBL","args":[{"type":"string","name":"blId"},{"type":"string","name":"newOwner"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Transfer BL ownership","events":[],"recommendations":{}},{"name":"getInfo","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get contract info","events":[],"recommendations":{}}],"arcs":[22,28],"desc":"AlgoTITANS Negotiable Bill of Lading Smart Contract\nCreates NFT-based Bills of Lading for Real World Assets","networks":{},"state":{"schema":{"global":{"ints":0,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[70,139,175,211,247],"errorMessage":"OnCompletion is not NoOp"},{"pc":[282],"errorMessage":"can only call when creating"},{"pc":[73,142,178,214,250],"errorMessage":"can only call when not creating"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMQogICAgYnl0ZWNibG9jayAweDE1MWY3Yzc1ICIgQUxHTyIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9uZWdvdGlhYmxlX2JsL2NvbnRyYWN0LmFsZ28udHM6NwogICAgLy8gZXhwb3J0IGNsYXNzIE5lZ290aWFibGVCTCBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBtYWluX2JhcmVfcm91dGluZ0AxMAogICAgcHVzaGJ5dGVzcyAweDAyYmVjZTExIDB4Y2Q2OGJiNmYgMHgxMjVlMTQ5MCAweDc2MGE2MmQxIDB4M2QwODAyYTMgLy8gbWV0aG9kICJoZWxsbyhzdHJpbmcpc3RyaW5nIiwgbWV0aG9kICJjcmVhdGVCTChzdHJpbmcsc3RyaW5nKXN0cmluZyIsIG1ldGhvZCAibGlzdEJMKHN0cmluZyxzdHJpbmcpc3RyaW5nIiwgbWV0aG9kICJ0cmFuc2ZlckJMKHN0cmluZyxzdHJpbmcpc3RyaW5nIiwgbWV0aG9kICJnZXRJbmZvKClzdHJpbmciCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBtYWluX2hlbGxvX3JvdXRlQDMgbWFpbl9jcmVhdGVCTF9yb3V0ZUA0IG1haW5fbGlzdEJMX3JvdXRlQDUgbWFpbl90cmFuc2ZlckJMX3JvdXRlQDYgbWFpbl9nZXRJbmZvX3JvdXRlQDcKCm1haW5fYWZ0ZXJfaWZfZWxzZUAxNDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9uZWdvdGlhYmxlX2JsL2NvbnRyYWN0LmFsZ28udHM6NwogICAgLy8gZXhwb3J0IGNsYXNzIE5lZ290aWFibGVCTCBleHRlbmRzIENvbnRyYWN0IHsKICAgIHB1c2hpbnQgMCAvLyAwCiAgICByZXR1cm4KCm1haW5fZ2V0SW5mb19yb3V0ZUA3OgogICAgLy8gc21hcnRfY29udHJhY3RzL25lZ290aWFibGVfYmwvY29udHJhY3QuYWxnby50czozOQogICAgLy8gZ2V0SW5mbygpOiBzdHJpbmcgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBwdXNoYnl0ZXMgMHgxNTFmN2M3NTAwMzM0MTZjNjc2ZjU0NDk1NDQxNGU1MzIwNGU2NTY3NmY3NDY5NjE2MjZjNjUyMDQyNjk2YzZjNzMyMDZmNjYyMDRjNjE2NDY5NmU2NzIwNDM2ZjZlNzQ3MjYxNjM3NDIwNzYzMTJlMzAKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl90cmFuc2ZlckJMX3JvdXRlQDY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvbmVnb3RpYWJsZV9ibC9jb250cmFjdC5hbGdvLnRzOjMyCiAgICAvLyB0cmFuc2ZlckJMKGJsSWQ6IHN0cmluZywgbmV3T3duZXI6IHN0cmluZyk6IHN0cmluZyB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9uZWdvdGlhYmxlX2JsL2NvbnRyYWN0LmFsZ28udHM6NwogICAgLy8gZXhwb3J0IGNsYXNzIE5lZ290aWFibGVCTCBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGV4dHJhY3QgMiAwCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICBleHRyYWN0IDIgMAogICAgLy8gc21hcnRfY29udHJhY3RzL25lZ290aWFibGVfYmwvY29udHJhY3QuYWxnby50czozMgogICAgLy8gdHJhbnNmZXJCTChibElkOiBzdHJpbmcsIG5ld093bmVyOiBzdHJpbmcpOiBzdHJpbmcgewogICAgY2FsbHN1YiB0cmFuc2ZlckJMCiAgICBkdXAKICAgIGxlbgogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9saXN0Qkxfcm91dGVANToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9uZWdvdGlhYmxlX2JsL2NvbnRyYWN0LmFsZ28udHM6MjUKICAgIC8vIGxpc3RCTChibElkOiBzdHJpbmcsIHByaWNlOiBzdHJpbmcpOiBzdHJpbmcgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvbmVnb3RpYWJsZV9ibC9jb250cmFjdC5hbGdvLnRzOjcKICAgIC8vIGV4cG9ydCBjbGFzcyBOZWdvdGlhYmxlQkwgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBleHRyYWN0IDIgMAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgZXh0cmFjdCAyIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9uZWdvdGlhYmxlX2JsL2NvbnRyYWN0LmFsZ28udHM6MjUKICAgIC8vIGxpc3RCTChibElkOiBzdHJpbmcsIHByaWNlOiBzdHJpbmcpOiBzdHJpbmcgewogICAgY2FsbHN1YiBsaXN0QkwKICAgIGR1cAogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgY29uY2F0CiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2NyZWF0ZUJMX3JvdXRlQDQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvbmVnb3RpYWJsZV9ibC9jb250cmFjdC5hbGdvLnRzOjE4CiAgICAvLyBjcmVhdGVCTChkZXNjcmlwdGlvbjogc3RyaW5nLCBwcmljZTogc3RyaW5nKTogc3RyaW5nIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL25lZ290aWFibGVfYmwvY29udHJhY3QuYWxnby50czo3CiAgICAvLyBleHBvcnQgY2xhc3MgTmVnb3RpYWJsZUJMIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgZXh0cmFjdCAyIDAKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIGV4dHJhY3QgMiAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvbmVnb3RpYWJsZV9ibC9jb250cmFjdC5hbGdvLnRzOjE4CiAgICAvLyBjcmVhdGVCTChkZXNjcmlwdGlvbjogc3RyaW5nLCBwcmljZTogc3RyaW5nKTogc3RyaW5nIHsKICAgIGNhbGxzdWIgY3JlYXRlQkwKICAgIGR1cAogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgY29uY2F0CiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2hlbGxvX3JvdXRlQDM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvbmVnb3RpYWJsZV9ibC9jb250cmFjdC5hbGdvLnRzOjExCiAgICAvLyBoZWxsbyhuYW1lOiBzdHJpbmcpOiBzdHJpbmcgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvbmVnb3RpYWJsZV9ibC9jb250cmFjdC5hbGdvLnRzOjcKICAgIC8vIGV4cG9ydCBjbGFzcyBOZWdvdGlhYmxlQkwgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBleHRyYWN0IDIgMAogICAgLy8gc21hcnRfY29udHJhY3RzL25lZ290aWFibGVfYmwvY29udHJhY3QuYWxnby50czoxMQogICAgLy8gaGVsbG8obmFtZTogc3RyaW5nKTogc3RyaW5nIHsKICAgIGNhbGxzdWIgaGVsbG8KICAgIGR1cAogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgY29uY2F0CiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2JhcmVfcm91dGluZ0AxMDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9uZWdvdGlhYmxlX2JsL2NvbnRyYWN0LmFsZ28udHM6NwogICAgLy8gZXhwb3J0IGNsYXNzIE5lZ290aWFibGVCTCBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIGJueiBtYWluX2FmdGVyX2lmX2Vsc2VAMTQKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAhCiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIGNyZWF0aW5nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgoKLy8gc21hcnRfY29udHJhY3RzL25lZ290aWFibGVfYmwvY29udHJhY3QuYWxnby50czo6TmVnb3RpYWJsZUJMLmhlbGxvKG5hbWU6IGJ5dGVzKSAtPiBieXRlczoKaGVsbG86CiAgICAvLyBzbWFydF9jb250cmFjdHMvbmVnb3RpYWJsZV9ibC9jb250cmFjdC5hbGdvLnRzOjExCiAgICAvLyBoZWxsbyhuYW1lOiBzdHJpbmcpOiBzdHJpbmcgewogICAgcHJvdG8gMSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvbmVnb3RpYWJsZV9ibC9jb250cmFjdC5hbGdvLnRzOjEyCiAgICAvLyByZXR1cm4gYEhlbGxvIGZyb20gQWxnb1RJVEFOUywgJHtuYW1lfSFgCiAgICBwdXNoYnl0ZXMgIkhlbGxvIGZyb20gQWxnb1RJVEFOUywgIgogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIHB1c2hieXRlcyAiISIKICAgIGNvbmNhdAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL25lZ290aWFibGVfYmwvY29udHJhY3QuYWxnby50czo6TmVnb3RpYWJsZUJMLmNyZWF0ZUJMKGRlc2NyaXB0aW9uOiBieXRlcywgcHJpY2U6IGJ5dGVzKSAtPiBieXRlczoKY3JlYXRlQkw6CiAgICAvLyBzbWFydF9jb250cmFjdHMvbmVnb3RpYWJsZV9ibC9jb250cmFjdC5hbGdvLnRzOjE4CiAgICAvLyBjcmVhdGVCTChkZXNjcmlwdGlvbjogc3RyaW5nLCBwcmljZTogc3RyaW5nKTogc3RyaW5nIHsKICAgIHByb3RvIDIgMQogICAgLy8gc21hcnRfY29udHJhY3RzL25lZ290aWFibGVfYmwvY29udHJhY3QuYWxnby50czoxOQogICAgLy8gcmV0dXJuIGBDcmVhdGVkIEJMOiAke2Rlc2NyaXB0aW9ufSBmb3IgJHtwcmljZX0gQUxHT2AKICAgIHB1c2hieXRlcyAiQ3JlYXRlZCBCTDogIgogICAgZnJhbWVfZGlnIC0yCiAgICBjb25jYXQKICAgIHB1c2hieXRlcyAiIGZvciAiCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICBieXRlY18xIC8vICIgQUxHTyIKICAgIGNvbmNhdAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL25lZ290aWFibGVfYmwvY29udHJhY3QuYWxnby50czo6TmVnb3RpYWJsZUJMLmxpc3RCTChibElkOiBieXRlcywgcHJpY2U6IGJ5dGVzKSAtPiBieXRlczoKbGlzdEJMOgogICAgLy8gc21hcnRfY29udHJhY3RzL25lZ290aWFibGVfYmwvY29udHJhY3QuYWxnby50czoyNQogICAgLy8gbGlzdEJMKGJsSWQ6IHN0cmluZywgcHJpY2U6IHN0cmluZyk6IHN0cmluZyB7CiAgICBwcm90byAyIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9uZWdvdGlhYmxlX2JsL2NvbnRyYWN0LmFsZ28udHM6MjYKICAgIC8vIHJldHVybiBgTGlzdGVkIEJMICR7YmxJZH0gZm9yIHNhbGUgYXQgJHtwcmljZX0gQUxHT2AKICAgIHB1c2hieXRlcyAiTGlzdGVkIEJMICIKICAgIGZyYW1lX2RpZyAtMgogICAgY29uY2F0CiAgICBwdXNoYnl0ZXMgIiBmb3Igc2FsZSBhdCAiCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICBieXRlY18xIC8vICIgQUxHTyIKICAgIGNvbmNhdAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL25lZ290aWFibGVfYmwvY29udHJhY3QuYWxnby50czo6TmVnb3RpYWJsZUJMLnRyYW5zZmVyQkwoYmxJZDogYnl0ZXMsIG5ld093bmVyOiBieXRlcykgLT4gYnl0ZXM6CnRyYW5zZmVyQkw6CiAgICAvLyBzbWFydF9jb250cmFjdHMvbmVnb3RpYWJsZV9ibC9jb250cmFjdC5hbGdvLnRzOjMyCiAgICAvLyB0cmFuc2ZlckJMKGJsSWQ6IHN0cmluZywgbmV3T3duZXI6IHN0cmluZyk6IHN0cmluZyB7CiAgICBwcm90byAyIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9uZWdvdGlhYmxlX2JsL2NvbnRyYWN0LmFsZ28udHM6MzMKICAgIC8vIHJldHVybiBgVHJhbnNmZXJyZWQgQkwgJHtibElkfSB0byAke25ld093bmVyfWAKICAgIHB1c2hieXRlcyAiVHJhbnNmZXJyZWQgQkwgIgogICAgZnJhbWVfZGlnIC0yCiAgICBjb25jYXQKICAgIHB1c2hieXRlcyAiIHRvICIKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIHJldHN1Ygo=","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiABASYCBBUffHUFIEFMR08xG0EA/IIFBAK+zhEEzWi7bwQSXhSQBHYKYtEEPQgCozYaAI4FALQAkABsAEgAA4EAQzEZFEQxGESAORUffHUAM0FsZ29USVRBTlMgTmVnb3RpYWJsZSBCaWxscyBvZiBMYWRpbmcgQ29udHJhY3QgdjEuMLAiQzEZFEQxGEQ2GgFXAgA2GgJXAgCIAO1JFRZXBgJMUChMULAiQzEZFEQxGEQ2GgFXAgA2GgJXAgCIAKFJFRZXBgJMUChMULAiQzEZFEQxGEQ2GgFXAgA2GgJXAgCIAFtJFRZXBgJMUChMULAiQzEZFEQxGEQ2GgFXAgCIABlJFRZXBgJMUChMULAiQzEZQP8pMRgURCJDigEBgBdIZWxsbyBmcm9tIEFsZ29USVRBTlMsIIv/UIABIVCJigIBgAxDcmVhdGVkIEJMOiCL/lCABSBmb3IgUIv/UClQiYoCAYAKTGlzdGVkIEJMIIv+UIANIGZvciBzYWxlIGF0IFCL/1ApUImKAgGAD1RyYW5zZmVycmVkIEJMIIv+UIAEIHRvIFCL/1CJ","clear":"CoEBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the NegotiableBl contract
 */
export type NegotiableBlArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'hello(string)string': {
      name: string
    }
    'createBL(string,string)string': {
      description: string
      price: string
    }
    'listBL(string,string)string': {
      blId: string
      price: string
    }
    'transferBL(string,string)string': {
      blId: string
      newOwner: string
    }
    'getInfo()string': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'hello(string)string': [name: string]
    'createBL(string,string)string': [description: string, price: string]
    'listBL(string,string)string': [blId: string, price: string]
    'transferBL(string,string)string': [blId: string, newOwner: string]
    'getInfo()string': []
  }
}

/**
 * The return type for each method
 */
export type NegotiableBlReturns = {
  'hello(string)string': string
  'createBL(string,string)string': string
  'listBL(string,string)string': string
  'transferBL(string,string)string': string
  'getInfo()string': string
}

/**
 * Defines the types of available calls and state of the NegotiableBl smart contract.
 */
export type NegotiableBlTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'hello(string)string' | 'hello', {
      argsObj: NegotiableBlArgs['obj']['hello(string)string']
      argsTuple: NegotiableBlArgs['tuple']['hello(string)string']
      returns: NegotiableBlReturns['hello(string)string']
    }>
    & Record<'createBL(string,string)string' | 'createBL', {
      argsObj: NegotiableBlArgs['obj']['createBL(string,string)string']
      argsTuple: NegotiableBlArgs['tuple']['createBL(string,string)string']
      returns: NegotiableBlReturns['createBL(string,string)string']
    }>
    & Record<'listBL(string,string)string' | 'listBL', {
      argsObj: NegotiableBlArgs['obj']['listBL(string,string)string']
      argsTuple: NegotiableBlArgs['tuple']['listBL(string,string)string']
      returns: NegotiableBlReturns['listBL(string,string)string']
    }>
    & Record<'transferBL(string,string)string' | 'transferBL', {
      argsObj: NegotiableBlArgs['obj']['transferBL(string,string)string']
      argsTuple: NegotiableBlArgs['tuple']['transferBL(string,string)string']
      returns: NegotiableBlReturns['transferBL(string,string)string']
    }>
    & Record<'getInfo()string' | 'getInfo', {
      argsObj: NegotiableBlArgs['obj']['getInfo()string']
      argsTuple: NegotiableBlArgs['tuple']['getInfo()string']
      returns: NegotiableBlReturns['getInfo()string']
    }>
}

/**
 * Defines the possible abi call signatures.
 */
export type NegotiableBlSignatures = keyof NegotiableBlTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type NegotiableBlNonVoidMethodSignatures = keyof NegotiableBlTypes['methods'] extends infer T ? T extends keyof NegotiableBlTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the NegotiableBl smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends NegotiableBlSignatures> = NegotiableBlTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the NegotiableBl smart contract to the method's return type
 */
export type MethodReturn<TSignature extends NegotiableBlSignatures> = NegotiableBlTypes['methods'][TSignature]['returns']


/**
 * Defines supported create method params for this smart contract
 */
export type NegotiableBlCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type NegotiableBlDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: NegotiableBlCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the NegotiableBl smart contract
 */
export abstract class NegotiableBlParamsFactory {
  /**
   * Constructs a no op call for the hello(string)string ABI method
   *
   * Simple hello method for testing
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static hello(params: CallParams<NegotiableBlArgs['obj']['hello(string)string'] | NegotiableBlArgs['tuple']['hello(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'hello(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name],
    }
  }
  /**
   * Constructs a no op call for the createBL(string,string)string ABI method
   *
   * Create a new Bill of Lading (simplified version)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createBl(params: CallParams<NegotiableBlArgs['obj']['createBL(string,string)string'] | NegotiableBlArgs['tuple']['createBL(string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createBL(string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.description, params.args.price],
    }
  }
  /**
   * Constructs a no op call for the listBL(string,string)string ABI method
   *
   * List BL for sale
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static listBl(params: CallParams<NegotiableBlArgs['obj']['listBL(string,string)string'] | NegotiableBlArgs['tuple']['listBL(string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'listBL(string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.blId, params.args.price],
    }
  }
  /**
   * Constructs a no op call for the transferBL(string,string)string ABI method
   *
   * Transfer BL ownership
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static transferBl(params: CallParams<NegotiableBlArgs['obj']['transferBL(string,string)string'] | NegotiableBlArgs['tuple']['transferBL(string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'transferBL(string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.blId, params.args.newOwner],
    }
  }
  /**
   * Constructs a no op call for the getInfo()string ABI method
   *
   * Get contract info
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getInfo(params: CallParams<NegotiableBlArgs['obj']['getInfo()string'] | NegotiableBlArgs['tuple']['getInfo()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getInfo()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the NegotiableBL smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class NegotiableBlFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `NegotiableBlFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new NegotiableBlClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new NegotiableBlClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the NegotiableBL smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: NegotiableBlDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new NegotiableBlClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the NegotiableBL smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the NegotiableBL smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the NegotiableBL smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new NegotiableBlClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the NegotiableBL smart contract
 */
export class NegotiableBlClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `NegotiableBlClient`
   *
   * @param appClient An `AppClient` instance which has been created with the NegotiableBl app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `NegotiableBlClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends NegotiableBlNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `NegotiableBlClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<NegotiableBlClient> {
    return new NegotiableBlClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `NegotiableBlClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<NegotiableBlClient> {
    return new NegotiableBlClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the NegotiableBL smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the NegotiableBL smart contract using the `hello(string)string` ABI method.
     *
     * Simple hello method for testing
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    hello: (params: CallParams<NegotiableBlArgs['obj']['hello(string)string'] | NegotiableBlArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(NegotiableBlParamsFactory.hello(params))
    },

    /**
     * Makes a call to the NegotiableBL smart contract using the `createBL(string,string)string` ABI method.
     *
     * Create a new Bill of Lading (simplified version)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createBl: (params: CallParams<NegotiableBlArgs['obj']['createBL(string,string)string'] | NegotiableBlArgs['tuple']['createBL(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(NegotiableBlParamsFactory.createBl(params))
    },

    /**
     * Makes a call to the NegotiableBL smart contract using the `listBL(string,string)string` ABI method.
     *
     * List BL for sale
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    listBl: (params: CallParams<NegotiableBlArgs['obj']['listBL(string,string)string'] | NegotiableBlArgs['tuple']['listBL(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(NegotiableBlParamsFactory.listBl(params))
    },

    /**
     * Makes a call to the NegotiableBL smart contract using the `transferBL(string,string)string` ABI method.
     *
     * Transfer BL ownership
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    transferBl: (params: CallParams<NegotiableBlArgs['obj']['transferBL(string,string)string'] | NegotiableBlArgs['tuple']['transferBL(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(NegotiableBlParamsFactory.transferBl(params))
    },

    /**
     * Makes a call to the NegotiableBL smart contract using the `getInfo()string` ABI method.
     *
     * Get contract info
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getInfo: (params: CallParams<NegotiableBlArgs['obj']['getInfo()string'] | NegotiableBlArgs['tuple']['getInfo()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(NegotiableBlParamsFactory.getInfo(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the NegotiableBL smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the NegotiableBL smart contract using the `hello(string)string` ABI method.
     *
     * Simple hello method for testing
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    hello: (params: CallParams<NegotiableBlArgs['obj']['hello(string)string'] | NegotiableBlArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(NegotiableBlParamsFactory.hello(params))
    },

    /**
     * Makes a call to the NegotiableBL smart contract using the `createBL(string,string)string` ABI method.
     *
     * Create a new Bill of Lading (simplified version)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createBl: (params: CallParams<NegotiableBlArgs['obj']['createBL(string,string)string'] | NegotiableBlArgs['tuple']['createBL(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(NegotiableBlParamsFactory.createBl(params))
    },

    /**
     * Makes a call to the NegotiableBL smart contract using the `listBL(string,string)string` ABI method.
     *
     * List BL for sale
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    listBl: (params: CallParams<NegotiableBlArgs['obj']['listBL(string,string)string'] | NegotiableBlArgs['tuple']['listBL(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(NegotiableBlParamsFactory.listBl(params))
    },

    /**
     * Makes a call to the NegotiableBL smart contract using the `transferBL(string,string)string` ABI method.
     *
     * Transfer BL ownership
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    transferBl: (params: CallParams<NegotiableBlArgs['obj']['transferBL(string,string)string'] | NegotiableBlArgs['tuple']['transferBL(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(NegotiableBlParamsFactory.transferBl(params))
    },

    /**
     * Makes a call to the NegotiableBL smart contract using the `getInfo()string` ABI method.
     *
     * Get contract info
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getInfo: (params: CallParams<NegotiableBlArgs['obj']['getInfo()string'] | NegotiableBlArgs['tuple']['getInfo()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(NegotiableBlParamsFactory.getInfo(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the NegotiableBL smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the NegotiableBL smart contract using the `hello(string)string` ABI method.
     *
     * Simple hello method for testing
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    hello: async (params: CallParams<NegotiableBlArgs['obj']['hello(string)string'] | NegotiableBlArgs['tuple']['hello(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(NegotiableBlParamsFactory.hello(params))
      return {...result, return: result.return as unknown as (undefined | NegotiableBlReturns['hello(string)string'])}
    },

    /**
     * Makes a call to the NegotiableBL smart contract using the `createBL(string,string)string` ABI method.
     *
     * Create a new Bill of Lading (simplified version)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createBl: async (params: CallParams<NegotiableBlArgs['obj']['createBL(string,string)string'] | NegotiableBlArgs['tuple']['createBL(string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(NegotiableBlParamsFactory.createBl(params))
      return {...result, return: result.return as unknown as (undefined | NegotiableBlReturns['createBL(string,string)string'])}
    },

    /**
     * Makes a call to the NegotiableBL smart contract using the `listBL(string,string)string` ABI method.
     *
     * List BL for sale
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    listBl: async (params: CallParams<NegotiableBlArgs['obj']['listBL(string,string)string'] | NegotiableBlArgs['tuple']['listBL(string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(NegotiableBlParamsFactory.listBl(params))
      return {...result, return: result.return as unknown as (undefined | NegotiableBlReturns['listBL(string,string)string'])}
    },

    /**
     * Makes a call to the NegotiableBL smart contract using the `transferBL(string,string)string` ABI method.
     *
     * Transfer BL ownership
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    transferBl: async (params: CallParams<NegotiableBlArgs['obj']['transferBL(string,string)string'] | NegotiableBlArgs['tuple']['transferBL(string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(NegotiableBlParamsFactory.transferBl(params))
      return {...result, return: result.return as unknown as (undefined | NegotiableBlReturns['transferBL(string,string)string'])}
    },

    /**
     * Makes a call to the NegotiableBL smart contract using the `getInfo()string` ABI method.
     *
     * Get contract info
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getInfo: async (params: CallParams<NegotiableBlArgs['obj']['getInfo()string'] | NegotiableBlArgs['tuple']['getInfo()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(NegotiableBlParamsFactory.getInfo(params))
      return {...result, return: result.return as unknown as (undefined | NegotiableBlReturns['getInfo()string'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new NegotiableBlClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current NegotiableBL app
   */
  state = {
  }

  public newGroup(): NegotiableBlComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a hello(string)string method call against the NegotiableBL contract
       */
      hello(params: CallParams<NegotiableBlArgs['obj']['hello(string)string'] | NegotiableBlArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.hello(params)))
        resultMappers.push((v) => client.decodeReturnValue('hello(string)string', v))
        return this
      },
      /**
       * Add a createBL(string,string)string method call against the NegotiableBL contract
       */
      createBl(params: CallParams<NegotiableBlArgs['obj']['createBL(string,string)string'] | NegotiableBlArgs['tuple']['createBL(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createBl(params)))
        resultMappers.push((v) => client.decodeReturnValue('createBL(string,string)string', v))
        return this
      },
      /**
       * Add a listBL(string,string)string method call against the NegotiableBL contract
       */
      listBl(params: CallParams<NegotiableBlArgs['obj']['listBL(string,string)string'] | NegotiableBlArgs['tuple']['listBL(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.listBl(params)))
        resultMappers.push((v) => client.decodeReturnValue('listBL(string,string)string', v))
        return this
      },
      /**
       * Add a transferBL(string,string)string method call against the NegotiableBL contract
       */
      transferBl(params: CallParams<NegotiableBlArgs['obj']['transferBL(string,string)string'] | NegotiableBlArgs['tuple']['transferBL(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.transferBl(params)))
        resultMappers.push((v) => client.decodeReturnValue('transferBL(string,string)string', v))
        return this
      },
      /**
       * Add a getInfo()string method call against the NegotiableBL contract
       */
      getInfo(params: CallParams<NegotiableBlArgs['obj']['getInfo()string'] | NegotiableBlArgs['tuple']['getInfo()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getInfo(params)))
        resultMappers.push((v) => client.decodeReturnValue('getInfo()string', v))
        return this
      },
      /**
       * Add a clear state call to the NegotiableBL contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as NegotiableBlComposer
  }
}
export type NegotiableBlComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the hello(string)string ABI method.
   *
   * Simple hello method for testing
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  hello(params?: CallParams<NegotiableBlArgs['obj']['hello(string)string'] | NegotiableBlArgs['tuple']['hello(string)string']>): NegotiableBlComposer<[...TReturns, NegotiableBlReturns['hello(string)string'] | undefined]>

  /**
   * Calls the createBL(string,string)string ABI method.
   *
   * Create a new Bill of Lading (simplified version)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createBl(params?: CallParams<NegotiableBlArgs['obj']['createBL(string,string)string'] | NegotiableBlArgs['tuple']['createBL(string,string)string']>): NegotiableBlComposer<[...TReturns, NegotiableBlReturns['createBL(string,string)string'] | undefined]>

  /**
   * Calls the listBL(string,string)string ABI method.
   *
   * List BL for sale
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  listBl(params?: CallParams<NegotiableBlArgs['obj']['listBL(string,string)string'] | NegotiableBlArgs['tuple']['listBL(string,string)string']>): NegotiableBlComposer<[...TReturns, NegotiableBlReturns['listBL(string,string)string'] | undefined]>

  /**
   * Calls the transferBL(string,string)string ABI method.
   *
   * Transfer BL ownership
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  transferBl(params?: CallParams<NegotiableBlArgs['obj']['transferBL(string,string)string'] | NegotiableBlArgs['tuple']['transferBL(string,string)string']>): NegotiableBlComposer<[...TReturns, NegotiableBlReturns['transferBL(string,string)string'] | undefined]>

  /**
   * Calls the getInfo()string ABI method.
   *
   * Get contract info
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getInfo(params?: CallParams<NegotiableBlArgs['obj']['getInfo()string'] | NegotiableBlArgs['tuple']['getInfo()string']>): NegotiableBlComposer<[...TReturns, NegotiableBlReturns['getInfo()string'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the NegotiableBL smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): NegotiableBlComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): NegotiableBlComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<NegotiableBlComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<NegotiableBlComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<NegotiableBlComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<NegotiableBlComposerResults<TReturns>>
}
export type NegotiableBlComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

