{
  "version": 3,
  "sources": [
    "C:/SATHYA/CHAINAIM3003/mcp-servers/altry/atry2/atitans1/projects/atitans1-contracts/smart_contracts/negotiable_fin_bl_v2/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAwJE;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAnJF;;;AAAA;;;AAAA;;;AAAA;AAmJE;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AA/IF;;;AAAA;;;AAAA;;;AAAA;AA+IE;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AA3IF;;;AAAA;;;AAAA;;;AAAA;;;AA2IE;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAvIF;;;AAAA;;;AAuIE;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AA/EF;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AA+EE;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AA9CA;;AAAA;AAAA;AAAA;;AAAA;AAnBF;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;;;AAmBE;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAZF;;;AAAA;;;AAYE;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAZF;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAYE;;;AACS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AAAP;AAMF;;;AAjBA;AAAA;AAqCsB;AAAA;;AAAhB;;;AArCN;AAsC2B;AAAvB;AArCJ;AAAA;AAwC6B;AAAA;;AAAvB;;;AAxCN;AAyCkC;AAA9B;AAtCJ;AAAA;AAyC2B;AAAA;;AAArB;;;AAzCN;AA0CgC;AAA5B;AA9CJ;AAAA;AAAA;AAAA;AAkDgD;AAAvB;AAlDzB;AAkDE;AAAA;AAlDF;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAqDgC;;AAAA;AArDhC;AAqDE;AAAA;AAlDF;AAAA;AAAA;AAAA;AAmD0D;AAA5B;AAnD9B;AAmDE;AAAA;AAEA;AAoBF;;;AAEQ;;AAAuC;;AAAnB;AAC1B;AAqDF;;;AACS;;;;;;;;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAP;AAGF;;;AACS;;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAP;AAGF;;;AACS;;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAP;AAGF;;;AAES;;AAAmB;;AAAnB;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0"
    },
    "5": {
      "op": "bytecblock 0x151f7c75 \"blCounter\" \"totalValueLocked\" \"totalBLsActive\" \"BL \""
    },
    "58": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "60": {
      "op": "bz main_bare_routing@21",
      "stack_out": []
    },
    "63": {
      "op": "pushbytess 0x02bece11 0x4d688a8d 0xecca8f40 0x3018a1b4 0x0f7b2c58 0xcb2a5596 0xe88a18d7 0x53edd666 0xbdceee97 0xfb0b4e63 0x6be9eb2c 0x9bd01310 0x04b313dc 0xf1b940a9 0xe9baec2b 0x0494f90f // method \"hello(string)string\", method \"createEnhancedFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string,uint64,uint64,string)uint64\", method \"getEnhancedBLInfo(uint64)string\", method \"fractionalizeForTrading(uint64,uint64,uint64)string\", method \"calculateEnhancedYield(uint64,uint64,uint64)uint64\", method \"verifyEnhancedCompliance(uint64,string,string)string\", method \"initiateCrossBorderSettlement(uint64,uint64,uint64,string)string\", method \"getEnhancedCounters()string\", method \"setMarketplaceContract(string)string\", method \"getUserPortfolio(string)string\", method \"generateAuditTrail(uint64)string\", method \"getBLFinancialInfo(string)string\", method \"verifyCompliance(string,string)string\", method \"tokenizeForTrading(string,uint64)string\", method \"calculateYield(string,uint64)uint64\", method \"getCounters()string\"",
      "defined_out": [
        "Method(calculateEnhancedYield(uint64,uint64,uint64)uint64)",
        "Method(calculateYield(string,uint64)uint64)",
        "Method(createEnhancedFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string,uint64,uint64,string)uint64)",
        "Method(fractionalizeForTrading(uint64,uint64,uint64)string)",
        "Method(generateAuditTrail(uint64)string)",
        "Method(getBLFinancialInfo(string)string)",
        "Method(getCounters()string)",
        "Method(getEnhancedBLInfo(uint64)string)",
        "Method(getEnhancedCounters()string)",
        "Method(getUserPortfolio(string)string)",
        "Method(hello(string)string)",
        "Method(initiateCrossBorderSettlement(uint64,uint64,uint64,string)string)",
        "Method(setMarketplaceContract(string)string)",
        "Method(tokenizeForTrading(string,uint64)string)",
        "Method(verifyCompliance(string,string)string)",
        "Method(verifyEnhancedCompliance(uint64,string,string)string)"
      ],
      "stack_out": [
        "Method(hello(string)string)",
        "Method(createEnhancedFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string,uint64,uint64,string)uint64)",
        "Method(getEnhancedBLInfo(uint64)string)",
        "Method(fractionalizeForTrading(uint64,uint64,uint64)string)",
        "Method(calculateEnhancedYield(uint64,uint64,uint64)uint64)",
        "Method(verifyEnhancedCompliance(uint64,string,string)string)",
        "Method(initiateCrossBorderSettlement(uint64,uint64,uint64,string)string)",
        "Method(getEnhancedCounters()string)",
        "Method(setMarketplaceContract(string)string)",
        "Method(getUserPortfolio(string)string)",
        "Method(generateAuditTrail(uint64)string)",
        "Method(getBLFinancialInfo(string)string)",
        "Method(verifyCompliance(string,string)string)",
        "Method(tokenizeForTrading(string,uint64)string)",
        "Method(calculateYield(string,uint64)uint64)",
        "Method(getCounters()string)"
      ]
    },
    "145": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(calculateEnhancedYield(uint64,uint64,uint64)uint64)",
        "Method(calculateYield(string,uint64)uint64)",
        "Method(createEnhancedFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string,uint64,uint64,string)uint64)",
        "Method(fractionalizeForTrading(uint64,uint64,uint64)string)",
        "Method(generateAuditTrail(uint64)string)",
        "Method(getBLFinancialInfo(string)string)",
        "Method(getCounters()string)",
        "Method(getEnhancedBLInfo(uint64)string)",
        "Method(getEnhancedCounters()string)",
        "Method(getUserPortfolio(string)string)",
        "Method(hello(string)string)",
        "Method(initiateCrossBorderSettlement(uint64,uint64,uint64,string)string)",
        "Method(setMarketplaceContract(string)string)",
        "Method(tokenizeForTrading(string,uint64)string)",
        "Method(verifyCompliance(string,string)string)",
        "Method(verifyEnhancedCompliance(uint64,string,string)string)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(hello(string)string)",
        "Method(createEnhancedFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string,uint64,uint64,string)uint64)",
        "Method(getEnhancedBLInfo(uint64)string)",
        "Method(fractionalizeForTrading(uint64,uint64,uint64)string)",
        "Method(calculateEnhancedYield(uint64,uint64,uint64)uint64)",
        "Method(verifyEnhancedCompliance(uint64,string,string)string)",
        "Method(initiateCrossBorderSettlement(uint64,uint64,uint64,string)string)",
        "Method(getEnhancedCounters()string)",
        "Method(setMarketplaceContract(string)string)",
        "Method(getUserPortfolio(string)string)",
        "Method(generateAuditTrail(uint64)string)",
        "Method(getBLFinancialInfo(string)string)",
        "Method(verifyCompliance(string,string)string)",
        "Method(tokenizeForTrading(string,uint64)string)",
        "Method(calculateYield(string,uint64)uint64)",
        "Method(getCounters()string)",
        "tmp%2#0"
      ]
    },
    "148": {
      "op": "match main_hello_route@3 main_createEnhancedFinancialBL_route@4 main_getEnhancedBLInfo_route@5 main_fractionalizeForTrading_route@6 main_calculateEnhancedYield_route@7 main_verifyEnhancedCompliance_route@8 main_initiateCrossBorderSettlement_route@9 main_getEnhancedCounters_route@10 main_setMarketplaceContract_route@11 main_getUserPortfolio_route@12 main_generateAuditTrail_route@13 main_getBLFinancialInfo_route@14 main_verifyCompliance_route@15 main_tokenizeForTrading_route@16 main_calculateYield_route@17 main_getCounters_route@18",
      "stack_out": []
    },
    "182": {
      "block": "main_after_if_else@25",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "183": {
      "op": "return",
      "stack_out": []
    },
    "184": {
      "block": "main_getCounters_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%137#0"
      ],
      "stack_out": [
        "tmp%137#0"
      ]
    },
    "186": {
      "op": "!",
      "defined_out": [
        "tmp%138#0"
      ],
      "stack_out": [
        "tmp%138#0"
      ]
    },
    "187": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "188": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%139#0"
      ]
    },
    "190": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "191": {
      "op": "pushbytes 0x151f7c750036456e68616e63656420636f756e7465727320617661696c61626c652077697468206164646974696f6e616c205632206d657472696373",
      "defined_out": [
        "0x151f7c750036456e68616e63656420636f756e7465727320617661696c61626c652077697468206164646974696f6e616c205632206d657472696373"
      ],
      "stack_out": [
        "0x151f7c750036456e68616e63656420636f756e7465727320617661696c61626c652077697468206164646974696f6e616c205632206d657472696373"
      ]
    },
    "253": {
      "op": "log",
      "stack_out": []
    },
    "254": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "255": {
      "op": "return",
      "stack_out": []
    },
    "256": {
      "block": "main_calculateYield_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%129#0"
      ],
      "stack_out": [
        "tmp%129#0"
      ]
    },
    "258": {
      "op": "!",
      "defined_out": [
        "tmp%130#0"
      ],
      "stack_out": [
        "tmp%130#0"
      ]
    },
    "259": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "260": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%131#0"
      ],
      "stack_out": [
        "tmp%131#0"
      ]
    },
    "262": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "263": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%133#0"
      ],
      "stack_out": [
        "tmp%133#0"
      ]
    },
    "266": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%134#0"
      ],
      "stack_out": [
        "tmp%134#0"
      ]
    },
    "269": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%20#0",
        "tmp%134#0"
      ],
      "stack_out": [
        "tmp%134#0",
        "reinterpret_bytes[8]%20#0"
      ]
    },
    "272": {
      "op": "btoi",
      "defined_out": [
        "tmp%134#0",
        "tmp%135#0"
      ],
      "stack_out": [
        "tmp%134#0",
        "tmp%135#0"
      ]
    },
    "273": {
      "callsub": "smart_contracts/negotiable_fin_bl_v2/contract.algo.ts::NegotiableFinBLV2.calculateYield",
      "op": "callsub calculateYield",
      "defined_out": [
        "to_encode%14#0"
      ],
      "stack_out": [
        "to_encode%14#0"
      ]
    },
    "276": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "277": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "0x151f7c75"
      ]
    },
    "278": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ]
    },
    "279": {
      "op": "concat",
      "defined_out": [
        "tmp%136#0"
      ],
      "stack_out": [
        "tmp%136#0"
      ]
    },
    "280": {
      "op": "log",
      "stack_out": []
    },
    "281": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "282": {
      "op": "return",
      "stack_out": []
    },
    "283": {
      "block": "main_tokenizeForTrading_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%121#0"
      ],
      "stack_out": [
        "tmp%121#0"
      ]
    },
    "285": {
      "op": "!",
      "defined_out": [
        "tmp%122#0"
      ],
      "stack_out": [
        "tmp%122#0"
      ]
    },
    "286": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "287": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%123#0"
      ]
    },
    "289": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "290": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%125#0"
      ],
      "stack_out": [
        "tmp%125#0"
      ]
    },
    "293": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%126#0"
      ],
      "stack_out": [
        "tmp%126#0"
      ]
    },
    "296": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%19#0",
        "tmp%126#0"
      ],
      "stack_out": [
        "tmp%126#0",
        "reinterpret_bytes[8]%19#0"
      ]
    },
    "299": {
      "op": "btoi",
      "defined_out": [
        "tmp%126#0",
        "tmp%127#0"
      ],
      "stack_out": [
        "tmp%126#0",
        "tmp%127#0"
      ]
    },
    "300": {
      "callsub": "smart_contracts/negotiable_fin_bl_v2/contract.algo.ts::NegotiableFinBLV2.tokenizeForTrading",
      "op": "callsub tokenizeForTrading",
      "defined_out": [
        "to_encode%13#0"
      ],
      "stack_out": [
        "to_encode%13#0"
      ]
    },
    "303": {
      "op": "dup",
      "defined_out": [
        "to_encode%13#0",
        "to_encode%13#0 (copy)"
      ],
      "stack_out": [
        "to_encode%13#0",
        "to_encode%13#0 (copy)"
      ]
    },
    "304": {
      "op": "len",
      "defined_out": [
        "length%11#0",
        "to_encode%13#0"
      ],
      "stack_out": [
        "to_encode%13#0",
        "length%11#0"
      ]
    },
    "305": {
      "op": "itob",
      "defined_out": [
        "as_bytes%11#0",
        "to_encode%13#0"
      ],
      "stack_out": [
        "to_encode%13#0",
        "as_bytes%11#0"
      ]
    },
    "306": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%11#0",
        "to_encode%13#0"
      ],
      "stack_out": [
        "to_encode%13#0",
        "length_uint16%11#0"
      ]
    },
    "309": {
      "op": "swap",
      "stack_out": [
        "length_uint16%11#0",
        "to_encode%13#0"
      ]
    },
    "310": {
      "op": "concat",
      "defined_out": [
        "encoded_value%11#0"
      ],
      "stack_out": [
        "encoded_value%11#0"
      ]
    },
    "311": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%11#0"
      ],
      "stack_out": [
        "encoded_value%11#0",
        "0x151f7c75"
      ]
    },
    "312": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%11#0"
      ]
    },
    "313": {
      "op": "concat",
      "defined_out": [
        "tmp%128#0"
      ],
      "stack_out": [
        "tmp%128#0"
      ]
    },
    "314": {
      "op": "log",
      "stack_out": []
    },
    "315": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "316": {
      "op": "return",
      "stack_out": []
    },
    "317": {
      "block": "main_verifyCompliance_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%112#0"
      ],
      "stack_out": [
        "tmp%112#0"
      ]
    },
    "319": {
      "op": "!",
      "defined_out": [
        "tmp%113#0"
      ],
      "stack_out": [
        "tmp%113#0"
      ]
    },
    "320": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "321": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%114#0"
      ],
      "stack_out": [
        "tmp%114#0"
      ]
    },
    "323": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "324": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%116#0"
      ],
      "stack_out": [
        "tmp%116#0"
      ]
    },
    "327": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%117#0"
      ],
      "stack_out": [
        "tmp%117#0"
      ]
    },
    "330": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%117#0",
        "tmp%118#0"
      ],
      "stack_out": [
        "tmp%117#0",
        "tmp%118#0"
      ]
    },
    "333": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%117#0",
        "tmp%119#0"
      ],
      "stack_out": [
        "tmp%117#0",
        "tmp%119#0"
      ]
    },
    "336": {
      "callsub": "smart_contracts/negotiable_fin_bl_v2/contract.algo.ts::NegotiableFinBLV2.verifyCompliance",
      "op": "callsub verifyCompliance",
      "defined_out": [
        "to_encode%12#0"
      ],
      "stack_out": [
        "to_encode%12#0"
      ]
    },
    "339": {
      "op": "dup",
      "defined_out": [
        "to_encode%12#0",
        "to_encode%12#0 (copy)"
      ],
      "stack_out": [
        "to_encode%12#0",
        "to_encode%12#0 (copy)"
      ]
    },
    "340": {
      "op": "len",
      "defined_out": [
        "length%10#0",
        "to_encode%12#0"
      ],
      "stack_out": [
        "to_encode%12#0",
        "length%10#0"
      ]
    },
    "341": {
      "op": "itob",
      "defined_out": [
        "as_bytes%10#0",
        "to_encode%12#0"
      ],
      "stack_out": [
        "to_encode%12#0",
        "as_bytes%10#0"
      ]
    },
    "342": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%10#0",
        "to_encode%12#0"
      ],
      "stack_out": [
        "to_encode%12#0",
        "length_uint16%10#0"
      ]
    },
    "345": {
      "op": "swap",
      "stack_out": [
        "length_uint16%10#0",
        "to_encode%12#0"
      ]
    },
    "346": {
      "op": "concat",
      "defined_out": [
        "encoded_value%10#0"
      ],
      "stack_out": [
        "encoded_value%10#0"
      ]
    },
    "347": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%10#0"
      ],
      "stack_out": [
        "encoded_value%10#0",
        "0x151f7c75"
      ]
    },
    "348": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%10#0"
      ]
    },
    "349": {
      "op": "concat",
      "defined_out": [
        "tmp%120#0"
      ],
      "stack_out": [
        "tmp%120#0"
      ]
    },
    "350": {
      "op": "log",
      "stack_out": []
    },
    "351": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "352": {
      "op": "return",
      "stack_out": []
    },
    "353": {
      "block": "main_getBLFinancialInfo_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0"
      ]
    },
    "355": {
      "op": "!",
      "defined_out": [
        "tmp%106#0"
      ],
      "stack_out": [
        "tmp%106#0"
      ]
    },
    "356": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "357": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%107#0"
      ],
      "stack_out": [
        "tmp%107#0"
      ]
    },
    "359": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "360": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%109#0"
      ],
      "stack_out": [
        "tmp%109#0"
      ]
    },
    "363": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%110#0"
      ],
      "stack_out": [
        "tmp%110#0"
      ]
    },
    "366": {
      "callsub": "smart_contracts/negotiable_fin_bl_v2/contract.algo.ts::NegotiableFinBLV2.getBLFinancialInfo",
      "op": "callsub getBLFinancialInfo",
      "defined_out": [
        "to_encode%11#0"
      ],
      "stack_out": [
        "to_encode%11#0"
      ]
    },
    "369": {
      "op": "dup",
      "defined_out": [
        "to_encode%11#0",
        "to_encode%11#0 (copy)"
      ],
      "stack_out": [
        "to_encode%11#0",
        "to_encode%11#0 (copy)"
      ]
    },
    "370": {
      "op": "len",
      "defined_out": [
        "length%9#0",
        "to_encode%11#0"
      ],
      "stack_out": [
        "to_encode%11#0",
        "length%9#0"
      ]
    },
    "371": {
      "op": "itob",
      "defined_out": [
        "as_bytes%9#0",
        "to_encode%11#0"
      ],
      "stack_out": [
        "to_encode%11#0",
        "as_bytes%9#0"
      ]
    },
    "372": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%9#0",
        "to_encode%11#0"
      ],
      "stack_out": [
        "to_encode%11#0",
        "length_uint16%9#0"
      ]
    },
    "375": {
      "op": "swap",
      "stack_out": [
        "length_uint16%9#0",
        "to_encode%11#0"
      ]
    },
    "376": {
      "op": "concat",
      "defined_out": [
        "encoded_value%9#0"
      ],
      "stack_out": [
        "encoded_value%9#0"
      ]
    },
    "377": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%9#0"
      ],
      "stack_out": [
        "encoded_value%9#0",
        "0x151f7c75"
      ]
    },
    "378": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%9#0"
      ]
    },
    "379": {
      "op": "concat",
      "defined_out": [
        "tmp%111#0"
      ],
      "stack_out": [
        "tmp%111#0"
      ]
    },
    "380": {
      "op": "log",
      "stack_out": []
    },
    "381": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "382": {
      "op": "return",
      "stack_out": []
    },
    "383": {
      "block": "main_generateAuditTrail_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0"
      ]
    },
    "385": {
      "op": "!",
      "defined_out": [
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%100#0"
      ]
    },
    "386": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "387": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%101#0"
      ],
      "stack_out": [
        "tmp%101#0"
      ]
    },
    "389": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "390": {
      "op": "pushbytes 0x151f7c750039417564697420547261696c3a20496d6d757461626c6520636f6d706c69616e6365207265636f72642067656e65726174656420666f7220424c",
      "defined_out": [
        "0x151f7c750039417564697420547261696c3a20496d6d757461626c6520636f6d706c69616e6365207265636f72642067656e65726174656420666f7220424c"
      ],
      "stack_out": [
        "0x151f7c750039417564697420547261696c3a20496d6d757461626c6520636f6d706c69616e6365207265636f72642067656e65726174656420666f7220424c"
      ]
    },
    "455": {
      "op": "log",
      "stack_out": []
    },
    "456": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "457": {
      "op": "return",
      "stack_out": []
    },
    "458": {
      "block": "main_getUserPortfolio_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0"
      ]
    },
    "460": {
      "op": "!",
      "defined_out": [
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0"
      ]
    },
    "461": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "462": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%94#0"
      ]
    },
    "464": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "465": {
      "op": "pushbytes 0x151f7c7500365573657220506f7274666f6c696f206461746120617661696c61626c6520666f7220656e68616e63656420424c20747261636b696e67",
      "defined_out": [
        "0x151f7c7500365573657220506f7274666f6c696f206461746120617661696c61626c6520666f7220656e68616e63656420424c20747261636b696e67"
      ],
      "stack_out": [
        "0x151f7c7500365573657220506f7274666f6c696f206461746120617661696c61626c6520666f7220656e68616e63656420424c20747261636b696e67"
      ]
    },
    "527": {
      "op": "log",
      "stack_out": []
    },
    "528": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "529": {
      "op": "return",
      "stack_out": []
    },
    "530": {
      "block": "main_setMarketplaceContract_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0"
      ]
    },
    "532": {
      "op": "!",
      "defined_out": [
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%86#0"
      ]
    },
    "533": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "534": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "536": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "537": {
      "op": "pushbytes 0x151f7c75003e4d61726b6574706c61636520636f6e7472616374206c696e6b656420666f722061746f6d696320736574746c656d656e74206361706162696c6974696573",
      "defined_out": [
        "0x151f7c75003e4d61726b6574706c61636520636f6e7472616374206c696e6b656420666f722061746f6d696320736574746c656d656e74206361706162696c6974696573"
      ],
      "stack_out": [
        "0x151f7c75003e4d61726b6574706c61636520636f6e7472616374206c696e6b656420666f722061746f6d696320736574746c656d656e74206361706162696c6974696573"
      ]
    },
    "607": {
      "op": "log",
      "stack_out": []
    },
    "608": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "609": {
      "op": "return",
      "stack_out": []
    },
    "610": {
      "block": "main_getEnhancedCounters_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "612": {
      "op": "!",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "613": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "614": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0"
      ]
    },
    "616": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "617": {
      "op": "pushbytes 0x151f7c75003e456e68616e63656420436f756e7465727320617661696c61626c65207769746820424c20636f756e742c2054564c2c20616e642061637469766520424c73",
      "defined_out": [
        "0x151f7c75003e456e68616e63656420436f756e7465727320617661696c61626c65207769746820424c20636f756e742c2054564c2c20616e642061637469766520424c73"
      ],
      "stack_out": [
        "0x151f7c75003e456e68616e63656420436f756e7465727320617661696c61626c65207769746820424c20636f756e742c2054564c2c20616e642061637469766520424c73"
      ]
    },
    "687": {
      "op": "log",
      "stack_out": []
    },
    "688": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "689": {
      "op": "return",
      "stack_out": []
    },
    "690": {
      "block": "main_initiateCrossBorderSettlement_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "692": {
      "op": "!",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "693": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "694": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "696": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "697": {
      "op": "pushbytes 0x151f7c75004043726f73732d626f7264657220736574746c656d656e7420696e6974696174656420666f7220424c207769746820737461626c65636f696e20737570706f7274",
      "defined_out": [
        "0x151f7c75004043726f73732d626f7264657220736574746c656d656e7420696e6974696174656420666f7220424c207769746820737461626c65636f696e20737570706f7274"
      ],
      "stack_out": [
        "0x151f7c75004043726f73732d626f7264657220736574746c656d656e7420696e6974696174656420666f7220424c207769746820737461626c65636f696e20737570706f7274"
      ]
    },
    "769": {
      "op": "log",
      "stack_out": []
    },
    "770": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "771": {
      "op": "return",
      "stack_out": []
    },
    "772": {
      "block": "main_verifyEnhancedCompliance_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "774": {
      "op": "!",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "775": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "776": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "778": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "779": {
      "op": "pushbytes 0x151f7c75003b424c20636f6d706c69616e63652076657269666965643a20764c4549202b204443534120332e302076616c69646174696f6e20636f6d706c657465",
      "defined_out": [
        "0x151f7c75003b424c20636f6d706c69616e63652076657269666965643a20764c4549202b204443534120332e302076616c69646174696f6e20636f6d706c657465"
      ],
      "stack_out": [
        "0x151f7c75003b424c20636f6d706c69616e63652076657269666965643a20764c4549202b204443534120332e302076616c69646174696f6e20636f6d706c657465"
      ]
    },
    "846": {
      "op": "log",
      "stack_out": []
    },
    "847": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "848": {
      "op": "return",
      "stack_out": []
    },
    "849": {
      "block": "main_calculateEnhancedYield_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "851": {
      "op": "!",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "852": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "853": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "855": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "856": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%11#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%11#0"
      ]
    },
    "859": {
      "op": "btoi",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "860": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%12#0",
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0",
        "reinterpret_bytes[8]%12#0"
      ]
    },
    "863": {
      "op": "btoi",
      "defined_out": [
        "tmp%56#0",
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%56#0",
        "tmp%57#0"
      ]
    },
    "864": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%13#0",
        "tmp%56#0",
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%56#0",
        "tmp%57#0",
        "reinterpret_bytes[8]%13#0"
      ]
    },
    "867": {
      "op": "btoi",
      "defined_out": [
        "tmp%56#0",
        "tmp%57#0",
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%56#0",
        "tmp%57#0",
        "tmp%58#0"
      ]
    },
    "868": {
      "callsub": "smart_contracts/negotiable_fin_bl_v2/contract.algo.ts::NegotiableFinBLV2.calculateEnhancedYield",
      "op": "callsub calculateEnhancedYield",
      "defined_out": [
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0"
      ]
    },
    "871": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "872": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "873": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "874": {
      "op": "concat",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "875": {
      "op": "log",
      "stack_out": []
    },
    "876": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "877": {
      "op": "return",
      "stack_out": []
    },
    "878": {
      "block": "main_fractionalizeForTrading_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "880": {
      "op": "!",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "881": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "882": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "884": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "885": {
      "op": "pushbytes 0x151f7c750038424c206672616374696f6e616c697a656420776974682073686172657320617661696c61626c6520666f72204d534d452074726164696e67",
      "defined_out": [
        "0x151f7c750038424c206672616374696f6e616c697a656420776974682073686172657320617661696c61626c6520666f72204d534d452074726164696e67"
      ],
      "stack_out": [
        "0x151f7c750038424c206672616374696f6e616c697a656420776974682073686172657320617661696c61626c6520666f72204d534d452074726164696e67"
      ]
    },
    "949": {
      "op": "log",
      "stack_out": []
    },
    "950": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "951": {
      "op": "return",
      "stack_out": []
    },
    "952": {
      "block": "main_getEnhancedBLInfo_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "954": {
      "op": "!",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "955": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "956": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "958": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "959": {
      "op": "pushbytes 0x151f7c750048456e68616e6365642046696e424c3a20416476616e6365642066696e616e6369616c20696e666f2077697468206672616374696f6e616c697a6174696f6e20617661696c61626c65",
      "defined_out": [
        "0x151f7c750048456e68616e6365642046696e424c3a20416476616e6365642066696e616e6369616c20696e666f2077697468206672616374696f6e616c697a6174696f6e20617661696c61626c65"
      ],
      "stack_out": [
        "0x151f7c750048456e68616e6365642046696e424c3a20416476616e6365642066696e616e6369616c20696e666f2077697468206672616374696f6e616c697a6174696f6e20617661696c61626c65"
      ]
    },
    "1039": {
      "op": "log",
      "stack_out": []
    },
    "1040": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1041": {
      "op": "return",
      "stack_out": []
    },
    "1042": {
      "block": "main_createEnhancedFinancialBL_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1044": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1045": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1046": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1048": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1049": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "1052": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "1055": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "1058": {
      "op": "btoi",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "1059": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%1#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "1062": {
      "op": "btoi",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "1063": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%2#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "1066": {
      "op": "btoi",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "1067": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[8]%3#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "1070": {
      "op": "btoi",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ]
    },
    "1071": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "reinterpret_bytes[8]%4#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "1074": {
      "op": "btoi",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "1075": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0"
      ]
    },
    "1078": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0"
      ]
    },
    "1081": {
      "op": "txna ApplicationArgs 8",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "tmp%23#0"
      ]
    },
    "1084": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "tmp%24#0"
      ]
    },
    "1087": {
      "op": "txna ApplicationArgs 9",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%25#0"
      ]
    },
    "1090": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%26#0"
      ]
    },
    "1093": {
      "op": "txna ApplicationArgs 10",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%27#0"
      ]
    },
    "1096": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0"
      ]
    },
    "1099": {
      "op": "txna ApplicationArgs 11",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%29#0"
      ]
    },
    "1102": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%30#0"
      ]
    },
    "1105": {
      "op": "txna ApplicationArgs 12",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%30#0",
        "tmp%31#0"
      ]
    },
    "1108": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%30#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%30#0",
        "tmp%32#0"
      ]
    },
    "1111": {
      "op": "txna ApplicationArgs 13",
      "defined_out": [
        "reinterpret_bytes[8]%5#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%30#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%30#0",
        "tmp%32#0",
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "1114": {
      "op": "btoi",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%30#0",
        "tmp%32#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%30#0",
        "tmp%32#0",
        "tmp%33#0"
      ]
    },
    "1115": {
      "op": "txna ApplicationArgs 14",
      "defined_out": [
        "reinterpret_bytes[8]%6#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%30#0",
        "tmp%32#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%30#0",
        "tmp%32#0",
        "tmp%33#0",
        "reinterpret_bytes[8]%6#0"
      ]
    },
    "1118": {
      "op": "btoi",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%30#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%30#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0"
      ]
    },
    "1119": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%30#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%30#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0"
      ]
    },
    "1122": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%30#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%30#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%36#0"
      ]
    },
    "1125": {
      "callsub": "smart_contracts/negotiable_fin_bl_v2/contract.algo.ts::NegotiableFinBLV2.createEnhancedFinancialBL",
      "op": "callsub createEnhancedFinancialBL",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "1128": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "1129": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "1130": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "1131": {
      "op": "concat",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "1132": {
      "op": "log",
      "stack_out": []
    },
    "1133": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1134": {
      "op": "return",
      "stack_out": []
    },
    "1135": {
      "block": "main_hello_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1137": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1138": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1139": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1141": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1142": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1145": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1148": {
      "callsub": "smart_contracts/negotiable_fin_bl_v2/contract.algo.ts::NegotiableFinBLV2.hello",
      "op": "callsub hello",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "1151": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "1152": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "1153": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "as_bytes%0#0"
      ]
    },
    "1154": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length_uint16%0#0"
      ]
    },
    "1157": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ]
    },
    "1158": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "1159": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "1160": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ]
    },
    "1161": {
      "op": "concat",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1162": {
      "op": "log",
      "stack_out": []
    },
    "1163": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1164": {
      "op": "return",
      "stack_out": []
    },
    "1165": {
      "block": "main_bare_routing@21",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%142#0"
      ],
      "stack_out": [
        "tmp%142#0"
      ]
    },
    "1167": {
      "op": "bnz main_after_if_else@25",
      "stack_out": []
    },
    "1170": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%143#0"
      ],
      "stack_out": [
        "tmp%143#0"
      ]
    },
    "1172": {
      "op": "!",
      "defined_out": [
        "tmp%144#0"
      ],
      "stack_out": [
        "tmp%144#0"
      ]
    },
    "1173": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "1174": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1175": {
      "op": "return",
      "stack_out": []
    },
    "1176": {
      "subroutine": "smart_contracts/negotiable_fin_bl_v2/contract.algo.ts::NegotiableFinBLV2.hello",
      "params": {
        "name#0": "bytes"
      },
      "block": "hello",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1179": {
      "op": "pushbytes \"Hello from FinBLV2 Enhanced, \"",
      "defined_out": [
        "\"Hello from FinBLV2 Enhanced, \""
      ],
      "stack_out": [
        "\"Hello from FinBLV2 Enhanced, \""
      ]
    },
    "1210": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"Hello from FinBLV2 Enhanced, \"",
        "name#0 (copy)"
      ],
      "stack_out": [
        "\"Hello from FinBLV2 Enhanced, \"",
        "name#0 (copy)"
      ]
    },
    "1212": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1213": {
      "retsub": true,
      "op": "retsub"
    },
    "1214": {
      "subroutine": "smart_contracts/negotiable_fin_bl_v2/contract.algo.ts::NegotiableFinBLV2.createEnhancedFinancialBL",
      "params": {
        "description#0": "bytes",
        "cargoValue#0": "uint64",
        "blType#0": "uint64",
        "creditRating#0": "uint64",
        "riskScore#0": "uint64",
        "yieldRate#0": "uint64",
        "vleiID#0": "bytes",
        "jurisdictionCode#0": "bytes",
        "complianceHash#0": "bytes",
        "incoterms#0": "bytes",
        "insurancePolicyID#0": "bytes",
        "lcrReference#0": "bytes",
        "totalShares#0": "uint64",
        "minInvestment#0": "uint64",
        "dcsaVersion#0": "bytes"
      },
      "block": "createEnhancedFinancialBL",
      "stack_in": [],
      "op": "proto 15 1"
    },
    "1217": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1218": {
      "op": "bytec_1 // \"blCounter\"",
      "defined_out": [
        "\"blCounter\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"blCounter\""
      ]
    },
    "1219": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1220": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "1222": {
      "op": "bnz createEnhancedFinancialBL_after_if_else@2",
      "stack_out": []
    },
    "1225": {
      "op": "bytec_1 // \"blCounter\"",
      "stack_out": [
        "\"blCounter\""
      ]
    },
    "1226": {
      "op": "intc_1 // 0",
      "stack_out": [
        "\"blCounter\"",
        "0"
      ]
    },
    "1227": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1228": {
      "block": "createEnhancedFinancialBL_after_if_else@2",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1229": {
      "op": "bytec_2 // \"totalValueLocked\"",
      "defined_out": [
        "\"totalValueLocked\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalValueLocked\""
      ]
    },
    "1230": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1231": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%1#0"
      ]
    },
    "1233": {
      "op": "bnz createEnhancedFinancialBL_after_if_else@4",
      "stack_out": []
    },
    "1236": {
      "op": "bytec_2 // \"totalValueLocked\"",
      "stack_out": [
        "\"totalValueLocked\""
      ]
    },
    "1237": {
      "op": "intc_1 // 0",
      "stack_out": [
        "\"totalValueLocked\"",
        "0"
      ]
    },
    "1238": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1239": {
      "block": "createEnhancedFinancialBL_after_if_else@4",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1240": {
      "op": "bytec_3 // \"totalBLsActive\"",
      "defined_out": [
        "\"totalBLsActive\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalBLsActive\""
      ]
    },
    "1241": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1242": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%2#0"
      ]
    },
    "1244": {
      "op": "bnz createEnhancedFinancialBL_after_if_else@6",
      "stack_out": []
    },
    "1247": {
      "op": "bytec_3 // \"totalBLsActive\"",
      "stack_out": [
        "\"totalBLsActive\""
      ]
    },
    "1248": {
      "op": "intc_1 // 0",
      "stack_out": [
        "\"totalBLsActive\"",
        "0"
      ]
    },
    "1249": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1250": {
      "block": "createEnhancedFinancialBL_after_if_else@6",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1251": {
      "op": "bytec_1 // \"blCounter\"",
      "defined_out": [
        "\"blCounter\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"blCounter\""
      ]
    },
    "1252": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1253": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "1254": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "1"
      ]
    },
    "1255": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "1256": {
      "op": "bytec_1 // \"blCounter\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"blCounter\""
      ]
    },
    "1257": {
      "op": "swap",
      "stack_out": [
        "\"blCounter\"",
        "new_state_value%0#0"
      ]
    },
    "1258": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1259": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1260": {
      "op": "bytec_1 // \"blCounter\"",
      "stack_out": [
        "0",
        "\"blCounter\""
      ]
    },
    "1261": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "newBLId#0"
      ],
      "stack_out": [
        "newBLId#0",
        "maybe_exists%4#0"
      ]
    },
    "1262": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "newBLId#0"
      ]
    },
    "1263": {
      "op": "intc_1 // 0",
      "stack_out": [
        "newBLId#0",
        "0"
      ]
    },
    "1264": {
      "op": "bytec_2 // \"totalValueLocked\"",
      "defined_out": [
        "\"totalValueLocked\"",
        "0",
        "newBLId#0"
      ],
      "stack_out": [
        "newBLId#0",
        "0",
        "\"totalValueLocked\""
      ]
    },
    "1265": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "newBLId#0"
      ],
      "stack_out": [
        "newBLId#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "1266": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "newBLId#0",
        "maybe_value%5#0"
      ]
    },
    "1267": {
      "op": "frame_dig -14",
      "defined_out": [
        "cargoValue#0 (copy)",
        "maybe_value%5#0",
        "newBLId#0"
      ],
      "stack_out": [
        "newBLId#0",
        "maybe_value%5#0",
        "cargoValue#0 (copy)"
      ]
    },
    "1269": {
      "op": "+",
      "defined_out": [
        "newBLId#0",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "newBLId#0",
        "new_state_value%1#0"
      ]
    },
    "1270": {
      "op": "bytec_2 // \"totalValueLocked\"",
      "stack_out": [
        "newBLId#0",
        "new_state_value%1#0",
        "\"totalValueLocked\""
      ]
    },
    "1271": {
      "op": "swap",
      "stack_out": [
        "newBLId#0",
        "\"totalValueLocked\"",
        "new_state_value%1#0"
      ]
    },
    "1272": {
      "op": "app_global_put",
      "stack_out": [
        "newBLId#0"
      ]
    },
    "1273": {
      "op": "intc_1 // 0",
      "stack_out": [
        "newBLId#0",
        "0"
      ]
    },
    "1274": {
      "op": "bytec_3 // \"totalBLsActive\"",
      "defined_out": [
        "\"totalBLsActive\"",
        "0",
        "newBLId#0"
      ],
      "stack_out": [
        "newBLId#0",
        "0",
        "\"totalBLsActive\""
      ]
    },
    "1275": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "newBLId#0"
      ],
      "stack_out": [
        "newBLId#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "1276": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "newBLId#0",
        "maybe_value%6#0"
      ]
    },
    "1277": {
      "op": "intc_0 // 1",
      "stack_out": [
        "newBLId#0",
        "maybe_value%6#0",
        "1"
      ]
    },
    "1278": {
      "op": "+",
      "defined_out": [
        "newBLId#0",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "newBLId#0",
        "new_state_value%2#0"
      ]
    },
    "1279": {
      "op": "bytec_3 // \"totalBLsActive\"",
      "stack_out": [
        "newBLId#0",
        "new_state_value%2#0",
        "\"totalBLsActive\""
      ]
    },
    "1280": {
      "op": "swap",
      "stack_out": [
        "newBLId#0",
        "\"totalBLsActive\"",
        "new_state_value%2#0"
      ]
    },
    "1281": {
      "op": "app_global_put",
      "stack_out": [
        "newBLId#0"
      ]
    },
    "1282": {
      "retsub": true,
      "op": "retsub"
    },
    "1283": {
      "subroutine": "smart_contracts/negotiable_fin_bl_v2/contract.algo.ts::NegotiableFinBLV2.calculateEnhancedYield",
      "params": {
        "blId#0": "uint64",
        "investmentAmount#0": "uint64",
        "riskAdjustment#0": "uint64"
      },
      "block": "calculateEnhancedYield",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "1286": {
      "op": "frame_dig -2",
      "defined_out": [
        "investmentAmount#0 (copy)"
      ],
      "stack_out": [
        "investmentAmount#0 (copy)"
      ]
    },
    "1288": {
      "op": "pushint 20 // 20",
      "defined_out": [
        "20",
        "investmentAmount#0 (copy)"
      ],
      "stack_out": [
        "investmentAmount#0 (copy)",
        "20"
      ]
    },
    "1290": {
      "op": "/",
      "defined_out": [
        "baseYield#0"
      ],
      "stack_out": [
        "baseYield#0"
      ]
    },
    "1291": {
      "retsub": true,
      "op": "retsub"
    },
    "1292": {
      "subroutine": "smart_contracts/negotiable_fin_bl_v2/contract.algo.ts::NegotiableFinBLV2.getBLFinancialInfo",
      "params": {
        "blId#0": "bytes"
      },
      "block": "getBLFinancialInfo",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1295": {
      "op": "pushbytes \"FinBL \"",
      "defined_out": [
        "\"FinBL \""
      ],
      "stack_out": [
        "\"FinBL \""
      ]
    },
    "1303": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"FinBL \"",
        "blId#0 (copy)"
      ],
      "stack_out": [
        "\"FinBL \"",
        "blId#0 (copy)"
      ]
    },
    "1305": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1306": {
      "op": "pushbytes \": Enhanced financial info available\"",
      "defined_out": [
        "\": Enhanced financial info available\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\": Enhanced financial info available\""
      ]
    },
    "1343": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1344": {
      "retsub": true,
      "op": "retsub"
    },
    "1345": {
      "subroutine": "smart_contracts/negotiable_fin_bl_v2/contract.algo.ts::NegotiableFinBLV2.verifyCompliance",
      "params": {
        "blId#0": "bytes",
        "regulatoryHash#0": "bytes"
      },
      "block": "verifyCompliance",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1348": {
      "op": "bytec 4 // \"BL \"",
      "defined_out": [
        "\"BL \""
      ],
      "stack_out": [
        "\"BL \""
      ]
    },
    "1350": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"BL \"",
        "blId#0 (copy)"
      ],
      "stack_out": [
        "\"BL \"",
        "blId#0 (copy)"
      ]
    },
    "1352": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1353": {
      "op": "pushbytes \" enhanced compliance verified\"",
      "defined_out": [
        "\" enhanced compliance verified\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\" enhanced compliance verified\""
      ]
    },
    "1384": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1385": {
      "retsub": true,
      "op": "retsub"
    },
    "1386": {
      "subroutine": "smart_contracts/negotiable_fin_bl_v2/contract.algo.ts::NegotiableFinBLV2.tokenizeForTrading",
      "params": {
        "blId#0": "bytes",
        "fractionalShares#0": "uint64"
      },
      "block": "tokenizeForTrading",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1389": {
      "op": "bytec 4 // \"BL \"",
      "defined_out": [
        "\"BL \""
      ],
      "stack_out": [
        "\"BL \""
      ]
    },
    "1391": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"BL \"",
        "blId#0 (copy)"
      ],
      "stack_out": [
        "\"BL \"",
        "blId#0 (copy)"
      ]
    },
    "1393": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1394": {
      "op": "pushbytes \" enhanced tokenization for trading\"",
      "defined_out": [
        "\" enhanced tokenization for trading\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\" enhanced tokenization for trading\""
      ]
    },
    "1430": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1431": {
      "retsub": true,
      "op": "retsub"
    },
    "1432": {
      "subroutine": "smart_contracts/negotiable_fin_bl_v2/contract.algo.ts::NegotiableFinBLV2.calculateYield",
      "params": {
        "blId#0": "bytes",
        "investmentAmount#0": "uint64"
      },
      "block": "calculateYield",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1435": {
      "op": "frame_dig -1",
      "defined_out": [
        "investmentAmount#0 (copy)"
      ],
      "stack_out": [
        "investmentAmount#0 (copy)"
      ]
    },
    "1437": {
      "op": "pushint 17 // 17",
      "defined_out": [
        "17",
        "investmentAmount#0 (copy)"
      ],
      "stack_out": [
        "investmentAmount#0 (copy)",
        "17"
      ]
    },
    "1439": {
      "op": "/",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1440": {
      "retsub": true,
      "op": "retsub"
    }
  }
}