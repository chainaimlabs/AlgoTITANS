#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 0
    bytecblock 0x151f7c75 "blCounter" "totalValueLocked" "totalBLsActive" "BL "
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:3
    // export class NegotiableFinBLV2 extends Contract {
    txn NumAppArgs
    bz main_bare_routing@21
    pushbytess 0x02bece11 0x4d688a8d 0xecca8f40 0x3018a1b4 0x0f7b2c58 0xcb2a5596 0xe88a18d7 0x53edd666 0xbdceee97 0xfb0b4e63 0x6be9eb2c 0x9bd01310 0x04b313dc 0xf1b940a9 0xe9baec2b 0x0494f90f // method "hello(string)string", method "createEnhancedFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string,uint64,uint64,string)uint64", method "getEnhancedBLInfo(uint64)string", method "fractionalizeForTrading(uint64,uint64,uint64)string", method "calculateEnhancedYield(uint64,uint64,uint64)uint64", method "verifyEnhancedCompliance(uint64,string,string)string", method "initiateCrossBorderSettlement(uint64,uint64,uint64,string)string", method "getEnhancedCounters()string", method "setMarketplaceContract(string)string", method "getUserPortfolio(string)string", method "generateAuditTrail(uint64)string", method "getBLFinancialInfo(string)string", method "verifyCompliance(string,string)string", method "tokenizeForTrading(string,uint64)string", method "calculateYield(string,uint64)uint64", method "getCounters()string"
    txna ApplicationArgs 0
    match main_hello_route@3 main_createEnhancedFinancialBL_route@4 main_getEnhancedBLInfo_route@5 main_fractionalizeForTrading_route@6 main_calculateEnhancedYield_route@7 main_verifyEnhancedCompliance_route@8 main_initiateCrossBorderSettlement_route@9 main_getEnhancedCounters_route@10 main_setMarketplaceContract_route@11 main_getUserPortfolio_route@12 main_generateAuditTrail_route@13 main_getBLFinancialInfo_route@14 main_verifyCompliance_route@15 main_tokenizeForTrading_route@16 main_calculateYield_route@17 main_getCounters_route@18

main_after_if_else@25:
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:3
    // export class NegotiableFinBLV2 extends Contract {
    intc_1 // 0
    return

main_getCounters_route@18:
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:155
    // getCounters(): string {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    pushbytes 0x151f7c750036456e68616e63656420636f756e7465727320617661696c61626c652077697468206164646974696f6e616c205632206d657472696373
    log
    intc_0 // 1
    return

main_calculateYield_route@17:
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:150
    // calculateYield(blId: string, investmentAmount: uint64): uint64 {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:3
    // export class NegotiableFinBLV2 extends Contract {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:150
    // calculateYield(blId: string, investmentAmount: uint64): uint64 {
    callsub calculateYield
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_tokenizeForTrading_route@16:
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:146
    // tokenizeForTrading(blId: string, fractionalShares: uint64): string {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:3
    // export class NegotiableFinBLV2 extends Contract {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:146
    // tokenizeForTrading(blId: string, fractionalShares: uint64): string {
    callsub tokenizeForTrading
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_verifyCompliance_route@15:
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:142
    // verifyCompliance(blId: string, regulatoryHash: string): string {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:3
    // export class NegotiableFinBLV2 extends Contract {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:142
    // verifyCompliance(blId: string, regulatoryHash: string): string {
    callsub verifyCompliance
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_getBLFinancialInfo_route@14:
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:138
    // getBLFinancialInfo(blId: string): string {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:3
    // export class NegotiableFinBLV2 extends Contract {
    txna ApplicationArgs 1
    extract 2 0
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:138
    // getBLFinancialInfo(blId: string): string {
    callsub getBLFinancialInfo
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_generateAuditTrail_route@13:
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:131
    // generateAuditTrail(blId: uint64): string {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    pushbytes 0x151f7c750039417564697420547261696c3a20496d6d757461626c6520636f6d706c69616e6365207265636f72642067656e65726174656420666f7220424c
    log
    intc_0 // 1
    return

main_getUserPortfolio_route@12:
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:124
    // getUserPortfolio(userAddress: string): string {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    pushbytes 0x151f7c7500365573657220506f7274666f6c696f206461746120617661696c61626c6520666f7220656e68616e63656420424c20747261636b696e67
    log
    intc_0 // 1
    return

main_setMarketplaceContract_route@11:
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:117
    // setMarketplaceContract(marketplaceAddress: string): string {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    pushbytes 0x151f7c75003e4d61726b6574706c61636520636f6e7472616374206c696e6b656420666f722061746f6d696320736574746c656d656e74206361706162696c6974696573
    log
    intc_0 // 1
    return

main_getEnhancedCounters_route@10:
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:110
    // getEnhancedCounters(): string {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    pushbytes 0x151f7c75003e456e68616e63656420436f756e7465727320617661696c61626c65207769746820424c20636f756e742c2054564c2c20616e642061637469766520424c73
    log
    intc_0 // 1
    return

main_initiateCrossBorderSettlement_route@9:
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:98-103
    // initiateCrossBorderSettlement(
    //   blId: uint64,
    //   stablecoinAssetId: uint64,
    //   amount: uint64,
    //   targetCurrency: string
    // ): string {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    pushbytes 0x151f7c75004043726f73732d626f7264657220736574746c656d656e7420696e6974696174656420666f7220424c207769746820737461626c65636f696e20737570706f7274
    log
    intc_0 // 1
    return

main_verifyEnhancedCompliance_route@8:
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:91
    // verifyEnhancedCompliance(blId: uint64, vleiProof: string, dcsaHash: string): string {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    pushbytes 0x151f7c75003b424c20636f6d706c69616e63652076657269666965643a20764c4549202b204443534120332e302076616c69646174696f6e20636f6d706c657465
    log
    intc_0 // 1
    return

main_calculateEnhancedYield_route@7:
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:82
    // calculateEnhancedYield(blId: uint64, investmentAmount: uint64, riskAdjustment: uint64): uint64 {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:3
    // export class NegotiableFinBLV2 extends Contract {
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:82
    // calculateEnhancedYield(blId: uint64, investmentAmount: uint64, riskAdjustment: uint64): uint64 {
    callsub calculateEnhancedYield
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_fractionalizeForTrading_route@6:
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:75
    // fractionalizeForTrading(blId: uint64, sharesToSell: uint64, pricePerShare: uint64): string {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    pushbytes 0x151f7c750038424c206672616374696f6e616c697a656420776974682073686172657320617661696c61626c6520666f72204d534d452074726164696e67
    log
    intc_0 // 1
    return

main_getEnhancedBLInfo_route@5:
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:68
    // getEnhancedBLInfo(blId: uint64): string {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    pushbytes 0x151f7c750048456e68616e6365642046696e424c3a20416476616e6365642066696e616e6369616c20696e666f2077697468206672616374696f6e616c697a6174696f6e20617661696c61626c65
    log
    intc_0 // 1
    return

main_createEnhancedFinancialBL_route@4:
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:22-39
    // createEnhancedFinancialBL(
    //   description: string,
    //   cargoValue: uint64,
    //   blType: uint64,
    //   creditRating: uint64,
    //   riskScore: uint64,
    //   yieldRate: uint64,
    //   vleiID: string,
    //   jurisdictionCode: string,
    //   complianceHash: string,
    //   incoterms: string,
    //   insurancePolicyID: string,
    //   lcrReference: string,
    //   // V2 enhancements (simple parameters)
    //   totalShares: uint64,
    //   minInvestment: uint64,
    //   dcsaVersion: string
    // ): uint64 {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:3
    // export class NegotiableFinBLV2 extends Contract {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    txna ApplicationArgs 4
    btoi
    txna ApplicationArgs 5
    btoi
    txna ApplicationArgs 6
    btoi
    txna ApplicationArgs 7
    extract 2 0
    txna ApplicationArgs 8
    extract 2 0
    txna ApplicationArgs 9
    extract 2 0
    txna ApplicationArgs 10
    extract 2 0
    txna ApplicationArgs 11
    extract 2 0
    txna ApplicationArgs 12
    extract 2 0
    txna ApplicationArgs 13
    btoi
    txna ApplicationArgs 14
    btoi
    txna ApplicationArgs 15
    extract 2 0
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:22-39
    // createEnhancedFinancialBL(
    //   description: string,
    //   cargoValue: uint64,
    //   blType: uint64,
    //   creditRating: uint64,
    //   riskScore: uint64,
    //   yieldRate: uint64,
    //   vleiID: string,
    //   jurisdictionCode: string,
    //   complianceHash: string,
    //   incoterms: string,
    //   insurancePolicyID: string,
    //   lcrReference: string,
    //   // V2 enhancements (simple parameters)
    //   totalShares: uint64,
    //   minInvestment: uint64,
    //   dcsaVersion: string
    // ): uint64 {
    callsub createEnhancedFinancialBL
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_hello_route@3:
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:15
    // hello(name: string): string {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:3
    // export class NegotiableFinBLV2 extends Contract {
    txna ApplicationArgs 1
    extract 2 0
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:15
    // hello(name: string): string {
    callsub hello
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_bare_routing@21:
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:3
    // export class NegotiableFinBLV2 extends Contract {
    txn OnCompletion
    bnz main_after_if_else@25
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// smart_contracts/negotiable_fin_bl_v2/contract.algo.ts::NegotiableFinBLV2.hello(name: bytes) -> bytes:
hello:
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:15
    // hello(name: string): string {
    proto 1 1
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:16
    // return `Hello from FinBLV2 Enhanced, ${name}`
    pushbytes "Hello from FinBLV2 Enhanced, "
    frame_dig -1
    concat
    retsub


// smart_contracts/negotiable_fin_bl_v2/contract.algo.ts::NegotiableFinBLV2.createEnhancedFinancialBL(description: bytes, cargoValue: uint64, blType: uint64, creditRating: uint64, riskScore: uint64, yieldRate: uint64, vleiID: bytes, jurisdictionCode: bytes, complianceHash: bytes, incoterms: bytes, insurancePolicyID: bytes, lcrReference: bytes, totalShares: uint64, minInvestment: uint64, dcsaVersion: bytes) -> uint64:
createEnhancedFinancialBL:
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:22-39
    // createEnhancedFinancialBL(
    //   description: string,
    //   cargoValue: uint64,
    //   blType: uint64,
    //   creditRating: uint64,
    //   riskScore: uint64,
    //   yieldRate: uint64,
    //   vleiID: string,
    //   jurisdictionCode: string,
    //   complianceHash: string,
    //   incoterms: string,
    //   insurancePolicyID: string,
    //   lcrReference: string,
    //   // V2 enhancements (simple parameters)
    //   totalShares: uint64,
    //   minInvestment: uint64,
    //   dcsaVersion: string
    // ): uint64 {
    proto 15 1
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:5
    // blCounter = GlobalState<uint64>()
    intc_1 // 0
    bytec_1 // "blCounter"
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:42
    // if (!this.blCounter.hasValue) {
    app_global_get_ex
    bury 1
    bnz createEnhancedFinancialBL_after_if_else@2
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:5
    // blCounter = GlobalState<uint64>()
    bytec_1 // "blCounter"
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:43
    // this.blCounter.value = 0
    intc_1 // 0
    app_global_put

createEnhancedFinancialBL_after_if_else@2:
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:6
    // totalValueLocked = GlobalState<uint64>()
    intc_1 // 0
    bytec_2 // "totalValueLocked"
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:46
    // if (!this.totalValueLocked.hasValue) {
    app_global_get_ex
    bury 1
    bnz createEnhancedFinancialBL_after_if_else@4
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:6
    // totalValueLocked = GlobalState<uint64>()
    bytec_2 // "totalValueLocked"
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:47
    // this.totalValueLocked.value = 0
    intc_1 // 0
    app_global_put

createEnhancedFinancialBL_after_if_else@4:
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:9
    // totalBLsActive = GlobalState<uint64>()
    intc_1 // 0
    bytec_3 // "totalBLsActive"
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:50
    // if (!this.totalBLsActive.hasValue) {
    app_global_get_ex
    bury 1
    bnz createEnhancedFinancialBL_after_if_else@6
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:9
    // totalBLsActive = GlobalState<uint64>()
    bytec_3 // "totalBLsActive"
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:51
    // this.totalBLsActive.value = 0
    intc_1 // 0
    app_global_put

createEnhancedFinancialBL_after_if_else@6:
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:5
    // blCounter = GlobalState<uint64>()
    intc_1 // 0
    bytec_1 // "blCounter"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:55
    // this.blCounter.value = this.blCounter.value + 1
    intc_0 // 1
    +
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:5
    // blCounter = GlobalState<uint64>()
    bytec_1 // "blCounter"
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:55
    // this.blCounter.value = this.blCounter.value + 1
    swap
    app_global_put
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:5
    // blCounter = GlobalState<uint64>()
    intc_1 // 0
    bytec_1 // "blCounter"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:6
    // totalValueLocked = GlobalState<uint64>()
    intc_1 // 0
    bytec_2 // "totalValueLocked"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:59
    // this.totalValueLocked.value = this.totalValueLocked.value + cargoValue
    frame_dig -14
    +
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:6
    // totalValueLocked = GlobalState<uint64>()
    bytec_2 // "totalValueLocked"
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:59
    // this.totalValueLocked.value = this.totalValueLocked.value + cargoValue
    swap
    app_global_put
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:9
    // totalBLsActive = GlobalState<uint64>()
    intc_1 // 0
    bytec_3 // "totalBLsActive"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:60
    // this.totalBLsActive.value = this.totalBLsActive.value + 1
    intc_0 // 1
    +
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:9
    // totalBLsActive = GlobalState<uint64>()
    bytec_3 // "totalBLsActive"
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:60
    // this.totalBLsActive.value = this.totalBLsActive.value + 1
    swap
    app_global_put
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:62
    // return newBLId
    retsub


// smart_contracts/negotiable_fin_bl_v2/contract.algo.ts::NegotiableFinBLV2.calculateEnhancedYield(blId: uint64, investmentAmount: uint64, riskAdjustment: uint64) -> uint64:
calculateEnhancedYield:
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:82
    // calculateEnhancedYield(blId: uint64, investmentAmount: uint64, riskAdjustment: uint64): uint64 {
    proto 3 1
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:84
    // const baseYield: uint64 = investmentAmount / 20 // 5% base (V1 pattern)
    frame_dig -2
    pushint 20 // 20
    /
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:85
    // return baseYield
    retsub


// smart_contracts/negotiable_fin_bl_v2/contract.algo.ts::NegotiableFinBLV2.getBLFinancialInfo(blId: bytes) -> bytes:
getBLFinancialInfo:
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:138
    // getBLFinancialInfo(blId: string): string {
    proto 1 1
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:139
    // return `FinBL ${blId}: Enhanced financial info available`
    pushbytes "FinBL "
    frame_dig -1
    concat
    pushbytes ": Enhanced financial info available"
    concat
    retsub


// smart_contracts/negotiable_fin_bl_v2/contract.algo.ts::NegotiableFinBLV2.verifyCompliance(blId: bytes, regulatoryHash: bytes) -> bytes:
verifyCompliance:
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:142
    // verifyCompliance(blId: string, regulatoryHash: string): string {
    proto 2 1
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:143
    // return `BL ${blId} enhanced compliance verified`
    bytec 4 // "BL "
    frame_dig -2
    concat
    pushbytes " enhanced compliance verified"
    concat
    retsub


// smart_contracts/negotiable_fin_bl_v2/contract.algo.ts::NegotiableFinBLV2.tokenizeForTrading(blId: bytes, fractionalShares: uint64) -> bytes:
tokenizeForTrading:
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:146
    // tokenizeForTrading(blId: string, fractionalShares: uint64): string {
    proto 2 1
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:147
    // return `BL ${blId} enhanced tokenization for trading`
    bytec 4 // "BL "
    frame_dig -2
    concat
    pushbytes " enhanced tokenization for trading"
    concat
    retsub


// smart_contracts/negotiable_fin_bl_v2/contract.algo.ts::NegotiableFinBLV2.calculateYield(blId: bytes, investmentAmount: uint64) -> uint64:
calculateYield:
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:150
    // calculateYield(blId: string, investmentAmount: uint64): uint64 {
    proto 2 1
    // smart_contracts/negotiable_fin_bl_v2/contract.algo.ts:152
    // return investmentAmount / 17
    frame_dig -1
    pushint 17 // 17
    /
    retsub
