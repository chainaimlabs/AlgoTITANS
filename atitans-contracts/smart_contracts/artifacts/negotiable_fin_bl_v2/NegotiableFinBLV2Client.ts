/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"NegotiableFinBLV2","structs":{},"methods":[{"name":"hello","args":[{"type":"string","name":"name"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Test method (exact V1 compatibility)","events":[],"recommendations":{}},{"name":"createEnhancedFinancialBL","args":[{"type":"string","name":"description"},{"type":"uint64","name":"cargoValue"},{"type":"uint64","name":"blType"},{"type":"uint64","name":"creditRating"},{"type":"uint64","name":"riskScore"},{"type":"uint64","name":"yieldRate"},{"type":"string","name":"vleiID"},{"type":"string","name":"jurisdictionCode"},{"type":"string","name":"complianceHash"},{"type":"string","name":"incoterms"},{"type":"string","name":"insurancePolicyID"},{"type":"string","name":"lcrReference"},{"type":"uint64","name":"totalShares"},{"type":"uint64","name":"minInvestment"},{"type":"string","name":"dcsaVersion"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Enhanced Financial BL Creation (builds on V1 createFinancialBL)","events":[],"recommendations":{}},{"name":"getEnhancedBLInfo","args":[{"type":"uint64","name":"blId"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Enhanced BL information retrieval (builds on V1 getBLFinancialInfo)","events":[],"recommendations":{}},{"name":"fractionalizeForTrading","args":[{"type":"uint64","name":"blId"},{"type":"uint64","name":"sharesToSell"},{"type":"uint64","name":"pricePerShare"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Fractionalization for MSME access (RWA innovation - simple implementation)","events":[],"recommendations":{}},{"name":"calculateEnhancedYield","args":[{"type":"uint64","name":"blId"},{"type":"uint64","name":"investmentAmount"},{"type":"uint64","name":"riskAdjustment"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Enhanced yield calculation with risk factors (builds on V1 calculateYield)","events":[],"recommendations":{}},{"name":"verifyEnhancedCompliance","args":[{"type":"uint64","name":"blId"},{"type":"string","name":"vleiProof"},{"type":"string","name":"dcsaHash"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Enhanced compliance verification with vLEI (RWA innovation)","events":[],"recommendations":{}},{"name":"initiateCrossBorderSettlement","args":[{"type":"uint64","name":"blId"},{"type":"uint64","name":"stablecoinAssetId"},{"type":"uint64","name":"amount"},{"type":"string","name":"targetCurrency"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Cross-border settlement support (RWA innovation)","events":[],"recommendations":{}},{"name":"getEnhancedCounters","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Enhanced counter information (builds on V1 getCounters)","events":[],"recommendations":{}},{"name":"setMarketplaceContract","args":[{"type":"string","name":"marketplaceAddress"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Set marketplace contract for atomic settlement (RWA innovation)","events":[],"recommendations":{}},{"name":"getUserPortfolio","args":[{"type":"string","name":"userAddress"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"User portfolio information (RWA innovation - simple implementation)","events":[],"recommendations":{}},{"name":"generateAuditTrail","args":[{"type":"uint64","name":"blId"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Regulatory audit trail (RWA innovation)","events":[],"recommendations":{}},{"name":"getBLFinancialInfo","args":[{"type":"string","name":"blId"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"V1 compatibility methods - exactly like V1","events":[],"recommendations":{}},{"name":"verifyCompliance","args":[{"type":"string","name":"blId"},{"type":"string","name":"regulatoryHash"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"tokenizeForTrading","args":[{"type":"string","name":"blId"},{"type":"uint64","name":"fractionalShares"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"calculateYield","args":[{"type":"string","name":"blId"},{"type":"uint64","name":"investmentAmount"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getCounters","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":4,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{"blCounter":{"keyType":"AVMString","valueType":"AVMUint64","key":"YmxDb3VudGVy"},"totalValueLocked":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxWYWx1ZUxvY2tlZA=="},"totalBLsActive":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxCTHNBY3RpdmU="},"totalYieldGenerated":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxZaWVsZEdlbmVyYXRlZA=="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[187,259,286,320,356,386,461,533,613,693,775,852,881,955,1045,1138],"errorMessage":"OnCompletion is not NoOp"},{"pc":[1173],"errorMessage":"can only call when creating"},{"pc":[190,262,289,323,359,389,464,536,616,696,778,855,884,958,1048,1141],"errorMessage":"can only call when not creating"},{"pc":[1253,1262,1266,1276],"errorMessage":"check GlobalState exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiACAQAmBQQVH3x1CWJsQ291bnRlchB0b3RhbFZhbHVlTG9ja2VkDnRvdGFsQkxzQWN0aXZlA0JMIDEbQQROghAEAr7OEQRNaIqNBOzKj0AEMBihtAQPeyxYBMsqVZYE6IoY1wRT7dZmBL3O7pcE+wtOYwRr6essBJvQExAEBLMT3ATxuUCpBOm67CsEBJT5DzYaAI4QA7kDXAMCArgCmwJOAfwBrAFcARQAyQCrAIcAZQBKAAIjQzEZFEQxGESAPBUffHUANkVuaGFuY2VkIGNvdW50ZXJzIGF2YWlsYWJsZSB3aXRoIGFkZGl0aW9uYWwgVjIgbWV0cmljc7AiQzEZFEQxGEQ2GgFXAgA2GgIXiASEFihMULAiQzEZFEQxGEQ2GgFXAgA2GgIXiAQ7SRUWVwYCTFAoTFCwIkMxGRREMRhENhoBVwIANhoCVwIAiAPuSRUWVwYCTFAoTFCwIkMxGRREMRhENhoBVwIAiAObSRUWVwYCTFAoTFCwIkMxGRREMRhEgD8VH3x1ADlBdWRpdCBUcmFpbDogSW1tdXRhYmxlIGNvbXBsaWFuY2UgcmVjb3JkIGdlbmVyYXRlZCBmb3IgQkywIkMxGRREMRhEgDwVH3x1ADZVc2VyIFBvcnRmb2xpbyBkYXRhIGF2YWlsYWJsZSBmb3IgZW5oYW5jZWQgQkwgdHJhY2tpbmewIkMxGRREMRhEgEQVH3x1AD5NYXJrZXRwbGFjZSBjb250cmFjdCBsaW5rZWQgZm9yIGF0b21pYyBzZXR0bGVtZW50IGNhcGFiaWxpdGllc7AiQzEZFEQxGESARBUffHUAPkVuaGFuY2VkIENvdW50ZXJzIGF2YWlsYWJsZSB3aXRoIEJMIGNvdW50LCBUVkwsIGFuZCBhY3RpdmUgQkxzsCJDMRkURDEYRIBGFR98dQBAQ3Jvc3MtYm9yZGVyIHNldHRsZW1lbnQgaW5pdGlhdGVkIGZvciBCTCB3aXRoIHN0YWJsZWNvaW4gc3VwcG9ydLAiQzEZFEQxGESAQRUffHUAO0JMIGNvbXBsaWFuY2UgdmVyaWZpZWQ6IHZMRUkgKyBEQ1NBIDMuMCB2YWxpZGF0aW9uIGNvbXBsZXRlsCJDMRkURDEYRDYaARc2GgIXNhoDF4gBnBYoTFCwIkMxGRREMRhEgD4VH3x1ADhCTCBmcmFjdGlvbmFsaXplZCB3aXRoIHNoYXJlcyBhdmFpbGFibGUgZm9yIE1TTUUgdHJhZGluZ7AiQzEZFEQxGESAThUffHUASEVuaGFuY2VkIEZpbkJMOiBBZHZhbmNlZCBmaW5hbmNpYWwgaW5mbyB3aXRoIGZyYWN0aW9uYWxpemF0aW9uIGF2YWlsYWJsZbAiQzEZFEQxGEQ2GgFXAgA2GgIXNhoDFzYaBBc2GgUXNhoGFzYaB1cCADYaCFcCADYaCVcCADYaClcCADYaC1cCADYaDFcCADYaDRc2Gg4XNhoPVwIAiABWFihMULAiQzEZFEQxGEQ2GgFXAgCIABlJFRZXBgJMUChMULAiQzEZQPwkMRgURCJDigEBgB1IZWxsbyBmcm9tIEZpbkJMVjIgRW5oYW5jZWQsIIv/UImKDwEjKWVFAUAAAykjZyMqZUUBQAADKiNnIytlRQFAAAMrI2cjKWVEIggpTGcjKWVEIyplRIvyCCpMZyMrZUQiCCtMZ4mKAwGL/oEUComKAQGABkZpbkJMIIv/UIAjOiBFbmhhbmNlZCBmaW5hbmNpYWwgaW5mbyBhdmFpbGFibGVQiYoCAScEi/5QgB0gZW5oYW5jZWQgY29tcGxpYW5jZSB2ZXJpZmllZFCJigIBJwSL/lCAIiBlbmhhbmNlZCB0b2tlbml6YXRpb24gZm9yIHRyYWRpbmdQiYoCAYv/gREKiQ==","clear":"CoEBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the NegotiableFinBlv2 contract
 */
export type NegotiableFinBlv2Args = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'hello(string)string': {
      name: string
    }
    'createEnhancedFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string,uint64,uint64,string)uint64': {
      description: string
      cargoValue: bigint | number
      blType: bigint | number
      creditRating: bigint | number
      riskScore: bigint | number
      yieldRate: bigint | number
      vleiId: string
      jurisdictionCode: string
      complianceHash: string
      incoterms: string
      insurancePolicyId: string
      lcrReference: string
      totalShares: bigint | number
      minInvestment: bigint | number
      dcsaVersion: string
    }
    'getEnhancedBLInfo(uint64)string': {
      blId: bigint | number
    }
    'fractionalizeForTrading(uint64,uint64,uint64)string': {
      blId: bigint | number
      sharesToSell: bigint | number
      pricePerShare: bigint | number
    }
    'calculateEnhancedYield(uint64,uint64,uint64)uint64': {
      blId: bigint | number
      investmentAmount: bigint | number
      riskAdjustment: bigint | number
    }
    'verifyEnhancedCompliance(uint64,string,string)string': {
      blId: bigint | number
      vleiProof: string
      dcsaHash: string
    }
    'initiateCrossBorderSettlement(uint64,uint64,uint64,string)string': {
      blId: bigint | number
      stablecoinAssetId: bigint | number
      amount: bigint | number
      targetCurrency: string
    }
    'getEnhancedCounters()string': Record<string, never>
    'setMarketplaceContract(string)string': {
      marketplaceAddress: string
    }
    'getUserPortfolio(string)string': {
      userAddress: string
    }
    'generateAuditTrail(uint64)string': {
      blId: bigint | number
    }
    'getBLFinancialInfo(string)string': {
      blId: string
    }
    'verifyCompliance(string,string)string': {
      blId: string
      regulatoryHash: string
    }
    'tokenizeForTrading(string,uint64)string': {
      blId: string
      fractionalShares: bigint | number
    }
    'calculateYield(string,uint64)uint64': {
      blId: string
      investmentAmount: bigint | number
    }
    'getCounters()string': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'hello(string)string': [name: string]
    'createEnhancedFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string,uint64,uint64,string)uint64': [description: string, cargoValue: bigint | number, blType: bigint | number, creditRating: bigint | number, riskScore: bigint | number, yieldRate: bigint | number, vleiId: string, jurisdictionCode: string, complianceHash: string, incoterms: string, insurancePolicyId: string, lcrReference: string, totalShares: bigint | number, minInvestment: bigint | number, dcsaVersion: string]
    'getEnhancedBLInfo(uint64)string': [blId: bigint | number]
    'fractionalizeForTrading(uint64,uint64,uint64)string': [blId: bigint | number, sharesToSell: bigint | number, pricePerShare: bigint | number]
    'calculateEnhancedYield(uint64,uint64,uint64)uint64': [blId: bigint | number, investmentAmount: bigint | number, riskAdjustment: bigint | number]
    'verifyEnhancedCompliance(uint64,string,string)string': [blId: bigint | number, vleiProof: string, dcsaHash: string]
    'initiateCrossBorderSettlement(uint64,uint64,uint64,string)string': [blId: bigint | number, stablecoinAssetId: bigint | number, amount: bigint | number, targetCurrency: string]
    'getEnhancedCounters()string': []
    'setMarketplaceContract(string)string': [marketplaceAddress: string]
    'getUserPortfolio(string)string': [userAddress: string]
    'generateAuditTrail(uint64)string': [blId: bigint | number]
    'getBLFinancialInfo(string)string': [blId: string]
    'verifyCompliance(string,string)string': [blId: string, regulatoryHash: string]
    'tokenizeForTrading(string,uint64)string': [blId: string, fractionalShares: bigint | number]
    'calculateYield(string,uint64)uint64': [blId: string, investmentAmount: bigint | number]
    'getCounters()string': []
  }
}

/**
 * The return type for each method
 */
export type NegotiableFinBlv2Returns = {
  'hello(string)string': string
  'createEnhancedFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string,uint64,uint64,string)uint64': bigint
  'getEnhancedBLInfo(uint64)string': string
  'fractionalizeForTrading(uint64,uint64,uint64)string': string
  'calculateEnhancedYield(uint64,uint64,uint64)uint64': bigint
  'verifyEnhancedCompliance(uint64,string,string)string': string
  'initiateCrossBorderSettlement(uint64,uint64,uint64,string)string': string
  'getEnhancedCounters()string': string
  'setMarketplaceContract(string)string': string
  'getUserPortfolio(string)string': string
  'generateAuditTrail(uint64)string': string
  'getBLFinancialInfo(string)string': string
  'verifyCompliance(string,string)string': string
  'tokenizeForTrading(string,uint64)string': string
  'calculateYield(string,uint64)uint64': bigint
  'getCounters()string': string
}

/**
 * Defines the types of available calls and state of the NegotiableFinBlv2 smart contract.
 */
export type NegotiableFinBlv2Types = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'hello(string)string' | 'hello', {
      argsObj: NegotiableFinBlv2Args['obj']['hello(string)string']
      argsTuple: NegotiableFinBlv2Args['tuple']['hello(string)string']
      returns: NegotiableFinBlv2Returns['hello(string)string']
    }>
    & Record<'createEnhancedFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string,uint64,uint64,string)uint64' | 'createEnhancedFinancialBL', {
      argsObj: NegotiableFinBlv2Args['obj']['createEnhancedFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string,uint64,uint64,string)uint64']
      argsTuple: NegotiableFinBlv2Args['tuple']['createEnhancedFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string,uint64,uint64,string)uint64']
      returns: NegotiableFinBlv2Returns['createEnhancedFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string,uint64,uint64,string)uint64']
    }>
    & Record<'getEnhancedBLInfo(uint64)string' | 'getEnhancedBLInfo', {
      argsObj: NegotiableFinBlv2Args['obj']['getEnhancedBLInfo(uint64)string']
      argsTuple: NegotiableFinBlv2Args['tuple']['getEnhancedBLInfo(uint64)string']
      returns: NegotiableFinBlv2Returns['getEnhancedBLInfo(uint64)string']
    }>
    & Record<'fractionalizeForTrading(uint64,uint64,uint64)string' | 'fractionalizeForTrading', {
      argsObj: NegotiableFinBlv2Args['obj']['fractionalizeForTrading(uint64,uint64,uint64)string']
      argsTuple: NegotiableFinBlv2Args['tuple']['fractionalizeForTrading(uint64,uint64,uint64)string']
      returns: NegotiableFinBlv2Returns['fractionalizeForTrading(uint64,uint64,uint64)string']
    }>
    & Record<'calculateEnhancedYield(uint64,uint64,uint64)uint64' | 'calculateEnhancedYield', {
      argsObj: NegotiableFinBlv2Args['obj']['calculateEnhancedYield(uint64,uint64,uint64)uint64']
      argsTuple: NegotiableFinBlv2Args['tuple']['calculateEnhancedYield(uint64,uint64,uint64)uint64']
      returns: NegotiableFinBlv2Returns['calculateEnhancedYield(uint64,uint64,uint64)uint64']
    }>
    & Record<'verifyEnhancedCompliance(uint64,string,string)string' | 'verifyEnhancedCompliance', {
      argsObj: NegotiableFinBlv2Args['obj']['verifyEnhancedCompliance(uint64,string,string)string']
      argsTuple: NegotiableFinBlv2Args['tuple']['verifyEnhancedCompliance(uint64,string,string)string']
      returns: NegotiableFinBlv2Returns['verifyEnhancedCompliance(uint64,string,string)string']
    }>
    & Record<'initiateCrossBorderSettlement(uint64,uint64,uint64,string)string' | 'initiateCrossBorderSettlement', {
      argsObj: NegotiableFinBlv2Args['obj']['initiateCrossBorderSettlement(uint64,uint64,uint64,string)string']
      argsTuple: NegotiableFinBlv2Args['tuple']['initiateCrossBorderSettlement(uint64,uint64,uint64,string)string']
      returns: NegotiableFinBlv2Returns['initiateCrossBorderSettlement(uint64,uint64,uint64,string)string']
    }>
    & Record<'getEnhancedCounters()string' | 'getEnhancedCounters', {
      argsObj: NegotiableFinBlv2Args['obj']['getEnhancedCounters()string']
      argsTuple: NegotiableFinBlv2Args['tuple']['getEnhancedCounters()string']
      returns: NegotiableFinBlv2Returns['getEnhancedCounters()string']
    }>
    & Record<'setMarketplaceContract(string)string' | 'setMarketplaceContract', {
      argsObj: NegotiableFinBlv2Args['obj']['setMarketplaceContract(string)string']
      argsTuple: NegotiableFinBlv2Args['tuple']['setMarketplaceContract(string)string']
      returns: NegotiableFinBlv2Returns['setMarketplaceContract(string)string']
    }>
    & Record<'getUserPortfolio(string)string' | 'getUserPortfolio', {
      argsObj: NegotiableFinBlv2Args['obj']['getUserPortfolio(string)string']
      argsTuple: NegotiableFinBlv2Args['tuple']['getUserPortfolio(string)string']
      returns: NegotiableFinBlv2Returns['getUserPortfolio(string)string']
    }>
    & Record<'generateAuditTrail(uint64)string' | 'generateAuditTrail', {
      argsObj: NegotiableFinBlv2Args['obj']['generateAuditTrail(uint64)string']
      argsTuple: NegotiableFinBlv2Args['tuple']['generateAuditTrail(uint64)string']
      returns: NegotiableFinBlv2Returns['generateAuditTrail(uint64)string']
    }>
    & Record<'getBLFinancialInfo(string)string' | 'getBLFinancialInfo', {
      argsObj: NegotiableFinBlv2Args['obj']['getBLFinancialInfo(string)string']
      argsTuple: NegotiableFinBlv2Args['tuple']['getBLFinancialInfo(string)string']
      returns: NegotiableFinBlv2Returns['getBLFinancialInfo(string)string']
    }>
    & Record<'verifyCompliance(string,string)string' | 'verifyCompliance', {
      argsObj: NegotiableFinBlv2Args['obj']['verifyCompliance(string,string)string']
      argsTuple: NegotiableFinBlv2Args['tuple']['verifyCompliance(string,string)string']
      returns: NegotiableFinBlv2Returns['verifyCompliance(string,string)string']
    }>
    & Record<'tokenizeForTrading(string,uint64)string' | 'tokenizeForTrading', {
      argsObj: NegotiableFinBlv2Args['obj']['tokenizeForTrading(string,uint64)string']
      argsTuple: NegotiableFinBlv2Args['tuple']['tokenizeForTrading(string,uint64)string']
      returns: NegotiableFinBlv2Returns['tokenizeForTrading(string,uint64)string']
    }>
    & Record<'calculateYield(string,uint64)uint64' | 'calculateYield', {
      argsObj: NegotiableFinBlv2Args['obj']['calculateYield(string,uint64)uint64']
      argsTuple: NegotiableFinBlv2Args['tuple']['calculateYield(string,uint64)uint64']
      returns: NegotiableFinBlv2Returns['calculateYield(string,uint64)uint64']
    }>
    & Record<'getCounters()string' | 'getCounters', {
      argsObj: NegotiableFinBlv2Args['obj']['getCounters()string']
      argsTuple: NegotiableFinBlv2Args['tuple']['getCounters()string']
      returns: NegotiableFinBlv2Returns['getCounters()string']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        blCounter: bigint
        totalValueLocked: bigint
        totalBLsActive: bigint
        totalYieldGenerated: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type NegotiableFinBlv2Signatures = keyof NegotiableFinBlv2Types['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type NegotiableFinBlv2NonVoidMethodSignatures = keyof NegotiableFinBlv2Types['methods'] extends infer T ? T extends keyof NegotiableFinBlv2Types['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the NegotiableFinBlv2 smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends NegotiableFinBlv2Signatures> = NegotiableFinBlv2Types['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the NegotiableFinBlv2 smart contract to the method's return type
 */
export type MethodReturn<TSignature extends NegotiableFinBlv2Signatures> = NegotiableFinBlv2Types['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = NegotiableFinBlv2Types['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type NegotiableFinBlv2CreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type NegotiableFinBlv2DeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: NegotiableFinBlv2CreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the NegotiableFinBlv2 smart contract
 */
export abstract class NegotiableFinBlv2ParamsFactory {
  /**
   * Constructs a no op call for the hello(string)string ABI method
   *
   * Test method (exact V1 compatibility)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static hello(params: CallParams<NegotiableFinBlv2Args['obj']['hello(string)string'] | NegotiableFinBlv2Args['tuple']['hello(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'hello(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name],
    }
  }
  /**
   * Constructs a no op call for the createEnhancedFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string,uint64,uint64,string)uint64 ABI method
   *
   * Enhanced Financial BL Creation (builds on V1 createFinancialBL)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createEnhancedFinancialBl(params: CallParams<NegotiableFinBlv2Args['obj']['createEnhancedFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string,uint64,uint64,string)uint64'] | NegotiableFinBlv2Args['tuple']['createEnhancedFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string,uint64,uint64,string)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createEnhancedFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string,uint64,uint64,string)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.description, params.args.cargoValue, params.args.blType, params.args.creditRating, params.args.riskScore, params.args.yieldRate, params.args.vleiId, params.args.jurisdictionCode, params.args.complianceHash, params.args.incoterms, params.args.insurancePolicyId, params.args.lcrReference, params.args.totalShares, params.args.minInvestment, params.args.dcsaVersion],
    }
  }
  /**
   * Constructs a no op call for the getEnhancedBLInfo(uint64)string ABI method
   *
   * Enhanced BL information retrieval (builds on V1 getBLFinancialInfo)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getEnhancedBlInfo(params: CallParams<NegotiableFinBlv2Args['obj']['getEnhancedBLInfo(uint64)string'] | NegotiableFinBlv2Args['tuple']['getEnhancedBLInfo(uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getEnhancedBLInfo(uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.blId],
    }
  }
  /**
   * Constructs a no op call for the fractionalizeForTrading(uint64,uint64,uint64)string ABI method
   *
   * Fractionalization for MSME access (RWA innovation - simple implementation)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static fractionalizeForTrading(params: CallParams<NegotiableFinBlv2Args['obj']['fractionalizeForTrading(uint64,uint64,uint64)string'] | NegotiableFinBlv2Args['tuple']['fractionalizeForTrading(uint64,uint64,uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'fractionalizeForTrading(uint64,uint64,uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.blId, params.args.sharesToSell, params.args.pricePerShare],
    }
  }
  /**
   * Constructs a no op call for the calculateEnhancedYield(uint64,uint64,uint64)uint64 ABI method
   *
   * Enhanced yield calculation with risk factors (builds on V1 calculateYield)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static calculateEnhancedYield(params: CallParams<NegotiableFinBlv2Args['obj']['calculateEnhancedYield(uint64,uint64,uint64)uint64'] | NegotiableFinBlv2Args['tuple']['calculateEnhancedYield(uint64,uint64,uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'calculateEnhancedYield(uint64,uint64,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.blId, params.args.investmentAmount, params.args.riskAdjustment],
    }
  }
  /**
   * Constructs a no op call for the verifyEnhancedCompliance(uint64,string,string)string ABI method
   *
   * Enhanced compliance verification with vLEI (RWA innovation)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static verifyEnhancedCompliance(params: CallParams<NegotiableFinBlv2Args['obj']['verifyEnhancedCompliance(uint64,string,string)string'] | NegotiableFinBlv2Args['tuple']['verifyEnhancedCompliance(uint64,string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'verifyEnhancedCompliance(uint64,string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.blId, params.args.vleiProof, params.args.dcsaHash],
    }
  }
  /**
   * Constructs a no op call for the initiateCrossBorderSettlement(uint64,uint64,uint64,string)string ABI method
   *
   * Cross-border settlement support (RWA innovation)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static initiateCrossBorderSettlement(params: CallParams<NegotiableFinBlv2Args['obj']['initiateCrossBorderSettlement(uint64,uint64,uint64,string)string'] | NegotiableFinBlv2Args['tuple']['initiateCrossBorderSettlement(uint64,uint64,uint64,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'initiateCrossBorderSettlement(uint64,uint64,uint64,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.blId, params.args.stablecoinAssetId, params.args.amount, params.args.targetCurrency],
    }
  }
  /**
   * Constructs a no op call for the getEnhancedCounters()string ABI method
   *
   * Enhanced counter information (builds on V1 getCounters)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getEnhancedCounters(params: CallParams<NegotiableFinBlv2Args['obj']['getEnhancedCounters()string'] | NegotiableFinBlv2Args['tuple']['getEnhancedCounters()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getEnhancedCounters()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the setMarketplaceContract(string)string ABI method
   *
   * Set marketplace contract for atomic settlement (RWA innovation)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setMarketplaceContract(params: CallParams<NegotiableFinBlv2Args['obj']['setMarketplaceContract(string)string'] | NegotiableFinBlv2Args['tuple']['setMarketplaceContract(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setMarketplaceContract(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.marketplaceAddress],
    }
  }
  /**
   * Constructs a no op call for the getUserPortfolio(string)string ABI method
   *
   * User portfolio information (RWA innovation - simple implementation)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getUserPortfolio(params: CallParams<NegotiableFinBlv2Args['obj']['getUserPortfolio(string)string'] | NegotiableFinBlv2Args['tuple']['getUserPortfolio(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getUserPortfolio(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.userAddress],
    }
  }
  /**
   * Constructs a no op call for the generateAuditTrail(uint64)string ABI method
   *
   * Regulatory audit trail (RWA innovation)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static generateAuditTrail(params: CallParams<NegotiableFinBlv2Args['obj']['generateAuditTrail(uint64)string'] | NegotiableFinBlv2Args['tuple']['generateAuditTrail(uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'generateAuditTrail(uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.blId],
    }
  }
  /**
   * Constructs a no op call for the getBLFinancialInfo(string)string ABI method
   *
   * V1 compatibility methods - exactly like V1
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getBlFinancialInfo(params: CallParams<NegotiableFinBlv2Args['obj']['getBLFinancialInfo(string)string'] | NegotiableFinBlv2Args['tuple']['getBLFinancialInfo(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getBLFinancialInfo(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.blId],
    }
  }
  /**
   * Constructs a no op call for the verifyCompliance(string,string)string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static verifyCompliance(params: CallParams<NegotiableFinBlv2Args['obj']['verifyCompliance(string,string)string'] | NegotiableFinBlv2Args['tuple']['verifyCompliance(string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'verifyCompliance(string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.blId, params.args.regulatoryHash],
    }
  }
  /**
   * Constructs a no op call for the tokenizeForTrading(string,uint64)string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static tokenizeForTrading(params: CallParams<NegotiableFinBlv2Args['obj']['tokenizeForTrading(string,uint64)string'] | NegotiableFinBlv2Args['tuple']['tokenizeForTrading(string,uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'tokenizeForTrading(string,uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.blId, params.args.fractionalShares],
    }
  }
  /**
   * Constructs a no op call for the calculateYield(string,uint64)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static calculateYield(params: CallParams<NegotiableFinBlv2Args['obj']['calculateYield(string,uint64)uint64'] | NegotiableFinBlv2Args['tuple']['calculateYield(string,uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'calculateYield(string,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.blId, params.args.investmentAmount],
    }
  }
  /**
   * Constructs a no op call for the getCounters()string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getCounters(params: CallParams<NegotiableFinBlv2Args['obj']['getCounters()string'] | NegotiableFinBlv2Args['tuple']['getCounters()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getCounters()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the NegotiableFinBLV2 smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class NegotiableFinBlv2Factory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `NegotiableFinBlv2Factory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new NegotiableFinBlv2Client(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new NegotiableFinBlv2Client(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the NegotiableFinBLV2 smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: NegotiableFinBlv2DeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new NegotiableFinBlv2Client(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the NegotiableFinBLV2 smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the NegotiableFinBLV2 smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the NegotiableFinBLV2 smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new NegotiableFinBlv2Client(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the NegotiableFinBLV2 smart contract
 */
export class NegotiableFinBlv2Client {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `NegotiableFinBlv2Client`
   *
   * @param appClient An `AppClient` instance which has been created with the NegotiableFinBlv2 app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `NegotiableFinBlv2Client`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends NegotiableFinBlv2NonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `NegotiableFinBlv2Client` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<NegotiableFinBlv2Client> {
    return new NegotiableFinBlv2Client(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `NegotiableFinBlv2Client` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<NegotiableFinBlv2Client> {
    return new NegotiableFinBlv2Client(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the NegotiableFinBLV2 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the NegotiableFinBLV2 smart contract using the `hello(string)string` ABI method.
     *
     * Test method (exact V1 compatibility)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    hello: (params: CallParams<NegotiableFinBlv2Args['obj']['hello(string)string'] | NegotiableFinBlv2Args['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(NegotiableFinBlv2ParamsFactory.hello(params))
    },

    /**
     * Makes a call to the NegotiableFinBLV2 smart contract using the `createEnhancedFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string,uint64,uint64,string)uint64` ABI method.
     *
     * Enhanced Financial BL Creation (builds on V1 createFinancialBL)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createEnhancedFinancialBl: (params: CallParams<NegotiableFinBlv2Args['obj']['createEnhancedFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string,uint64,uint64,string)uint64'] | NegotiableFinBlv2Args['tuple']['createEnhancedFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string,uint64,uint64,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(NegotiableFinBlv2ParamsFactory.createEnhancedFinancialBl(params))
    },

    /**
     * Makes a call to the NegotiableFinBLV2 smart contract using the `getEnhancedBLInfo(uint64)string` ABI method.
     *
     * Enhanced BL information retrieval (builds on V1 getBLFinancialInfo)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getEnhancedBlInfo: (params: CallParams<NegotiableFinBlv2Args['obj']['getEnhancedBLInfo(uint64)string'] | NegotiableFinBlv2Args['tuple']['getEnhancedBLInfo(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(NegotiableFinBlv2ParamsFactory.getEnhancedBlInfo(params))
    },

    /**
     * Makes a call to the NegotiableFinBLV2 smart contract using the `fractionalizeForTrading(uint64,uint64,uint64)string` ABI method.
     *
     * Fractionalization for MSME access (RWA innovation - simple implementation)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    fractionalizeForTrading: (params: CallParams<NegotiableFinBlv2Args['obj']['fractionalizeForTrading(uint64,uint64,uint64)string'] | NegotiableFinBlv2Args['tuple']['fractionalizeForTrading(uint64,uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(NegotiableFinBlv2ParamsFactory.fractionalizeForTrading(params))
    },

    /**
     * Makes a call to the NegotiableFinBLV2 smart contract using the `calculateEnhancedYield(uint64,uint64,uint64)uint64` ABI method.
     *
     * Enhanced yield calculation with risk factors (builds on V1 calculateYield)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    calculateEnhancedYield: (params: CallParams<NegotiableFinBlv2Args['obj']['calculateEnhancedYield(uint64,uint64,uint64)uint64'] | NegotiableFinBlv2Args['tuple']['calculateEnhancedYield(uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(NegotiableFinBlv2ParamsFactory.calculateEnhancedYield(params))
    },

    /**
     * Makes a call to the NegotiableFinBLV2 smart contract using the `verifyEnhancedCompliance(uint64,string,string)string` ABI method.
     *
     * Enhanced compliance verification with vLEI (RWA innovation)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    verifyEnhancedCompliance: (params: CallParams<NegotiableFinBlv2Args['obj']['verifyEnhancedCompliance(uint64,string,string)string'] | NegotiableFinBlv2Args['tuple']['verifyEnhancedCompliance(uint64,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(NegotiableFinBlv2ParamsFactory.verifyEnhancedCompliance(params))
    },

    /**
     * Makes a call to the NegotiableFinBLV2 smart contract using the `initiateCrossBorderSettlement(uint64,uint64,uint64,string)string` ABI method.
     *
     * Cross-border settlement support (RWA innovation)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    initiateCrossBorderSettlement: (params: CallParams<NegotiableFinBlv2Args['obj']['initiateCrossBorderSettlement(uint64,uint64,uint64,string)string'] | NegotiableFinBlv2Args['tuple']['initiateCrossBorderSettlement(uint64,uint64,uint64,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(NegotiableFinBlv2ParamsFactory.initiateCrossBorderSettlement(params))
    },

    /**
     * Makes a call to the NegotiableFinBLV2 smart contract using the `getEnhancedCounters()string` ABI method.
     *
     * Enhanced counter information (builds on V1 getCounters)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getEnhancedCounters: (params: CallParams<NegotiableFinBlv2Args['obj']['getEnhancedCounters()string'] | NegotiableFinBlv2Args['tuple']['getEnhancedCounters()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(NegotiableFinBlv2ParamsFactory.getEnhancedCounters(params))
    },

    /**
     * Makes a call to the NegotiableFinBLV2 smart contract using the `setMarketplaceContract(string)string` ABI method.
     *
     * Set marketplace contract for atomic settlement (RWA innovation)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setMarketplaceContract: (params: CallParams<NegotiableFinBlv2Args['obj']['setMarketplaceContract(string)string'] | NegotiableFinBlv2Args['tuple']['setMarketplaceContract(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(NegotiableFinBlv2ParamsFactory.setMarketplaceContract(params))
    },

    /**
     * Makes a call to the NegotiableFinBLV2 smart contract using the `getUserPortfolio(string)string` ABI method.
     *
     * User portfolio information (RWA innovation - simple implementation)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getUserPortfolio: (params: CallParams<NegotiableFinBlv2Args['obj']['getUserPortfolio(string)string'] | NegotiableFinBlv2Args['tuple']['getUserPortfolio(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(NegotiableFinBlv2ParamsFactory.getUserPortfolio(params))
    },

    /**
     * Makes a call to the NegotiableFinBLV2 smart contract using the `generateAuditTrail(uint64)string` ABI method.
     *
     * Regulatory audit trail (RWA innovation)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    generateAuditTrail: (params: CallParams<NegotiableFinBlv2Args['obj']['generateAuditTrail(uint64)string'] | NegotiableFinBlv2Args['tuple']['generateAuditTrail(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(NegotiableFinBlv2ParamsFactory.generateAuditTrail(params))
    },

    /**
     * Makes a call to the NegotiableFinBLV2 smart contract using the `getBLFinancialInfo(string)string` ABI method.
     *
     * V1 compatibility methods - exactly like V1
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getBlFinancialInfo: (params: CallParams<NegotiableFinBlv2Args['obj']['getBLFinancialInfo(string)string'] | NegotiableFinBlv2Args['tuple']['getBLFinancialInfo(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(NegotiableFinBlv2ParamsFactory.getBlFinancialInfo(params))
    },

    /**
     * Makes a call to the NegotiableFinBLV2 smart contract using the `verifyCompliance(string,string)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    verifyCompliance: (params: CallParams<NegotiableFinBlv2Args['obj']['verifyCompliance(string,string)string'] | NegotiableFinBlv2Args['tuple']['verifyCompliance(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(NegotiableFinBlv2ParamsFactory.verifyCompliance(params))
    },

    /**
     * Makes a call to the NegotiableFinBLV2 smart contract using the `tokenizeForTrading(string,uint64)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    tokenizeForTrading: (params: CallParams<NegotiableFinBlv2Args['obj']['tokenizeForTrading(string,uint64)string'] | NegotiableFinBlv2Args['tuple']['tokenizeForTrading(string,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(NegotiableFinBlv2ParamsFactory.tokenizeForTrading(params))
    },

    /**
     * Makes a call to the NegotiableFinBLV2 smart contract using the `calculateYield(string,uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    calculateYield: (params: CallParams<NegotiableFinBlv2Args['obj']['calculateYield(string,uint64)uint64'] | NegotiableFinBlv2Args['tuple']['calculateYield(string,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(NegotiableFinBlv2ParamsFactory.calculateYield(params))
    },

    /**
     * Makes a call to the NegotiableFinBLV2 smart contract using the `getCounters()string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getCounters: (params: CallParams<NegotiableFinBlv2Args['obj']['getCounters()string'] | NegotiableFinBlv2Args['tuple']['getCounters()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(NegotiableFinBlv2ParamsFactory.getCounters(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the NegotiableFinBLV2 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the NegotiableFinBLV2 smart contract using the `hello(string)string` ABI method.
     *
     * Test method (exact V1 compatibility)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    hello: (params: CallParams<NegotiableFinBlv2Args['obj']['hello(string)string'] | NegotiableFinBlv2Args['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(NegotiableFinBlv2ParamsFactory.hello(params))
    },

    /**
     * Makes a call to the NegotiableFinBLV2 smart contract using the `createEnhancedFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string,uint64,uint64,string)uint64` ABI method.
     *
     * Enhanced Financial BL Creation (builds on V1 createFinancialBL)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createEnhancedFinancialBl: (params: CallParams<NegotiableFinBlv2Args['obj']['createEnhancedFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string,uint64,uint64,string)uint64'] | NegotiableFinBlv2Args['tuple']['createEnhancedFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string,uint64,uint64,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(NegotiableFinBlv2ParamsFactory.createEnhancedFinancialBl(params))
    },

    /**
     * Makes a call to the NegotiableFinBLV2 smart contract using the `getEnhancedBLInfo(uint64)string` ABI method.
     *
     * Enhanced BL information retrieval (builds on V1 getBLFinancialInfo)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getEnhancedBlInfo: (params: CallParams<NegotiableFinBlv2Args['obj']['getEnhancedBLInfo(uint64)string'] | NegotiableFinBlv2Args['tuple']['getEnhancedBLInfo(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(NegotiableFinBlv2ParamsFactory.getEnhancedBlInfo(params))
    },

    /**
     * Makes a call to the NegotiableFinBLV2 smart contract using the `fractionalizeForTrading(uint64,uint64,uint64)string` ABI method.
     *
     * Fractionalization for MSME access (RWA innovation - simple implementation)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    fractionalizeForTrading: (params: CallParams<NegotiableFinBlv2Args['obj']['fractionalizeForTrading(uint64,uint64,uint64)string'] | NegotiableFinBlv2Args['tuple']['fractionalizeForTrading(uint64,uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(NegotiableFinBlv2ParamsFactory.fractionalizeForTrading(params))
    },

    /**
     * Makes a call to the NegotiableFinBLV2 smart contract using the `calculateEnhancedYield(uint64,uint64,uint64)uint64` ABI method.
     *
     * Enhanced yield calculation with risk factors (builds on V1 calculateYield)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    calculateEnhancedYield: (params: CallParams<NegotiableFinBlv2Args['obj']['calculateEnhancedYield(uint64,uint64,uint64)uint64'] | NegotiableFinBlv2Args['tuple']['calculateEnhancedYield(uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(NegotiableFinBlv2ParamsFactory.calculateEnhancedYield(params))
    },

    /**
     * Makes a call to the NegotiableFinBLV2 smart contract using the `verifyEnhancedCompliance(uint64,string,string)string` ABI method.
     *
     * Enhanced compliance verification with vLEI (RWA innovation)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    verifyEnhancedCompliance: (params: CallParams<NegotiableFinBlv2Args['obj']['verifyEnhancedCompliance(uint64,string,string)string'] | NegotiableFinBlv2Args['tuple']['verifyEnhancedCompliance(uint64,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(NegotiableFinBlv2ParamsFactory.verifyEnhancedCompliance(params))
    },

    /**
     * Makes a call to the NegotiableFinBLV2 smart contract using the `initiateCrossBorderSettlement(uint64,uint64,uint64,string)string` ABI method.
     *
     * Cross-border settlement support (RWA innovation)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    initiateCrossBorderSettlement: (params: CallParams<NegotiableFinBlv2Args['obj']['initiateCrossBorderSettlement(uint64,uint64,uint64,string)string'] | NegotiableFinBlv2Args['tuple']['initiateCrossBorderSettlement(uint64,uint64,uint64,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(NegotiableFinBlv2ParamsFactory.initiateCrossBorderSettlement(params))
    },

    /**
     * Makes a call to the NegotiableFinBLV2 smart contract using the `getEnhancedCounters()string` ABI method.
     *
     * Enhanced counter information (builds on V1 getCounters)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getEnhancedCounters: (params: CallParams<NegotiableFinBlv2Args['obj']['getEnhancedCounters()string'] | NegotiableFinBlv2Args['tuple']['getEnhancedCounters()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(NegotiableFinBlv2ParamsFactory.getEnhancedCounters(params))
    },

    /**
     * Makes a call to the NegotiableFinBLV2 smart contract using the `setMarketplaceContract(string)string` ABI method.
     *
     * Set marketplace contract for atomic settlement (RWA innovation)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setMarketplaceContract: (params: CallParams<NegotiableFinBlv2Args['obj']['setMarketplaceContract(string)string'] | NegotiableFinBlv2Args['tuple']['setMarketplaceContract(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(NegotiableFinBlv2ParamsFactory.setMarketplaceContract(params))
    },

    /**
     * Makes a call to the NegotiableFinBLV2 smart contract using the `getUserPortfolio(string)string` ABI method.
     *
     * User portfolio information (RWA innovation - simple implementation)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getUserPortfolio: (params: CallParams<NegotiableFinBlv2Args['obj']['getUserPortfolio(string)string'] | NegotiableFinBlv2Args['tuple']['getUserPortfolio(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(NegotiableFinBlv2ParamsFactory.getUserPortfolio(params))
    },

    /**
     * Makes a call to the NegotiableFinBLV2 smart contract using the `generateAuditTrail(uint64)string` ABI method.
     *
     * Regulatory audit trail (RWA innovation)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    generateAuditTrail: (params: CallParams<NegotiableFinBlv2Args['obj']['generateAuditTrail(uint64)string'] | NegotiableFinBlv2Args['tuple']['generateAuditTrail(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(NegotiableFinBlv2ParamsFactory.generateAuditTrail(params))
    },

    /**
     * Makes a call to the NegotiableFinBLV2 smart contract using the `getBLFinancialInfo(string)string` ABI method.
     *
     * V1 compatibility methods - exactly like V1
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getBlFinancialInfo: (params: CallParams<NegotiableFinBlv2Args['obj']['getBLFinancialInfo(string)string'] | NegotiableFinBlv2Args['tuple']['getBLFinancialInfo(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(NegotiableFinBlv2ParamsFactory.getBlFinancialInfo(params))
    },

    /**
     * Makes a call to the NegotiableFinBLV2 smart contract using the `verifyCompliance(string,string)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    verifyCompliance: (params: CallParams<NegotiableFinBlv2Args['obj']['verifyCompliance(string,string)string'] | NegotiableFinBlv2Args['tuple']['verifyCompliance(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(NegotiableFinBlv2ParamsFactory.verifyCompliance(params))
    },

    /**
     * Makes a call to the NegotiableFinBLV2 smart contract using the `tokenizeForTrading(string,uint64)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    tokenizeForTrading: (params: CallParams<NegotiableFinBlv2Args['obj']['tokenizeForTrading(string,uint64)string'] | NegotiableFinBlv2Args['tuple']['tokenizeForTrading(string,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(NegotiableFinBlv2ParamsFactory.tokenizeForTrading(params))
    },

    /**
     * Makes a call to the NegotiableFinBLV2 smart contract using the `calculateYield(string,uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    calculateYield: (params: CallParams<NegotiableFinBlv2Args['obj']['calculateYield(string,uint64)uint64'] | NegotiableFinBlv2Args['tuple']['calculateYield(string,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(NegotiableFinBlv2ParamsFactory.calculateYield(params))
    },

    /**
     * Makes a call to the NegotiableFinBLV2 smart contract using the `getCounters()string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getCounters: (params: CallParams<NegotiableFinBlv2Args['obj']['getCounters()string'] | NegotiableFinBlv2Args['tuple']['getCounters()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(NegotiableFinBlv2ParamsFactory.getCounters(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the NegotiableFinBLV2 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the NegotiableFinBLV2 smart contract using the `hello(string)string` ABI method.
     *
     * Test method (exact V1 compatibility)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    hello: async (params: CallParams<NegotiableFinBlv2Args['obj']['hello(string)string'] | NegotiableFinBlv2Args['tuple']['hello(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(NegotiableFinBlv2ParamsFactory.hello(params))
      return {...result, return: result.return as unknown as (undefined | NegotiableFinBlv2Returns['hello(string)string'])}
    },

    /**
     * Makes a call to the NegotiableFinBLV2 smart contract using the `createEnhancedFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string,uint64,uint64,string)uint64` ABI method.
     *
     * Enhanced Financial BL Creation (builds on V1 createFinancialBL)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createEnhancedFinancialBl: async (params: CallParams<NegotiableFinBlv2Args['obj']['createEnhancedFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string,uint64,uint64,string)uint64'] | NegotiableFinBlv2Args['tuple']['createEnhancedFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string,uint64,uint64,string)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(NegotiableFinBlv2ParamsFactory.createEnhancedFinancialBl(params))
      return {...result, return: result.return as unknown as (undefined | NegotiableFinBlv2Returns['createEnhancedFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string,uint64,uint64,string)uint64'])}
    },

    /**
     * Makes a call to the NegotiableFinBLV2 smart contract using the `getEnhancedBLInfo(uint64)string` ABI method.
     *
     * Enhanced BL information retrieval (builds on V1 getBLFinancialInfo)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getEnhancedBlInfo: async (params: CallParams<NegotiableFinBlv2Args['obj']['getEnhancedBLInfo(uint64)string'] | NegotiableFinBlv2Args['tuple']['getEnhancedBLInfo(uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(NegotiableFinBlv2ParamsFactory.getEnhancedBlInfo(params))
      return {...result, return: result.return as unknown as (undefined | NegotiableFinBlv2Returns['getEnhancedBLInfo(uint64)string'])}
    },

    /**
     * Makes a call to the NegotiableFinBLV2 smart contract using the `fractionalizeForTrading(uint64,uint64,uint64)string` ABI method.
     *
     * Fractionalization for MSME access (RWA innovation - simple implementation)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    fractionalizeForTrading: async (params: CallParams<NegotiableFinBlv2Args['obj']['fractionalizeForTrading(uint64,uint64,uint64)string'] | NegotiableFinBlv2Args['tuple']['fractionalizeForTrading(uint64,uint64,uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(NegotiableFinBlv2ParamsFactory.fractionalizeForTrading(params))
      return {...result, return: result.return as unknown as (undefined | NegotiableFinBlv2Returns['fractionalizeForTrading(uint64,uint64,uint64)string'])}
    },

    /**
     * Makes a call to the NegotiableFinBLV2 smart contract using the `calculateEnhancedYield(uint64,uint64,uint64)uint64` ABI method.
     *
     * Enhanced yield calculation with risk factors (builds on V1 calculateYield)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    calculateEnhancedYield: async (params: CallParams<NegotiableFinBlv2Args['obj']['calculateEnhancedYield(uint64,uint64,uint64)uint64'] | NegotiableFinBlv2Args['tuple']['calculateEnhancedYield(uint64,uint64,uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(NegotiableFinBlv2ParamsFactory.calculateEnhancedYield(params))
      return {...result, return: result.return as unknown as (undefined | NegotiableFinBlv2Returns['calculateEnhancedYield(uint64,uint64,uint64)uint64'])}
    },

    /**
     * Makes a call to the NegotiableFinBLV2 smart contract using the `verifyEnhancedCompliance(uint64,string,string)string` ABI method.
     *
     * Enhanced compliance verification with vLEI (RWA innovation)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    verifyEnhancedCompliance: async (params: CallParams<NegotiableFinBlv2Args['obj']['verifyEnhancedCompliance(uint64,string,string)string'] | NegotiableFinBlv2Args['tuple']['verifyEnhancedCompliance(uint64,string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(NegotiableFinBlv2ParamsFactory.verifyEnhancedCompliance(params))
      return {...result, return: result.return as unknown as (undefined | NegotiableFinBlv2Returns['verifyEnhancedCompliance(uint64,string,string)string'])}
    },

    /**
     * Makes a call to the NegotiableFinBLV2 smart contract using the `initiateCrossBorderSettlement(uint64,uint64,uint64,string)string` ABI method.
     *
     * Cross-border settlement support (RWA innovation)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    initiateCrossBorderSettlement: async (params: CallParams<NegotiableFinBlv2Args['obj']['initiateCrossBorderSettlement(uint64,uint64,uint64,string)string'] | NegotiableFinBlv2Args['tuple']['initiateCrossBorderSettlement(uint64,uint64,uint64,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(NegotiableFinBlv2ParamsFactory.initiateCrossBorderSettlement(params))
      return {...result, return: result.return as unknown as (undefined | NegotiableFinBlv2Returns['initiateCrossBorderSettlement(uint64,uint64,uint64,string)string'])}
    },

    /**
     * Makes a call to the NegotiableFinBLV2 smart contract using the `getEnhancedCounters()string` ABI method.
     *
     * Enhanced counter information (builds on V1 getCounters)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getEnhancedCounters: async (params: CallParams<NegotiableFinBlv2Args['obj']['getEnhancedCounters()string'] | NegotiableFinBlv2Args['tuple']['getEnhancedCounters()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(NegotiableFinBlv2ParamsFactory.getEnhancedCounters(params))
      return {...result, return: result.return as unknown as (undefined | NegotiableFinBlv2Returns['getEnhancedCounters()string'])}
    },

    /**
     * Makes a call to the NegotiableFinBLV2 smart contract using the `setMarketplaceContract(string)string` ABI method.
     *
     * Set marketplace contract for atomic settlement (RWA innovation)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setMarketplaceContract: async (params: CallParams<NegotiableFinBlv2Args['obj']['setMarketplaceContract(string)string'] | NegotiableFinBlv2Args['tuple']['setMarketplaceContract(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(NegotiableFinBlv2ParamsFactory.setMarketplaceContract(params))
      return {...result, return: result.return as unknown as (undefined | NegotiableFinBlv2Returns['setMarketplaceContract(string)string'])}
    },

    /**
     * Makes a call to the NegotiableFinBLV2 smart contract using the `getUserPortfolio(string)string` ABI method.
     *
     * User portfolio information (RWA innovation - simple implementation)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getUserPortfolio: async (params: CallParams<NegotiableFinBlv2Args['obj']['getUserPortfolio(string)string'] | NegotiableFinBlv2Args['tuple']['getUserPortfolio(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(NegotiableFinBlv2ParamsFactory.getUserPortfolio(params))
      return {...result, return: result.return as unknown as (undefined | NegotiableFinBlv2Returns['getUserPortfolio(string)string'])}
    },

    /**
     * Makes a call to the NegotiableFinBLV2 smart contract using the `generateAuditTrail(uint64)string` ABI method.
     *
     * Regulatory audit trail (RWA innovation)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    generateAuditTrail: async (params: CallParams<NegotiableFinBlv2Args['obj']['generateAuditTrail(uint64)string'] | NegotiableFinBlv2Args['tuple']['generateAuditTrail(uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(NegotiableFinBlv2ParamsFactory.generateAuditTrail(params))
      return {...result, return: result.return as unknown as (undefined | NegotiableFinBlv2Returns['generateAuditTrail(uint64)string'])}
    },

    /**
     * Makes a call to the NegotiableFinBLV2 smart contract using the `getBLFinancialInfo(string)string` ABI method.
     *
     * V1 compatibility methods - exactly like V1
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getBlFinancialInfo: async (params: CallParams<NegotiableFinBlv2Args['obj']['getBLFinancialInfo(string)string'] | NegotiableFinBlv2Args['tuple']['getBLFinancialInfo(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(NegotiableFinBlv2ParamsFactory.getBlFinancialInfo(params))
      return {...result, return: result.return as unknown as (undefined | NegotiableFinBlv2Returns['getBLFinancialInfo(string)string'])}
    },

    /**
     * Makes a call to the NegotiableFinBLV2 smart contract using the `verifyCompliance(string,string)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    verifyCompliance: async (params: CallParams<NegotiableFinBlv2Args['obj']['verifyCompliance(string,string)string'] | NegotiableFinBlv2Args['tuple']['verifyCompliance(string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(NegotiableFinBlv2ParamsFactory.verifyCompliance(params))
      return {...result, return: result.return as unknown as (undefined | NegotiableFinBlv2Returns['verifyCompliance(string,string)string'])}
    },

    /**
     * Makes a call to the NegotiableFinBLV2 smart contract using the `tokenizeForTrading(string,uint64)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    tokenizeForTrading: async (params: CallParams<NegotiableFinBlv2Args['obj']['tokenizeForTrading(string,uint64)string'] | NegotiableFinBlv2Args['tuple']['tokenizeForTrading(string,uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(NegotiableFinBlv2ParamsFactory.tokenizeForTrading(params))
      return {...result, return: result.return as unknown as (undefined | NegotiableFinBlv2Returns['tokenizeForTrading(string,uint64)string'])}
    },

    /**
     * Makes a call to the NegotiableFinBLV2 smart contract using the `calculateYield(string,uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    calculateYield: async (params: CallParams<NegotiableFinBlv2Args['obj']['calculateYield(string,uint64)uint64'] | NegotiableFinBlv2Args['tuple']['calculateYield(string,uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(NegotiableFinBlv2ParamsFactory.calculateYield(params))
      return {...result, return: result.return as unknown as (undefined | NegotiableFinBlv2Returns['calculateYield(string,uint64)uint64'])}
    },

    /**
     * Makes a call to the NegotiableFinBLV2 smart contract using the `getCounters()string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getCounters: async (params: CallParams<NegotiableFinBlv2Args['obj']['getCounters()string'] | NegotiableFinBlv2Args['tuple']['getCounters()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(NegotiableFinBlv2ParamsFactory.getCounters(params))
      return {...result, return: result.return as unknown as (undefined | NegotiableFinBlv2Returns['getCounters()string'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new NegotiableFinBlv2Client(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current NegotiableFinBLV2 app
   */
  state = {
    /**
     * Methods to access global state for the current NegotiableFinBLV2 app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          blCounter: result.blCounter,
          totalValueLocked: result.totalValueLocked,
          totalBLsActive: result.totalBLsActive,
          totalYieldGenerated: result.totalYieldGenerated,
        }
      },
      /**
       * Get the current value of the blCounter key in global state
       */
      blCounter: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("blCounter")) as bigint | undefined },
      /**
       * Get the current value of the totalValueLocked key in global state
       */
      totalValueLocked: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalValueLocked")) as bigint | undefined },
      /**
       * Get the current value of the totalBLsActive key in global state
       */
      totalBLsActive: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalBLsActive")) as bigint | undefined },
      /**
       * Get the current value of the totalYieldGenerated key in global state
       */
      totalYieldGenerated: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalYieldGenerated")) as bigint | undefined },
    },
  }

  public newGroup(): NegotiableFinBlv2Composer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a hello(string)string method call against the NegotiableFinBLV2 contract
       */
      hello(params: CallParams<NegotiableFinBlv2Args['obj']['hello(string)string'] | NegotiableFinBlv2Args['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.hello(params)))
        resultMappers.push((v) => client.decodeReturnValue('hello(string)string', v))
        return this
      },
      /**
       * Add a createEnhancedFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string,uint64,uint64,string)uint64 method call against the NegotiableFinBLV2 contract
       */
      createEnhancedFinancialBl(params: CallParams<NegotiableFinBlv2Args['obj']['createEnhancedFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string,uint64,uint64,string)uint64'] | NegotiableFinBlv2Args['tuple']['createEnhancedFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string,uint64,uint64,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createEnhancedFinancialBl(params)))
        resultMappers.push((v) => client.decodeReturnValue('createEnhancedFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string,uint64,uint64,string)uint64', v))
        return this
      },
      /**
       * Add a getEnhancedBLInfo(uint64)string method call against the NegotiableFinBLV2 contract
       */
      getEnhancedBlInfo(params: CallParams<NegotiableFinBlv2Args['obj']['getEnhancedBLInfo(uint64)string'] | NegotiableFinBlv2Args['tuple']['getEnhancedBLInfo(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getEnhancedBlInfo(params)))
        resultMappers.push((v) => client.decodeReturnValue('getEnhancedBLInfo(uint64)string', v))
        return this
      },
      /**
       * Add a fractionalizeForTrading(uint64,uint64,uint64)string method call against the NegotiableFinBLV2 contract
       */
      fractionalizeForTrading(params: CallParams<NegotiableFinBlv2Args['obj']['fractionalizeForTrading(uint64,uint64,uint64)string'] | NegotiableFinBlv2Args['tuple']['fractionalizeForTrading(uint64,uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.fractionalizeForTrading(params)))
        resultMappers.push((v) => client.decodeReturnValue('fractionalizeForTrading(uint64,uint64,uint64)string', v))
        return this
      },
      /**
       * Add a calculateEnhancedYield(uint64,uint64,uint64)uint64 method call against the NegotiableFinBLV2 contract
       */
      calculateEnhancedYield(params: CallParams<NegotiableFinBlv2Args['obj']['calculateEnhancedYield(uint64,uint64,uint64)uint64'] | NegotiableFinBlv2Args['tuple']['calculateEnhancedYield(uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.calculateEnhancedYield(params)))
        resultMappers.push((v) => client.decodeReturnValue('calculateEnhancedYield(uint64,uint64,uint64)uint64', v))
        return this
      },
      /**
       * Add a verifyEnhancedCompliance(uint64,string,string)string method call against the NegotiableFinBLV2 contract
       */
      verifyEnhancedCompliance(params: CallParams<NegotiableFinBlv2Args['obj']['verifyEnhancedCompliance(uint64,string,string)string'] | NegotiableFinBlv2Args['tuple']['verifyEnhancedCompliance(uint64,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.verifyEnhancedCompliance(params)))
        resultMappers.push((v) => client.decodeReturnValue('verifyEnhancedCompliance(uint64,string,string)string', v))
        return this
      },
      /**
       * Add a initiateCrossBorderSettlement(uint64,uint64,uint64,string)string method call against the NegotiableFinBLV2 contract
       */
      initiateCrossBorderSettlement(params: CallParams<NegotiableFinBlv2Args['obj']['initiateCrossBorderSettlement(uint64,uint64,uint64,string)string'] | NegotiableFinBlv2Args['tuple']['initiateCrossBorderSettlement(uint64,uint64,uint64,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.initiateCrossBorderSettlement(params)))
        resultMappers.push((v) => client.decodeReturnValue('initiateCrossBorderSettlement(uint64,uint64,uint64,string)string', v))
        return this
      },
      /**
       * Add a getEnhancedCounters()string method call against the NegotiableFinBLV2 contract
       */
      getEnhancedCounters(params: CallParams<NegotiableFinBlv2Args['obj']['getEnhancedCounters()string'] | NegotiableFinBlv2Args['tuple']['getEnhancedCounters()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getEnhancedCounters(params)))
        resultMappers.push((v) => client.decodeReturnValue('getEnhancedCounters()string', v))
        return this
      },
      /**
       * Add a setMarketplaceContract(string)string method call against the NegotiableFinBLV2 contract
       */
      setMarketplaceContract(params: CallParams<NegotiableFinBlv2Args['obj']['setMarketplaceContract(string)string'] | NegotiableFinBlv2Args['tuple']['setMarketplaceContract(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setMarketplaceContract(params)))
        resultMappers.push((v) => client.decodeReturnValue('setMarketplaceContract(string)string', v))
        return this
      },
      /**
       * Add a getUserPortfolio(string)string method call against the NegotiableFinBLV2 contract
       */
      getUserPortfolio(params: CallParams<NegotiableFinBlv2Args['obj']['getUserPortfolio(string)string'] | NegotiableFinBlv2Args['tuple']['getUserPortfolio(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getUserPortfolio(params)))
        resultMappers.push((v) => client.decodeReturnValue('getUserPortfolio(string)string', v))
        return this
      },
      /**
       * Add a generateAuditTrail(uint64)string method call against the NegotiableFinBLV2 contract
       */
      generateAuditTrail(params: CallParams<NegotiableFinBlv2Args['obj']['generateAuditTrail(uint64)string'] | NegotiableFinBlv2Args['tuple']['generateAuditTrail(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.generateAuditTrail(params)))
        resultMappers.push((v) => client.decodeReturnValue('generateAuditTrail(uint64)string', v))
        return this
      },
      /**
       * Add a getBLFinancialInfo(string)string method call against the NegotiableFinBLV2 contract
       */
      getBlFinancialInfo(params: CallParams<NegotiableFinBlv2Args['obj']['getBLFinancialInfo(string)string'] | NegotiableFinBlv2Args['tuple']['getBLFinancialInfo(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getBlFinancialInfo(params)))
        resultMappers.push((v) => client.decodeReturnValue('getBLFinancialInfo(string)string', v))
        return this
      },
      /**
       * Add a verifyCompliance(string,string)string method call against the NegotiableFinBLV2 contract
       */
      verifyCompliance(params: CallParams<NegotiableFinBlv2Args['obj']['verifyCompliance(string,string)string'] | NegotiableFinBlv2Args['tuple']['verifyCompliance(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.verifyCompliance(params)))
        resultMappers.push((v) => client.decodeReturnValue('verifyCompliance(string,string)string', v))
        return this
      },
      /**
       * Add a tokenizeForTrading(string,uint64)string method call against the NegotiableFinBLV2 contract
       */
      tokenizeForTrading(params: CallParams<NegotiableFinBlv2Args['obj']['tokenizeForTrading(string,uint64)string'] | NegotiableFinBlv2Args['tuple']['tokenizeForTrading(string,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.tokenizeForTrading(params)))
        resultMappers.push((v) => client.decodeReturnValue('tokenizeForTrading(string,uint64)string', v))
        return this
      },
      /**
       * Add a calculateYield(string,uint64)uint64 method call against the NegotiableFinBLV2 contract
       */
      calculateYield(params: CallParams<NegotiableFinBlv2Args['obj']['calculateYield(string,uint64)uint64'] | NegotiableFinBlv2Args['tuple']['calculateYield(string,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.calculateYield(params)))
        resultMappers.push((v) => client.decodeReturnValue('calculateYield(string,uint64)uint64', v))
        return this
      },
      /**
       * Add a getCounters()string method call against the NegotiableFinBLV2 contract
       */
      getCounters(params: CallParams<NegotiableFinBlv2Args['obj']['getCounters()string'] | NegotiableFinBlv2Args['tuple']['getCounters()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getCounters(params)))
        resultMappers.push((v) => client.decodeReturnValue('getCounters()string', v))
        return this
      },
      /**
       * Add a clear state call to the NegotiableFinBLV2 contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as NegotiableFinBlv2Composer
  }
}
export type NegotiableFinBlv2Composer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the hello(string)string ABI method.
   *
   * Test method (exact V1 compatibility)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  hello(params?: CallParams<NegotiableFinBlv2Args['obj']['hello(string)string'] | NegotiableFinBlv2Args['tuple']['hello(string)string']>): NegotiableFinBlv2Composer<[...TReturns, NegotiableFinBlv2Returns['hello(string)string'] | undefined]>

  /**
   * Calls the createEnhancedFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string,uint64,uint64,string)uint64 ABI method.
   *
   * Enhanced Financial BL Creation (builds on V1 createFinancialBL)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createEnhancedFinancialBl(params?: CallParams<NegotiableFinBlv2Args['obj']['createEnhancedFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string,uint64,uint64,string)uint64'] | NegotiableFinBlv2Args['tuple']['createEnhancedFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string,uint64,uint64,string)uint64']>): NegotiableFinBlv2Composer<[...TReturns, NegotiableFinBlv2Returns['createEnhancedFinancialBL(string,uint64,uint64,uint64,uint64,uint64,string,string,string,string,string,string,uint64,uint64,string)uint64'] | undefined]>

  /**
   * Calls the getEnhancedBLInfo(uint64)string ABI method.
   *
   * Enhanced BL information retrieval (builds on V1 getBLFinancialInfo)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getEnhancedBlInfo(params?: CallParams<NegotiableFinBlv2Args['obj']['getEnhancedBLInfo(uint64)string'] | NegotiableFinBlv2Args['tuple']['getEnhancedBLInfo(uint64)string']>): NegotiableFinBlv2Composer<[...TReturns, NegotiableFinBlv2Returns['getEnhancedBLInfo(uint64)string'] | undefined]>

  /**
   * Calls the fractionalizeForTrading(uint64,uint64,uint64)string ABI method.
   *
   * Fractionalization for MSME access (RWA innovation - simple implementation)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  fractionalizeForTrading(params?: CallParams<NegotiableFinBlv2Args['obj']['fractionalizeForTrading(uint64,uint64,uint64)string'] | NegotiableFinBlv2Args['tuple']['fractionalizeForTrading(uint64,uint64,uint64)string']>): NegotiableFinBlv2Composer<[...TReturns, NegotiableFinBlv2Returns['fractionalizeForTrading(uint64,uint64,uint64)string'] | undefined]>

  /**
   * Calls the calculateEnhancedYield(uint64,uint64,uint64)uint64 ABI method.
   *
   * Enhanced yield calculation with risk factors (builds on V1 calculateYield)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculateEnhancedYield(params?: CallParams<NegotiableFinBlv2Args['obj']['calculateEnhancedYield(uint64,uint64,uint64)uint64'] | NegotiableFinBlv2Args['tuple']['calculateEnhancedYield(uint64,uint64,uint64)uint64']>): NegotiableFinBlv2Composer<[...TReturns, NegotiableFinBlv2Returns['calculateEnhancedYield(uint64,uint64,uint64)uint64'] | undefined]>

  /**
   * Calls the verifyEnhancedCompliance(uint64,string,string)string ABI method.
   *
   * Enhanced compliance verification with vLEI (RWA innovation)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  verifyEnhancedCompliance(params?: CallParams<NegotiableFinBlv2Args['obj']['verifyEnhancedCompliance(uint64,string,string)string'] | NegotiableFinBlv2Args['tuple']['verifyEnhancedCompliance(uint64,string,string)string']>): NegotiableFinBlv2Composer<[...TReturns, NegotiableFinBlv2Returns['verifyEnhancedCompliance(uint64,string,string)string'] | undefined]>

  /**
   * Calls the initiateCrossBorderSettlement(uint64,uint64,uint64,string)string ABI method.
   *
   * Cross-border settlement support (RWA innovation)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initiateCrossBorderSettlement(params?: CallParams<NegotiableFinBlv2Args['obj']['initiateCrossBorderSettlement(uint64,uint64,uint64,string)string'] | NegotiableFinBlv2Args['tuple']['initiateCrossBorderSettlement(uint64,uint64,uint64,string)string']>): NegotiableFinBlv2Composer<[...TReturns, NegotiableFinBlv2Returns['initiateCrossBorderSettlement(uint64,uint64,uint64,string)string'] | undefined]>

  /**
   * Calls the getEnhancedCounters()string ABI method.
   *
   * Enhanced counter information (builds on V1 getCounters)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getEnhancedCounters(params?: CallParams<NegotiableFinBlv2Args['obj']['getEnhancedCounters()string'] | NegotiableFinBlv2Args['tuple']['getEnhancedCounters()string']>): NegotiableFinBlv2Composer<[...TReturns, NegotiableFinBlv2Returns['getEnhancedCounters()string'] | undefined]>

  /**
   * Calls the setMarketplaceContract(string)string ABI method.
   *
   * Set marketplace contract for atomic settlement (RWA innovation)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setMarketplaceContract(params?: CallParams<NegotiableFinBlv2Args['obj']['setMarketplaceContract(string)string'] | NegotiableFinBlv2Args['tuple']['setMarketplaceContract(string)string']>): NegotiableFinBlv2Composer<[...TReturns, NegotiableFinBlv2Returns['setMarketplaceContract(string)string'] | undefined]>

  /**
   * Calls the getUserPortfolio(string)string ABI method.
   *
   * User portfolio information (RWA innovation - simple implementation)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getUserPortfolio(params?: CallParams<NegotiableFinBlv2Args['obj']['getUserPortfolio(string)string'] | NegotiableFinBlv2Args['tuple']['getUserPortfolio(string)string']>): NegotiableFinBlv2Composer<[...TReturns, NegotiableFinBlv2Returns['getUserPortfolio(string)string'] | undefined]>

  /**
   * Calls the generateAuditTrail(uint64)string ABI method.
   *
   * Regulatory audit trail (RWA innovation)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  generateAuditTrail(params?: CallParams<NegotiableFinBlv2Args['obj']['generateAuditTrail(uint64)string'] | NegotiableFinBlv2Args['tuple']['generateAuditTrail(uint64)string']>): NegotiableFinBlv2Composer<[...TReturns, NegotiableFinBlv2Returns['generateAuditTrail(uint64)string'] | undefined]>

  /**
   * Calls the getBLFinancialInfo(string)string ABI method.
   *
   * V1 compatibility methods - exactly like V1
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getBlFinancialInfo(params?: CallParams<NegotiableFinBlv2Args['obj']['getBLFinancialInfo(string)string'] | NegotiableFinBlv2Args['tuple']['getBLFinancialInfo(string)string']>): NegotiableFinBlv2Composer<[...TReturns, NegotiableFinBlv2Returns['getBLFinancialInfo(string)string'] | undefined]>

  /**
   * Calls the verifyCompliance(string,string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  verifyCompliance(params?: CallParams<NegotiableFinBlv2Args['obj']['verifyCompliance(string,string)string'] | NegotiableFinBlv2Args['tuple']['verifyCompliance(string,string)string']>): NegotiableFinBlv2Composer<[...TReturns, NegotiableFinBlv2Returns['verifyCompliance(string,string)string'] | undefined]>

  /**
   * Calls the tokenizeForTrading(string,uint64)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  tokenizeForTrading(params?: CallParams<NegotiableFinBlv2Args['obj']['tokenizeForTrading(string,uint64)string'] | NegotiableFinBlv2Args['tuple']['tokenizeForTrading(string,uint64)string']>): NegotiableFinBlv2Composer<[...TReturns, NegotiableFinBlv2Returns['tokenizeForTrading(string,uint64)string'] | undefined]>

  /**
   * Calls the calculateYield(string,uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculateYield(params?: CallParams<NegotiableFinBlv2Args['obj']['calculateYield(string,uint64)uint64'] | NegotiableFinBlv2Args['tuple']['calculateYield(string,uint64)uint64']>): NegotiableFinBlv2Composer<[...TReturns, NegotiableFinBlv2Returns['calculateYield(string,uint64)uint64'] | undefined]>

  /**
   * Calls the getCounters()string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getCounters(params?: CallParams<NegotiableFinBlv2Args['obj']['getCounters()string'] | NegotiableFinBlv2Args['tuple']['getCounters()string']>): NegotiableFinBlv2Composer<[...TReturns, NegotiableFinBlv2Returns['getCounters()string'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the NegotiableFinBLV2 smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): NegotiableFinBlv2Composer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): NegotiableFinBlv2Composer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<NegotiableFinBlv2ComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<NegotiableFinBlv2ComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<NegotiableFinBlv2ComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<NegotiableFinBlv2ComposerResults<TReturns>>
}
export type NegotiableFinBlv2ComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

