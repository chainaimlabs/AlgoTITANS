/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"TradeInstrumentRegistryV3","structs":{"TradeInstrument":[{"name":"instrumentNumber","type":"string"},{"name":"instrumentAssetId","type":"uint64"},{"name":"issueDate","type":"uint64"},{"name":"maturityDate","type":"uint64"},{"name":"faceValue","type":"uint64"},{"name":"currentHolder","type":"address"},{"name":"exporterAddress","type":"address"},{"name":"importerAddress","type":"address"},{"name":"cargoDescription","type":"string"},{"name":"cargoValue","type":"uint64"},{"name":"originPort","type":"string"},{"name":"destinationPort","type":"string"},{"name":"riskScore","type":"uint64"},{"name":"instrumentStatus","type":"uint64"},{"name":"createdAt","type":"uint64"},{"name":"lastUpdated","type":"uint64"}]},"methods":[{"name":"initialize","args":[],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Initialize contract","events":[],"recommendations":{}},{"name":"createInstrument","args":[{"type":"string","name":"instrumentNumber"},{"type":"address","name":"exporterAddress"},{"type":"address","name":"importerAddress"},{"type":"string","name":"cargoDescription"},{"type":"uint64","name":"cargoValue"},{"type":"string","name":"originPort"},{"type":"string","name":"destinationPort"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Create eBL instrument (simplified)","events":[],"recommendations":{}},{"name":"endorseInstrument","args":[{"type":"uint64","name":"instrumentId"},{"type":"address","name":"newHolderAddress"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Endorse (transfer) instrument to new holder","events":[],"recommendations":{}},{"name":"getInstrument","args":[{"type":"uint64","name":"instrumentId"}],"returns":{"type":"(string,uint64,uint64,uint64,uint64,address,address,address,string,uint64,string,string,uint64,uint64,uint64,uint64)","struct":"TradeInstrument"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get instrument details","events":[],"recommendations":{}},{"name":"getExporterInstruments","args":[{"type":"address","name":"exporterAddress"}],"returns":{"type":"uint64[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get exporter's instruments","events":[],"recommendations":{}},{"name":"updateInstrumentStatus","args":[{"type":"uint64","name":"instrumentId"},{"type":"uint64","name":"newStatus"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Update instrument status","events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":2,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{"nextInstrumentId":{"keyType":"AVMString","valueType":"AVMUint64","key":"bmV4dEluc3RydW1lbnRJZA==","desc":"Global state"},"totalInstruments":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxJbnN0cnVtZW50cw=="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"instruments":{"keyType":"uint64","valueType":"TradeInstrument","desc":"Storage maps","prefix":"aW5zdHJ1bWVudHM="},"exporterInstruments":{"keyType":"address","valueType":"uint64[]","prefix":"ZXhwX2luc3Q="}}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[614,692,755,775,800],"errorMessage":"Box must have value"},{"pc":[694,802],"errorMessage":"Index access is out of bounds"},{"pc":[689,753,797],"errorMessage":"Instrument not found"},{"pc":[134,164,183,203,232,283],"errorMessage":"OnCompletion is not NoOp"},{"pc":[318],"errorMessage":"Only creator can initialize"},{"pc":[700],"errorMessage":"Only holder can endorse"},{"pc":[808],"errorMessage":"Only holder can update status"},{"pc":[310],"errorMessage":"can only call when creating"},{"pc":[137,167,186,206,235,286],"errorMessage":"can only call when not creating"},{"pc":[336,355,647],"errorMessage":"check GlobalState exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiAEAQAECCYHBBUffHUQbmV4dEluc3RydW1lbnRJZBB0b3RhbEluc3RydW1lbnRzC2luc3RydW1lbnRzAQADZUJMCGV4cF9pbnN0MRtBAN6CBgTDsUWrBOulFC0E6CkQ4QSZO0a4BHUkZaAEsRBeoTYaAI4GAJcAZABHADMAIAACI0MxGRREMRhENhoBFzYaAheIAnsnBCNPAlQoTFCwIkMxGRREMRhENhoBiAJHKExQsCJDMRkURDEYRDYaAReIAiIoTFCwIkMxGRREMRhENhoBFzYaAogByycEI08CVChMULAiQzEZFEQxGEQ2GgFXAgA2GgI2GgM2GgRXAgA2GgUXNhoGVwIANhoHVwIAiAA2FihMULAiQzEZFEQxGESIABcnBCNPAlQoTFCwIkMxGUD/TjEYFEQiQzEAMgkSRCkiZyojZyKJigcBI4AAIyllREAABikiZyojZyMpZUxJTgKMAUSxi/qyLIv6siuL+rIqi/qyKSOyIyKyIicFsiUnBbImgQOyECOyAbO0PLEishKL+rIUSbIRJLIQI7IBs4v5FRZXBgKL+VBMFjIHFjIHgYCangEIFov9Fov8FRZXBgKL/FCL/hUWVwYCi/5Qi/8VFlcGAov/UDIHFjIHFksJFYGwAQiAAgCwTwpQTwlQTwhQSwdQi/pQi/pQi/tQSwEWVwYCUEsGFU8CCExPB1BLARZXBgJQSwUVTwIIFlcGAlCACAAAAAAAAAH0UIAIAAAAAAAAAAFQTwJQTFBPBFBPA1BPAlBMUEwWSU4CK0xQSbxITL8nBov6UEmMAL1FAUEALosASb5EVwIATwJQSRUlChZXBgJMUEsBvEi/iwFJIggpTGcjKmVEIggqTGeMAIlJFSUKFlcGAkxQiwBJvEhMv0L/2IoCAYv+FitMUEm9RQFESb5ESVciIDEAEkSL/1wiMgcWXKhLAbxITEsBv4ECW7EishKL/7IUshEkshAjsgGzIomKAQGL/xYrTFBJvUUBRL5EiYoBAScGi/9QSb1FAUEABosAvkRMiYACAABMiYoCAYv+FitMUEm9RQFESb5ESVciIDEAEkSL/xZcmDIHFlyoSwG8SL8iiQ==","clear":"CoEBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type TradeInstrument = {
  instrumentNumber: string,
  instrumentAssetId: bigint,
  issueDate: bigint,
  maturityDate: bigint,
  faceValue: bigint,
  currentHolder: string,
  exporterAddress: string,
  importerAddress: string,
  cargoDescription: string,
  cargoValue: bigint,
  originPort: string,
  destinationPort: string,
  riskScore: bigint,
  instrumentStatus: bigint,
  createdAt: bigint,
  lastUpdated: bigint
}


/**
 * Converts the ABI tuple representation of a TradeInstrument to the struct representation
 */
export function TradeInstrumentFromTuple(abiTuple: [string, bigint, bigint, bigint, bigint, string, string, string, string, bigint, string, string, bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.TradeInstrument, APP_SPEC.structs) as TradeInstrument
}

/**
 * The argument types for the TradeInstrumentRegistryV3 contract
 */
export type TradeInstrumentRegistryV3Args = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'initialize()bool': Record<string, never>
    'createInstrument(string,address,address,string,uint64,string,string)uint64': {
      instrumentNumber: string
      exporterAddress: string
      importerAddress: string
      cargoDescription: string
      cargoValue: bigint | number
      originPort: string
      destinationPort: string
    }
    'endorseInstrument(uint64,address)bool': {
      instrumentId: bigint | number
      newHolderAddress: string
    }
    'getInstrument(uint64)(string,uint64,uint64,uint64,uint64,address,address,address,string,uint64,string,string,uint64,uint64,uint64,uint64)': {
      instrumentId: bigint | number
    }
    'getExporterInstruments(address)uint64[]': {
      exporterAddress: string
    }
    'updateInstrumentStatus(uint64,uint64)bool': {
      instrumentId: bigint | number
      newStatus: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'initialize()bool': []
    'createInstrument(string,address,address,string,uint64,string,string)uint64': [instrumentNumber: string, exporterAddress: string, importerAddress: string, cargoDescription: string, cargoValue: bigint | number, originPort: string, destinationPort: string]
    'endorseInstrument(uint64,address)bool': [instrumentId: bigint | number, newHolderAddress: string]
    'getInstrument(uint64)(string,uint64,uint64,uint64,uint64,address,address,address,string,uint64,string,string,uint64,uint64,uint64,uint64)': [instrumentId: bigint | number]
    'getExporterInstruments(address)uint64[]': [exporterAddress: string]
    'updateInstrumentStatus(uint64,uint64)bool': [instrumentId: bigint | number, newStatus: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type TradeInstrumentRegistryV3Returns = {
  'initialize()bool': boolean
  'createInstrument(string,address,address,string,uint64,string,string)uint64': bigint
  'endorseInstrument(uint64,address)bool': boolean
  'getInstrument(uint64)(string,uint64,uint64,uint64,uint64,address,address,address,string,uint64,string,string,uint64,uint64,uint64,uint64)': TradeInstrument
  'getExporterInstruments(address)uint64[]': bigint[]
  'updateInstrumentStatus(uint64,uint64)bool': boolean
}

/**
 * Defines the types of available calls and state of the TradeInstrumentRegistryV3 smart contract.
 */
export type TradeInstrumentRegistryV3Types = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'initialize()bool' | 'initialize', {
      argsObj: TradeInstrumentRegistryV3Args['obj']['initialize()bool']
      argsTuple: TradeInstrumentRegistryV3Args['tuple']['initialize()bool']
      returns: TradeInstrumentRegistryV3Returns['initialize()bool']
    }>
    & Record<'createInstrument(string,address,address,string,uint64,string,string)uint64' | 'createInstrument', {
      argsObj: TradeInstrumentRegistryV3Args['obj']['createInstrument(string,address,address,string,uint64,string,string)uint64']
      argsTuple: TradeInstrumentRegistryV3Args['tuple']['createInstrument(string,address,address,string,uint64,string,string)uint64']
      returns: TradeInstrumentRegistryV3Returns['createInstrument(string,address,address,string,uint64,string,string)uint64']
    }>
    & Record<'endorseInstrument(uint64,address)bool' | 'endorseInstrument', {
      argsObj: TradeInstrumentRegistryV3Args['obj']['endorseInstrument(uint64,address)bool']
      argsTuple: TradeInstrumentRegistryV3Args['tuple']['endorseInstrument(uint64,address)bool']
      returns: TradeInstrumentRegistryV3Returns['endorseInstrument(uint64,address)bool']
    }>
    & Record<'getInstrument(uint64)(string,uint64,uint64,uint64,uint64,address,address,address,string,uint64,string,string,uint64,uint64,uint64,uint64)' | 'getInstrument', {
      argsObj: TradeInstrumentRegistryV3Args['obj']['getInstrument(uint64)(string,uint64,uint64,uint64,uint64,address,address,address,string,uint64,string,string,uint64,uint64,uint64,uint64)']
      argsTuple: TradeInstrumentRegistryV3Args['tuple']['getInstrument(uint64)(string,uint64,uint64,uint64,uint64,address,address,address,string,uint64,string,string,uint64,uint64,uint64,uint64)']
      returns: TradeInstrumentRegistryV3Returns['getInstrument(uint64)(string,uint64,uint64,uint64,uint64,address,address,address,string,uint64,string,string,uint64,uint64,uint64,uint64)']
    }>
    & Record<'getExporterInstruments(address)uint64[]' | 'getExporterInstruments', {
      argsObj: TradeInstrumentRegistryV3Args['obj']['getExporterInstruments(address)uint64[]']
      argsTuple: TradeInstrumentRegistryV3Args['tuple']['getExporterInstruments(address)uint64[]']
      returns: TradeInstrumentRegistryV3Returns['getExporterInstruments(address)uint64[]']
    }>
    & Record<'updateInstrumentStatus(uint64,uint64)bool' | 'updateInstrumentStatus', {
      argsObj: TradeInstrumentRegistryV3Args['obj']['updateInstrumentStatus(uint64,uint64)bool']
      argsTuple: TradeInstrumentRegistryV3Args['tuple']['updateInstrumentStatus(uint64,uint64)bool']
      returns: TradeInstrumentRegistryV3Returns['updateInstrumentStatus(uint64,uint64)bool']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        /**
         * Global state
         */
        nextInstrumentId: bigint
        totalInstruments: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        /**
         * Storage maps
         */
        instruments: Map<bigint | number, TradeInstrument>
        exporterInstruments: Map<string, bigint[]>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type TradeInstrumentRegistryV3Signatures = keyof TradeInstrumentRegistryV3Types['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type TradeInstrumentRegistryV3NonVoidMethodSignatures = keyof TradeInstrumentRegistryV3Types['methods'] extends infer T ? T extends keyof TradeInstrumentRegistryV3Types['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the TradeInstrumentRegistryV3 smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends TradeInstrumentRegistryV3Signatures> = TradeInstrumentRegistryV3Types['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the TradeInstrumentRegistryV3 smart contract to the method's return type
 */
export type MethodReturn<TSignature extends TradeInstrumentRegistryV3Signatures> = TradeInstrumentRegistryV3Types['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = TradeInstrumentRegistryV3Types['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = TradeInstrumentRegistryV3Types['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type TradeInstrumentRegistryV3CreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type TradeInstrumentRegistryV3DeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: TradeInstrumentRegistryV3CreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the TradeInstrumentRegistryV3 smart contract
 */
export abstract class TradeInstrumentRegistryV3ParamsFactory {
  /**
   * Constructs a no op call for the initialize()bool ABI method
   *
   * Initialize contract
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static initialize(params: CallParams<TradeInstrumentRegistryV3Args['obj']['initialize()bool'] | TradeInstrumentRegistryV3Args['tuple']['initialize()bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'initialize()bool' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the createInstrument(string,address,address,string,uint64,string,string)uint64 ABI method
   *
   * Create eBL instrument (simplified)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createInstrument(params: CallParams<TradeInstrumentRegistryV3Args['obj']['createInstrument(string,address,address,string,uint64,string,string)uint64'] | TradeInstrumentRegistryV3Args['tuple']['createInstrument(string,address,address,string,uint64,string,string)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createInstrument(string,address,address,string,uint64,string,string)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.instrumentNumber, params.args.exporterAddress, params.args.importerAddress, params.args.cargoDescription, params.args.cargoValue, params.args.originPort, params.args.destinationPort],
    }
  }
  /**
   * Constructs a no op call for the endorseInstrument(uint64,address)bool ABI method
   *
   * Endorse (transfer) instrument to new holder
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static endorseInstrument(params: CallParams<TradeInstrumentRegistryV3Args['obj']['endorseInstrument(uint64,address)bool'] | TradeInstrumentRegistryV3Args['tuple']['endorseInstrument(uint64,address)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'endorseInstrument(uint64,address)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.instrumentId, params.args.newHolderAddress],
    }
  }
  /**
   * Constructs a no op call for the getInstrument(uint64)(string,uint64,uint64,uint64,uint64,address,address,address,string,uint64,string,string,uint64,uint64,uint64,uint64) ABI method
   *
   * Get instrument details
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getInstrument(params: CallParams<TradeInstrumentRegistryV3Args['obj']['getInstrument(uint64)(string,uint64,uint64,uint64,uint64,address,address,address,string,uint64,string,string,uint64,uint64,uint64,uint64)'] | TradeInstrumentRegistryV3Args['tuple']['getInstrument(uint64)(string,uint64,uint64,uint64,uint64,address,address,address,string,uint64,string,string,uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getInstrument(uint64)(string,uint64,uint64,uint64,uint64,address,address,address,string,uint64,string,string,uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.instrumentId],
    }
  }
  /**
   * Constructs a no op call for the getExporterInstruments(address)uint64[] ABI method
   *
   * Get exporter's instruments
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getExporterInstruments(params: CallParams<TradeInstrumentRegistryV3Args['obj']['getExporterInstruments(address)uint64[]'] | TradeInstrumentRegistryV3Args['tuple']['getExporterInstruments(address)uint64[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getExporterInstruments(address)uint64[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.exporterAddress],
    }
  }
  /**
   * Constructs a no op call for the updateInstrumentStatus(uint64,uint64)bool ABI method
   *
   * Update instrument status
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateInstrumentStatus(params: CallParams<TradeInstrumentRegistryV3Args['obj']['updateInstrumentStatus(uint64,uint64)bool'] | TradeInstrumentRegistryV3Args['tuple']['updateInstrumentStatus(uint64,uint64)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updateInstrumentStatus(uint64,uint64)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.instrumentId, params.args.newStatus],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the TradeInstrumentRegistryV3 smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class TradeInstrumentRegistryV3Factory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `TradeInstrumentRegistryV3Factory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new TradeInstrumentRegistryV3Client(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new TradeInstrumentRegistryV3Client(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the TradeInstrumentRegistryV3 smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: TradeInstrumentRegistryV3DeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new TradeInstrumentRegistryV3Client(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TradeInstrumentRegistryV3 smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TradeInstrumentRegistryV3 smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TradeInstrumentRegistryV3 smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new TradeInstrumentRegistryV3Client(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the TradeInstrumentRegistryV3 smart contract
 */
export class TradeInstrumentRegistryV3Client {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `TradeInstrumentRegistryV3Client`
   *
   * @param appClient An `AppClient` instance which has been created with the TradeInstrumentRegistryV3 app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `TradeInstrumentRegistryV3Client`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends TradeInstrumentRegistryV3NonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `TradeInstrumentRegistryV3Client` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<TradeInstrumentRegistryV3Client> {
    return new TradeInstrumentRegistryV3Client(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `TradeInstrumentRegistryV3Client` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<TradeInstrumentRegistryV3Client> {
    return new TradeInstrumentRegistryV3Client(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the TradeInstrumentRegistryV3 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the TradeInstrumentRegistryV3 smart contract using the `initialize()bool` ABI method.
     *
     * Initialize contract
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    initialize: (params: CallParams<TradeInstrumentRegistryV3Args['obj']['initialize()bool'] | TradeInstrumentRegistryV3Args['tuple']['initialize()bool']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(TradeInstrumentRegistryV3ParamsFactory.initialize(params))
    },

    /**
     * Makes a call to the TradeInstrumentRegistryV3 smart contract using the `createInstrument(string,address,address,string,uint64,string,string)uint64` ABI method.
     *
     * Create eBL instrument (simplified)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createInstrument: (params: CallParams<TradeInstrumentRegistryV3Args['obj']['createInstrument(string,address,address,string,uint64,string,string)uint64'] | TradeInstrumentRegistryV3Args['tuple']['createInstrument(string,address,address,string,uint64,string,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TradeInstrumentRegistryV3ParamsFactory.createInstrument(params))
    },

    /**
     * Makes a call to the TradeInstrumentRegistryV3 smart contract using the `endorseInstrument(uint64,address)bool` ABI method.
     *
     * Endorse (transfer) instrument to new holder
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    endorseInstrument: (params: CallParams<TradeInstrumentRegistryV3Args['obj']['endorseInstrument(uint64,address)bool'] | TradeInstrumentRegistryV3Args['tuple']['endorseInstrument(uint64,address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TradeInstrumentRegistryV3ParamsFactory.endorseInstrument(params))
    },

    /**
     * Makes a call to the TradeInstrumentRegistryV3 smart contract using the `getInstrument(uint64)(string,uint64,uint64,uint64,uint64,address,address,address,string,uint64,string,string,uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get instrument details
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getInstrument: (params: CallParams<TradeInstrumentRegistryV3Args['obj']['getInstrument(uint64)(string,uint64,uint64,uint64,uint64,address,address,address,string,uint64,string,string,uint64,uint64,uint64,uint64)'] | TradeInstrumentRegistryV3Args['tuple']['getInstrument(uint64)(string,uint64,uint64,uint64,uint64,address,address,address,string,uint64,string,string,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TradeInstrumentRegistryV3ParamsFactory.getInstrument(params))
    },

    /**
     * Makes a call to the TradeInstrumentRegistryV3 smart contract using the `getExporterInstruments(address)uint64[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get exporter's instruments
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getExporterInstruments: (params: CallParams<TradeInstrumentRegistryV3Args['obj']['getExporterInstruments(address)uint64[]'] | TradeInstrumentRegistryV3Args['tuple']['getExporterInstruments(address)uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TradeInstrumentRegistryV3ParamsFactory.getExporterInstruments(params))
    },

    /**
     * Makes a call to the TradeInstrumentRegistryV3 smart contract using the `updateInstrumentStatus(uint64,uint64)bool` ABI method.
     *
     * Update instrument status
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateInstrumentStatus: (params: CallParams<TradeInstrumentRegistryV3Args['obj']['updateInstrumentStatus(uint64,uint64)bool'] | TradeInstrumentRegistryV3Args['tuple']['updateInstrumentStatus(uint64,uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TradeInstrumentRegistryV3ParamsFactory.updateInstrumentStatus(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the TradeInstrumentRegistryV3 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the TradeInstrumentRegistryV3 smart contract using the `initialize()bool` ABI method.
     *
     * Initialize contract
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    initialize: (params: CallParams<TradeInstrumentRegistryV3Args['obj']['initialize()bool'] | TradeInstrumentRegistryV3Args['tuple']['initialize()bool']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(TradeInstrumentRegistryV3ParamsFactory.initialize(params))
    },

    /**
     * Makes a call to the TradeInstrumentRegistryV3 smart contract using the `createInstrument(string,address,address,string,uint64,string,string)uint64` ABI method.
     *
     * Create eBL instrument (simplified)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createInstrument: (params: CallParams<TradeInstrumentRegistryV3Args['obj']['createInstrument(string,address,address,string,uint64,string,string)uint64'] | TradeInstrumentRegistryV3Args['tuple']['createInstrument(string,address,address,string,uint64,string,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TradeInstrumentRegistryV3ParamsFactory.createInstrument(params))
    },

    /**
     * Makes a call to the TradeInstrumentRegistryV3 smart contract using the `endorseInstrument(uint64,address)bool` ABI method.
     *
     * Endorse (transfer) instrument to new holder
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    endorseInstrument: (params: CallParams<TradeInstrumentRegistryV3Args['obj']['endorseInstrument(uint64,address)bool'] | TradeInstrumentRegistryV3Args['tuple']['endorseInstrument(uint64,address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TradeInstrumentRegistryV3ParamsFactory.endorseInstrument(params))
    },

    /**
     * Makes a call to the TradeInstrumentRegistryV3 smart contract using the `getInstrument(uint64)(string,uint64,uint64,uint64,uint64,address,address,address,string,uint64,string,string,uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get instrument details
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getInstrument: (params: CallParams<TradeInstrumentRegistryV3Args['obj']['getInstrument(uint64)(string,uint64,uint64,uint64,uint64,address,address,address,string,uint64,string,string,uint64,uint64,uint64,uint64)'] | TradeInstrumentRegistryV3Args['tuple']['getInstrument(uint64)(string,uint64,uint64,uint64,uint64,address,address,address,string,uint64,string,string,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TradeInstrumentRegistryV3ParamsFactory.getInstrument(params))
    },

    /**
     * Makes a call to the TradeInstrumentRegistryV3 smart contract using the `getExporterInstruments(address)uint64[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get exporter's instruments
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getExporterInstruments: (params: CallParams<TradeInstrumentRegistryV3Args['obj']['getExporterInstruments(address)uint64[]'] | TradeInstrumentRegistryV3Args['tuple']['getExporterInstruments(address)uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TradeInstrumentRegistryV3ParamsFactory.getExporterInstruments(params))
    },

    /**
     * Makes a call to the TradeInstrumentRegistryV3 smart contract using the `updateInstrumentStatus(uint64,uint64)bool` ABI method.
     *
     * Update instrument status
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateInstrumentStatus: (params: CallParams<TradeInstrumentRegistryV3Args['obj']['updateInstrumentStatus(uint64,uint64)bool'] | TradeInstrumentRegistryV3Args['tuple']['updateInstrumentStatus(uint64,uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TradeInstrumentRegistryV3ParamsFactory.updateInstrumentStatus(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the TradeInstrumentRegistryV3 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the TradeInstrumentRegistryV3 smart contract using the `initialize()bool` ABI method.
     *
     * Initialize contract
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    initialize: async (params: CallParams<TradeInstrumentRegistryV3Args['obj']['initialize()bool'] | TradeInstrumentRegistryV3Args['tuple']['initialize()bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(TradeInstrumentRegistryV3ParamsFactory.initialize(params))
      return {...result, return: result.return as unknown as (undefined | TradeInstrumentRegistryV3Returns['initialize()bool'])}
    },

    /**
     * Makes a call to the TradeInstrumentRegistryV3 smart contract using the `createInstrument(string,address,address,string,uint64,string,string)uint64` ABI method.
     *
     * Create eBL instrument (simplified)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createInstrument: async (params: CallParams<TradeInstrumentRegistryV3Args['obj']['createInstrument(string,address,address,string,uint64,string,string)uint64'] | TradeInstrumentRegistryV3Args['tuple']['createInstrument(string,address,address,string,uint64,string,string)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TradeInstrumentRegistryV3ParamsFactory.createInstrument(params))
      return {...result, return: result.return as unknown as (undefined | TradeInstrumentRegistryV3Returns['createInstrument(string,address,address,string,uint64,string,string)uint64'])}
    },

    /**
     * Makes a call to the TradeInstrumentRegistryV3 smart contract using the `endorseInstrument(uint64,address)bool` ABI method.
     *
     * Endorse (transfer) instrument to new holder
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    endorseInstrument: async (params: CallParams<TradeInstrumentRegistryV3Args['obj']['endorseInstrument(uint64,address)bool'] | TradeInstrumentRegistryV3Args['tuple']['endorseInstrument(uint64,address)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TradeInstrumentRegistryV3ParamsFactory.endorseInstrument(params))
      return {...result, return: result.return as unknown as (undefined | TradeInstrumentRegistryV3Returns['endorseInstrument(uint64,address)bool'])}
    },

    /**
     * Makes a call to the TradeInstrumentRegistryV3 smart contract using the `getInstrument(uint64)(string,uint64,uint64,uint64,uint64,address,address,address,string,uint64,string,string,uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get instrument details
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getInstrument: async (params: CallParams<TradeInstrumentRegistryV3Args['obj']['getInstrument(uint64)(string,uint64,uint64,uint64,uint64,address,address,address,string,uint64,string,string,uint64,uint64,uint64,uint64)'] | TradeInstrumentRegistryV3Args['tuple']['getInstrument(uint64)(string,uint64,uint64,uint64,uint64,address,address,address,string,uint64,string,string,uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TradeInstrumentRegistryV3ParamsFactory.getInstrument(params))
      return {...result, return: result.return as unknown as (undefined | TradeInstrumentRegistryV3Returns['getInstrument(uint64)(string,uint64,uint64,uint64,uint64,address,address,address,string,uint64,string,string,uint64,uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the TradeInstrumentRegistryV3 smart contract using the `getExporterInstruments(address)uint64[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get exporter's instruments
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getExporterInstruments: async (params: CallParams<TradeInstrumentRegistryV3Args['obj']['getExporterInstruments(address)uint64[]'] | TradeInstrumentRegistryV3Args['tuple']['getExporterInstruments(address)uint64[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TradeInstrumentRegistryV3ParamsFactory.getExporterInstruments(params))
      return {...result, return: result.return as unknown as (undefined | TradeInstrumentRegistryV3Returns['getExporterInstruments(address)uint64[]'])}
    },

    /**
     * Makes a call to the TradeInstrumentRegistryV3 smart contract using the `updateInstrumentStatus(uint64,uint64)bool` ABI method.
     *
     * Update instrument status
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateInstrumentStatus: async (params: CallParams<TradeInstrumentRegistryV3Args['obj']['updateInstrumentStatus(uint64,uint64)bool'] | TradeInstrumentRegistryV3Args['tuple']['updateInstrumentStatus(uint64,uint64)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TradeInstrumentRegistryV3ParamsFactory.updateInstrumentStatus(params))
      return {...result, return: result.return as unknown as (undefined | TradeInstrumentRegistryV3Returns['updateInstrumentStatus(uint64,uint64)bool'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new TradeInstrumentRegistryV3Client(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the TradeInstrumentRegistryV3 smart contract using the `getInstrument(uint64)(string,uint64,uint64,uint64,uint64,address,address,address,string,uint64,string,string,uint64,uint64,uint64,uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get instrument details
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getInstrument(params: CallParams<TradeInstrumentRegistryV3Args['obj']['getInstrument(uint64)(string,uint64,uint64,uint64,uint64,address,address,address,string,uint64,string,string,uint64,uint64,uint64,uint64)'] | TradeInstrumentRegistryV3Args['tuple']['getInstrument(uint64)(string,uint64,uint64,uint64,uint64,address,address,address,string,uint64,string,string,uint64,uint64,uint64,uint64)']>) {
    const result = await this.appClient.send.call(TradeInstrumentRegistryV3ParamsFactory.getInstrument(params))
    return result.return as unknown as TradeInstrumentRegistryV3Returns['getInstrument(uint64)(string,uint64,uint64,uint64,uint64,address,address,address,string,uint64,string,string,uint64,uint64,uint64,uint64)']
  }

  /**
   * Makes a readonly (simulated) call to the TradeInstrumentRegistryV3 smart contract using the `getExporterInstruments(address)uint64[]` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get exporter's instruments
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getExporterInstruments(params: CallParams<TradeInstrumentRegistryV3Args['obj']['getExporterInstruments(address)uint64[]'] | TradeInstrumentRegistryV3Args['tuple']['getExporterInstruments(address)uint64[]']>) {
    const result = await this.appClient.send.call(TradeInstrumentRegistryV3ParamsFactory.getExporterInstruments(params))
    return result.return as unknown as TradeInstrumentRegistryV3Returns['getExporterInstruments(address)uint64[]']
  }

  /**
   * Methods to access state for the current TradeInstrumentRegistryV3 app
   */
  state = {
    /**
     * Methods to access global state for the current TradeInstrumentRegistryV3 app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          nextInstrumentId: result.nextInstrumentId,
          totalInstruments: result.totalInstruments,
        }
      },
      /**
       * Get the current value of the nextInstrumentId key in global state
       */
      nextInstrumentId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("nextInstrumentId")) as bigint | undefined },
      /**
       * Get the current value of the totalInstruments key in global state
       */
      totalInstruments: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalInstruments")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current TradeInstrumentRegistryV3 app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the instruments map in box state
       */
      instruments: {
        /**
         * Get all current values of the instruments map in box state
         */
        getMap: async (): Promise<Map<bigint, TradeInstrument>> => { return (await this.appClient.state.box.getMap("instruments")) as Map<bigint, TradeInstrument> },
        /**
         * Get a current value of the instruments map by key from box state
         */
        value: async (key: bigint | number): Promise<TradeInstrument | undefined> => { return await this.appClient.state.box.getMapValue("instruments", key) as TradeInstrument | undefined },
      },
      /**
       * Get values from the exporterInstruments map in box state
       */
      exporterInstruments: {
        /**
         * Get all current values of the exporterInstruments map in box state
         */
        getMap: async (): Promise<Map<string, bigint[]>> => { return (await this.appClient.state.box.getMap("exporterInstruments")) as Map<string, bigint[]> },
        /**
         * Get a current value of the exporterInstruments map by key from box state
         */
        value: async (key: string): Promise<bigint[] | undefined> => { return await this.appClient.state.box.getMapValue("exporterInstruments", key) as bigint[] | undefined },
      },
    },
  }

  public newGroup(): TradeInstrumentRegistryV3Composer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a initialize()bool method call against the TradeInstrumentRegistryV3 contract
       */
      initialize(params: CallParams<TradeInstrumentRegistryV3Args['obj']['initialize()bool'] | TradeInstrumentRegistryV3Args['tuple']['initialize()bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.initialize(params)))
        resultMappers.push((v) => client.decodeReturnValue('initialize()bool', v))
        return this
      },
      /**
       * Add a createInstrument(string,address,address,string,uint64,string,string)uint64 method call against the TradeInstrumentRegistryV3 contract
       */
      createInstrument(params: CallParams<TradeInstrumentRegistryV3Args['obj']['createInstrument(string,address,address,string,uint64,string,string)uint64'] | TradeInstrumentRegistryV3Args['tuple']['createInstrument(string,address,address,string,uint64,string,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createInstrument(params)))
        resultMappers.push((v) => client.decodeReturnValue('createInstrument(string,address,address,string,uint64,string,string)uint64', v))
        return this
      },
      /**
       * Add a endorseInstrument(uint64,address)bool method call against the TradeInstrumentRegistryV3 contract
       */
      endorseInstrument(params: CallParams<TradeInstrumentRegistryV3Args['obj']['endorseInstrument(uint64,address)bool'] | TradeInstrumentRegistryV3Args['tuple']['endorseInstrument(uint64,address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.endorseInstrument(params)))
        resultMappers.push((v) => client.decodeReturnValue('endorseInstrument(uint64,address)bool', v))
        return this
      },
      /**
       * Add a getInstrument(uint64)(string,uint64,uint64,uint64,uint64,address,address,address,string,uint64,string,string,uint64,uint64,uint64,uint64) method call against the TradeInstrumentRegistryV3 contract
       */
      getInstrument(params: CallParams<TradeInstrumentRegistryV3Args['obj']['getInstrument(uint64)(string,uint64,uint64,uint64,uint64,address,address,address,string,uint64,string,string,uint64,uint64,uint64,uint64)'] | TradeInstrumentRegistryV3Args['tuple']['getInstrument(uint64)(string,uint64,uint64,uint64,uint64,address,address,address,string,uint64,string,string,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getInstrument(params)))
        resultMappers.push((v) => client.decodeReturnValue('getInstrument(uint64)(string,uint64,uint64,uint64,uint64,address,address,address,string,uint64,string,string,uint64,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a getExporterInstruments(address)uint64[] method call against the TradeInstrumentRegistryV3 contract
       */
      getExporterInstruments(params: CallParams<TradeInstrumentRegistryV3Args['obj']['getExporterInstruments(address)uint64[]'] | TradeInstrumentRegistryV3Args['tuple']['getExporterInstruments(address)uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getExporterInstruments(params)))
        resultMappers.push((v) => client.decodeReturnValue('getExporterInstruments(address)uint64[]', v))
        return this
      },
      /**
       * Add a updateInstrumentStatus(uint64,uint64)bool method call against the TradeInstrumentRegistryV3 contract
       */
      updateInstrumentStatus(params: CallParams<TradeInstrumentRegistryV3Args['obj']['updateInstrumentStatus(uint64,uint64)bool'] | TradeInstrumentRegistryV3Args['tuple']['updateInstrumentStatus(uint64,uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateInstrumentStatus(params)))
        resultMappers.push((v) => client.decodeReturnValue('updateInstrumentStatus(uint64,uint64)bool', v))
        return this
      },
      /**
       * Add a clear state call to the TradeInstrumentRegistryV3 contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as TradeInstrumentRegistryV3Composer
  }
}
export type TradeInstrumentRegistryV3Composer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the initialize()bool ABI method.
   *
   * Initialize contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initialize(params?: CallParams<TradeInstrumentRegistryV3Args['obj']['initialize()bool'] | TradeInstrumentRegistryV3Args['tuple']['initialize()bool']>): TradeInstrumentRegistryV3Composer<[...TReturns, TradeInstrumentRegistryV3Returns['initialize()bool'] | undefined]>

  /**
   * Calls the createInstrument(string,address,address,string,uint64,string,string)uint64 ABI method.
   *
   * Create eBL instrument (simplified)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createInstrument(params?: CallParams<TradeInstrumentRegistryV3Args['obj']['createInstrument(string,address,address,string,uint64,string,string)uint64'] | TradeInstrumentRegistryV3Args['tuple']['createInstrument(string,address,address,string,uint64,string,string)uint64']>): TradeInstrumentRegistryV3Composer<[...TReturns, TradeInstrumentRegistryV3Returns['createInstrument(string,address,address,string,uint64,string,string)uint64'] | undefined]>

  /**
   * Calls the endorseInstrument(uint64,address)bool ABI method.
   *
   * Endorse (transfer) instrument to new holder
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  endorseInstrument(params?: CallParams<TradeInstrumentRegistryV3Args['obj']['endorseInstrument(uint64,address)bool'] | TradeInstrumentRegistryV3Args['tuple']['endorseInstrument(uint64,address)bool']>): TradeInstrumentRegistryV3Composer<[...TReturns, TradeInstrumentRegistryV3Returns['endorseInstrument(uint64,address)bool'] | undefined]>

  /**
   * Calls the getInstrument(uint64)(string,uint64,uint64,uint64,uint64,address,address,address,string,uint64,string,string,uint64,uint64,uint64,uint64) ABI method.
   *
   * Get instrument details
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getInstrument(params?: CallParams<TradeInstrumentRegistryV3Args['obj']['getInstrument(uint64)(string,uint64,uint64,uint64,uint64,address,address,address,string,uint64,string,string,uint64,uint64,uint64,uint64)'] | TradeInstrumentRegistryV3Args['tuple']['getInstrument(uint64)(string,uint64,uint64,uint64,uint64,address,address,address,string,uint64,string,string,uint64,uint64,uint64,uint64)']>): TradeInstrumentRegistryV3Composer<[...TReturns, TradeInstrumentRegistryV3Returns['getInstrument(uint64)(string,uint64,uint64,uint64,uint64,address,address,address,string,uint64,string,string,uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the getExporterInstruments(address)uint64[] ABI method.
   *
   * Get exporter's instruments
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getExporterInstruments(params?: CallParams<TradeInstrumentRegistryV3Args['obj']['getExporterInstruments(address)uint64[]'] | TradeInstrumentRegistryV3Args['tuple']['getExporterInstruments(address)uint64[]']>): TradeInstrumentRegistryV3Composer<[...TReturns, TradeInstrumentRegistryV3Returns['getExporterInstruments(address)uint64[]'] | undefined]>

  /**
   * Calls the updateInstrumentStatus(uint64,uint64)bool ABI method.
   *
   * Update instrument status
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateInstrumentStatus(params?: CallParams<TradeInstrumentRegistryV3Args['obj']['updateInstrumentStatus(uint64,uint64)bool'] | TradeInstrumentRegistryV3Args['tuple']['updateInstrumentStatus(uint64,uint64)bool']>): TradeInstrumentRegistryV3Composer<[...TReturns, TradeInstrumentRegistryV3Returns['updateInstrumentStatus(uint64,uint64)bool'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the TradeInstrumentRegistryV3 smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): TradeInstrumentRegistryV3Composer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): TradeInstrumentRegistryV3Composer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<TradeInstrumentRegistryV3ComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<TradeInstrumentRegistryV3ComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<TradeInstrumentRegistryV3ComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<TradeInstrumentRegistryV3ComposerResults<TReturns>>
}
export type TradeInstrumentRegistryV3ComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

