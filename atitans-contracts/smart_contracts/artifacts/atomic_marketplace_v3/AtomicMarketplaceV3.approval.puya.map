{
  "version": 3,
  "sources": [
    "C:/SATHYA/CHAINAIM3003/mcp-servers/altry/atry2/atitans1/projects/atitans1-contracts/smart_contracts/atomic_marketplace_v3/AtomicMarketplaceV3.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;AAAA;;AAgRG;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAvQH;;;AAAA;AAuQG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AA9PH;;;AAAA;AA8PG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAtBA;;AAAA;AAAA;AAAA;;AAAA;AAxOH;;;AAAA;AAwOG;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAtHA;;AAAA;AAAA;AAAA;;AAAA;AAlHH;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAkHG;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAhCA;;AAAA;AAAA;AAAA;;AAAA;AAlFH;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAkFG;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA5CA;;AAAA;AAAA;AAAA;;AAAA;AAtCH;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAsCG;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAjBA;;AAAA;AAAA;AAAA;;AAAA;AArBH;;;AAAA;AAqBG;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AArBH;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAqBE;;;AAEa;;AAAkB;;AAAtB;AAAP;AAZK;AAcsB;AAA3B;AAbK;;AAcmB;AAAxB;AAbK;;AAcoB;AAAzB;AAbK;;AAckB;AAAvB;AAbK;;AAc2B;AAAhC;AAbK;;AAcL;;AAAA;AAEO;AAAP;AAMF;;;AA3BO;AAAA;AAAA;AAAA;AAmCL;;;AAnCK;AAoCwB;AAA3B;AAnCG;;AAoCqB;AAAxB;AAnCG;;AAoCsB;AAAzB;AAnCG;;AAoCoB;AAAvB;AAnCG;;AAoC6B;AAAhC;AAIK;;AAAA;;;AAAA;;AAAA;;;;AAAP;AA5CK;AAAA;AAAA;AAAA;AAiDQ;AAAA;AACG;;AAAA;AACe;;AACf;;AAAA;AACA;;AAAA;AACuB;;AAAxB;AACuB;;AAAP;;AAAA;AAAjB;AAnDT;AAAA;;AAAA;AAAA;AAqDa;AATF;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAQJ;;;AARI;AAAA;AAAA;AAvD+C;AAAA;;AAAA;AAoE/D;AAAA;AAlE6D;;AAAA;AAAA;AAmEtB;;;AAAvC;AAC2B;AAAY;AAAZ;AA/DtB;AA+DL;AAAA;AAEA;;;;;AAMF;;;AAKS;;AAAA;AAnFwD;AAAA;AAAA;AAmF/B;AAAA;AAAA;;AAAhC;AACyC;AAAA;AAG1B;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAS;AAAW;AAA5B;AAAP;AAC0B;AAAX;;AAAW;AAAgB;;AAAnC;AAAP;AAC4B;AAAb;;AAAa;AAA5B;AAAA;AAGe;;AAAA;;AAAR;AAAA;;AAAA;AAAP;AACe;;AAAA;;AAAoB;;AAA5B;AAAP;AACe;;AAAA;;AAAe;;AAAvB;AAAP;AAKM;;AAFN;AAIE;AAJF;;;AAAA;AAOO;AAAP;AAMF;;;AAKS;;AAAA;AAnHwD;AAAA;AAAA;AAmH/B;AAAA;AAAA;;AAAhC;AACyC;AAAA;AAG1B;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAS;AAAW;AAA5B;AAAP;AAC0B;AAAX;;AAAW;AAAgB;;AAAnC;AAAP;AAC4B;AAAb;;AAAa;AAA5B;AAAA;AAGe;;AAAA;;AAAR;AAAA;;AAAA;AAAP;AACe;;AAAA;;AAAyB;;AAAjC;AAAP;AACe;;AAAA;;AAAe;;AAAvB;AAAP;AACe;;AAAA;;AAnHV;AAAA;;AAAA;AAAA;AAmHE;AAAP;AAKM;;AAFN;AAIE;;AAJF;;;AAAA;AAOO;AAAP;AAMF;;;AAOQ;;AAAuC;AAAd;AAAzB;AACA;;AAAA;AAAuB;AAEzB;;AAAa;AAAb;AAAJ;;;AAEE;AAG6B;;AAAP;;;;;;;AAHtB;;;AAIS;;;AAJT;AAoBF;AAE6B;;AAAA;;;AAAa;;AAAb;;AAAa;AAEzB;;;;;;;;;AAJjB;;;AAKS;;;AALT;AAvKK;AAAA;;AAAA;AAAA;AA2MK;AAAA;AAEQ;;AAAA;;;AAEL;;AAAA;AACD;;AAAA;AACwB;;AAAxB;AAPC;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAjN4C;;AAAA;;AAAA;AA4NzD;AAAA;AACwB;AAAS;AAAT;AAtNnB;;AAsNL;AAAA;AAlCsE;;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;;;AAAtB;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAEpC;AAFoC;AAAA;AAAA;AAAhB;;AAAV;AAAU;AAAhC;AA5L+D;AAAA;;AAAA;AA4L/D;;AAAA;AA1L6D;;AAAA;AAAA;AA8LP;AAAtD;AAvLK;AAAA;;AAAA;AAAA;AA0LoB;;AAAA;AA1LpB;;AA0LL;AAAA;AAzLK;AAAA;;AAAA;AAAA;AA0LkB;;AAAA;AA1LlB;;AA0LL;AAAA;;;;;AAhCE;AAxJG;AAAA;;AAAA;AAAA;AA2J+B;;AAAP;;;;;;;;;;;AAH3B;;;AAKS;;;AALT;;;;AAgEJ;;;AAES;;AAAA;AAtOwD;AAAA;;AAAA;AAsO/B;AAAA;AAAA;;AAAhC;AACyC;AAAA;AAAA;AAG1B;AAAA;;;AAAR;AAA6B;;AAA7B;AAAP;AACe;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAS;AAAW;AAA5B;AAAP;AAGuD;;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;;;AAAtB;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAErB;AAFqB;AAAA;AAAA;AAAjC;AA5O6D;;AAAA;AAAA;AAgPtB;AAAvC;AAEO;AAAP;AAMF;;;AAES;;AAAA;AA5PwD;AAAA;AAAA;AA4P/B;AAAA;AAAA;;AAAhC;AACgC;AAAA;AAAhC;AAMF;;;AAES;;AAAA;AApQkD;;AAAA;AAAA;AAoQ/B;AAAA;AAAA;;AAA1B;AAC0B;AAAA;AAA1B;AA7PK;AAAA;;AAAA;AAAA;AAsQH;AArQG;AAAA;;AAAA;AAAA;AAsQH;AAzQG;AAAA;AAAA;AAAA;AA0QyC;AAA3B;AAAjB;AAzQG;AAAA;;AAAA;AAAA;AA0QsC;AAAxB;AAAjB;AAJF",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 4 100 640"
    },
    "9": {
      "op": "bytecblock 0x00 0x151f7c75 \"nextListingId\" \"listings\" \"nextSaleId\" \"totalVolume\" \"totalFees\" \"marketplaceFeeRate\" \"usdcAssetId\" \"active\" \"sales\""
    },
    "118": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "120": {
      "op": "bz main_bare_routing@13",
      "stack_out": []
    },
    "123": {
      "op": "pushbytess 0xea7167c2 0x994973c3 0x5e47ecd3 0xf7549a52 0xaaff10e1 0x4e74e4d3 0x1c394d68 0x0cd1842e // method \"initialize(uint64)bool\", method \"listInstrument(uint64,uint64,uint64,uint64)uint64\", method \"purchaseWithAlgo(uint64,pay)bool\", method \"purchaseWithUSDC(uint64,axfer)bool\", method \"cancelListing(uint64)bool\", method \"getListing(uint64)(uint64,uint64,address,uint64,uint64,uint64,uint64,bool,uint64)\", method \"getSale(uint64)(uint64,uint64,address,address,uint64,uint64,uint64)\", method \"getMarketplaceStats()(uint64,uint64,uint64,uint64)\"",
      "defined_out": [
        "Method(cancelListing(uint64)bool)",
        "Method(getListing(uint64)(uint64,uint64,address,uint64,uint64,uint64,uint64,bool,uint64))",
        "Method(getMarketplaceStats()(uint64,uint64,uint64,uint64))",
        "Method(getSale(uint64)(uint64,uint64,address,address,uint64,uint64,uint64))",
        "Method(initialize(uint64)bool)",
        "Method(listInstrument(uint64,uint64,uint64,uint64)uint64)",
        "Method(purchaseWithAlgo(uint64,pay)bool)",
        "Method(purchaseWithUSDC(uint64,axfer)bool)"
      ],
      "stack_out": [
        "Method(initialize(uint64)bool)",
        "Method(listInstrument(uint64,uint64,uint64,uint64)uint64)",
        "Method(purchaseWithAlgo(uint64,pay)bool)",
        "Method(purchaseWithUSDC(uint64,axfer)bool)",
        "Method(cancelListing(uint64)bool)",
        "Method(getListing(uint64)(uint64,uint64,address,uint64,uint64,uint64,uint64,bool,uint64))",
        "Method(getSale(uint64)(uint64,uint64,address,address,uint64,uint64,uint64))",
        "Method(getMarketplaceStats()(uint64,uint64,uint64,uint64))"
      ]
    },
    "165": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(cancelListing(uint64)bool)",
        "Method(getListing(uint64)(uint64,uint64,address,uint64,uint64,uint64,uint64,bool,uint64))",
        "Method(getMarketplaceStats()(uint64,uint64,uint64,uint64))",
        "Method(getSale(uint64)(uint64,uint64,address,address,uint64,uint64,uint64))",
        "Method(initialize(uint64)bool)",
        "Method(listInstrument(uint64,uint64,uint64,uint64)uint64)",
        "Method(purchaseWithAlgo(uint64,pay)bool)",
        "Method(purchaseWithUSDC(uint64,axfer)bool)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(initialize(uint64)bool)",
        "Method(listInstrument(uint64,uint64,uint64,uint64)uint64)",
        "Method(purchaseWithAlgo(uint64,pay)bool)",
        "Method(purchaseWithUSDC(uint64,axfer)bool)",
        "Method(cancelListing(uint64)bool)",
        "Method(getListing(uint64)(uint64,uint64,address,uint64,uint64,uint64,uint64,bool,uint64))",
        "Method(getSale(uint64)(uint64,uint64,address,address,uint64,uint64,uint64))",
        "Method(getMarketplaceStats()(uint64,uint64,uint64,uint64))",
        "tmp%2#0"
      ]
    },
    "168": {
      "op": "match main_initialize_route@3 main_listInstrument_route@4 main_purchaseWithAlgo_route@5 main_purchaseWithUSDC_route@6 main_cancelListing_route@7 main_getListing_route@8 main_getSale_route@9 main_getMarketplaceStats_route@10",
      "stack_out": []
    },
    "186": {
      "block": "main_after_if_else@17",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "187": {
      "op": "return",
      "stack_out": []
    },
    "188": {
      "block": "main_getMarketplaceStats_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "190": {
      "op": "!",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "191": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "192": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "194": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "195": {
      "callsub": "smart_contracts/atomic_marketplace_v3/AtomicMarketplaceV3.algo.ts::AtomicMarketplaceV3.getMarketplaceStats",
      "op": "callsub getMarketplaceStats",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0"
      ]
    },
    "198": {
      "op": "uncover 3",
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%0#0"
      ]
    },
    "200": {
      "op": "uncover 3",
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%0#0",
        "elements_to_encode%1#0"
      ]
    },
    "202": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "203": {
      "op": "uncover 2",
      "stack_out": [
        "elements_to_encode%3#0",
        "encoded_tuple_buffer%2#0",
        "elements_to_encode%2#0"
      ]
    },
    "205": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%3#0",
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "206": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "elements_to_encode%3#0"
      ]
    },
    "207": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0"
      ]
    },
    "208": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "0x151f7c75"
      ]
    },
    "209": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "210": {
      "op": "concat",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "211": {
      "op": "log",
      "stack_out": []
    },
    "212": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "213": {
      "op": "return",
      "stack_out": []
    },
    "214": {
      "block": "main_getSale_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "216": {
      "op": "!",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "217": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "218": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "220": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "221": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%9#0"
      ]
    },
    "224": {
      "op": "btoi",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "225": {
      "callsub": "smart_contracts/atomic_marketplace_v3/AtomicMarketplaceV3.algo.ts::AtomicMarketplaceV3.getSale",
      "op": "callsub getSale",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "228": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0",
        "0x151f7c75"
      ]
    },
    "229": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%50#0"
      ]
    },
    "230": {
      "op": "concat",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "231": {
      "op": "log",
      "stack_out": []
    },
    "232": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "233": {
      "op": "return",
      "stack_out": []
    },
    "234": {
      "block": "main_getListing_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "236": {
      "op": "!",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "237": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "238": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "240": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "241": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%8#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%8#0"
      ]
    },
    "244": {
      "op": "btoi",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "245": {
      "callsub": "smart_contracts/atomic_marketplace_v3/AtomicMarketplaceV3.algo.ts::AtomicMarketplaceV3.getListing",
      "op": "callsub getListing",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "248": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "0x151f7c75"
      ]
    },
    "249": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%43#0"
      ]
    },
    "250": {
      "op": "concat",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "251": {
      "op": "log",
      "stack_out": []
    },
    "252": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "253": {
      "op": "return",
      "stack_out": []
    },
    "254": {
      "block": "main_cancelListing_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "256": {
      "op": "!",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "257": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "258": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "260": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "261": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%7#0"
      ]
    },
    "264": {
      "op": "btoi",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "265": {
      "callsub": "smart_contracts/atomic_marketplace_v3/AtomicMarketplaceV3.algo.ts::AtomicMarketplaceV3.cancelListing",
      "op": "callsub cancelListing",
      "defined_out": [
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0"
      ]
    },
    "268": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "0x00"
      ]
    },
    "269": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "0x00",
        "0"
      ]
    },
    "270": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%4#0"
      ]
    },
    "272": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%3#0"
      ],
      "stack_out": [
        "encoded_bool%3#0"
      ]
    },
    "273": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%3#0"
      ],
      "stack_out": [
        "encoded_bool%3#0",
        "0x151f7c75"
      ]
    },
    "274": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%3#0"
      ]
    },
    "275": {
      "op": "concat",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "276": {
      "op": "log",
      "stack_out": []
    },
    "277": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "278": {
      "op": "return",
      "stack_out": []
    },
    "279": {
      "block": "main_purchaseWithUSDC_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "281": {
      "op": "!",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "282": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "283": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "285": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "286": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%6#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%6#0"
      ]
    },
    "289": {
      "op": "btoi",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "290": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%29#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "tmp%30#0"
      ]
    },
    "292": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%29#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "tmp%30#0",
        "1"
      ]
    },
    "293": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "gtxn_idx%1#0"
      ]
    },
    "294": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "295": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "297": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "axfer"
      ]
    },
    "298": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "299": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "tmp%29#0",
        "gtxn_idx%1#0"
      ]
    },
    "300": {
      "callsub": "smart_contracts/atomic_marketplace_v3/AtomicMarketplaceV3.algo.ts::AtomicMarketplaceV3.purchaseWithUSDC",
      "op": "callsub purchaseWithUSDC",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "303": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0",
        "0x00"
      ]
    },
    "304": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0",
        "0x00",
        "0"
      ]
    },
    "305": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%3#0"
      ]
    },
    "307": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%2#0"
      ],
      "stack_out": [
        "encoded_bool%2#0"
      ]
    },
    "308": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%2#0"
      ],
      "stack_out": [
        "encoded_bool%2#0",
        "0x151f7c75"
      ]
    },
    "309": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%2#0"
      ]
    },
    "310": {
      "op": "concat",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "311": {
      "op": "log",
      "stack_out": []
    },
    "312": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "313": {
      "op": "return",
      "stack_out": []
    },
    "314": {
      "block": "main_purchaseWithAlgo_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "316": {
      "op": "!",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "317": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "318": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "320": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "321": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%5#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "324": {
      "op": "btoi",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "325": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%22#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%23#0"
      ]
    },
    "327": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%22#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%23#0",
        "1"
      ]
    },
    "328": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "gtxn_idx%0#0"
      ]
    },
    "329": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "330": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "332": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "333": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "334": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%22#0",
        "gtxn_idx%0#0"
      ]
    },
    "335": {
      "callsub": "smart_contracts/atomic_marketplace_v3/AtomicMarketplaceV3.algo.ts::AtomicMarketplaceV3.purchaseWithAlgo",
      "op": "callsub purchaseWithAlgo",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "338": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "0x00"
      ]
    },
    "339": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "0x00",
        "0"
      ]
    },
    "340": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%2#0"
      ]
    },
    "342": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%1#0"
      ],
      "stack_out": [
        "encoded_bool%1#0"
      ]
    },
    "343": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%1#0"
      ],
      "stack_out": [
        "encoded_bool%1#0",
        "0x151f7c75"
      ]
    },
    "344": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%1#0"
      ]
    },
    "345": {
      "op": "concat",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "346": {
      "op": "log",
      "stack_out": []
    },
    "347": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "348": {
      "op": "return",
      "stack_out": []
    },
    "349": {
      "block": "main_listInstrument_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "351": {
      "op": "!",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "352": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "353": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "355": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "356": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "359": {
      "op": "btoi",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "360": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%2#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "363": {
      "op": "btoi",
      "defined_out": [
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "364": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%3#0",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0",
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "367": {
      "op": "btoi",
      "defined_out": [
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "368": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%4#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "371": {
      "op": "btoi",
      "defined_out": [
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "372": {
      "callsub": "smart_contracts/atomic_marketplace_v3/AtomicMarketplaceV3.algo.ts::AtomicMarketplaceV3.listInstrument",
      "op": "callsub listInstrument",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "375": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "376": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "377": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "378": {
      "op": "concat",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "379": {
      "op": "log",
      "stack_out": []
    },
    "380": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "381": {
      "op": "return",
      "stack_out": []
    },
    "382": {
      "block": "main_initialize_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "384": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "385": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "386": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "388": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "389": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "392": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "393": {
      "callsub": "smart_contracts/atomic_marketplace_v3/AtomicMarketplaceV3.algo.ts::AtomicMarketplaceV3.initialize",
      "op": "callsub initialize",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "396": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "0x00"
      ]
    },
    "397": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "0x00",
        "0"
      ]
    },
    "398": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%0#0"
      ]
    },
    "400": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "401": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "402": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ]
    },
    "403": {
      "op": "concat",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "404": {
      "op": "log",
      "stack_out": []
    },
    "405": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "406": {
      "op": "return",
      "stack_out": []
    },
    "407": {
      "block": "main_bare_routing@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "409": {
      "op": "bnz main_after_if_else@17",
      "stack_out": []
    },
    "412": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "414": {
      "op": "!",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "415": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "416": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "417": {
      "op": "return",
      "stack_out": []
    },
    "418": {
      "subroutine": "smart_contracts/atomic_marketplace_v3/AtomicMarketplaceV3.algo.ts::AtomicMarketplaceV3.initialize",
      "params": {
        "usdcAssetId#0": "uint64"
      },
      "block": "initialize",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "421": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "423": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "425": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "426": {
      "error": "Only creator can initialize",
      "op": "assert // Only creator can initialize",
      "stack_out": []
    },
    "427": {
      "op": "bytec_2 // \"nextListingId\"",
      "defined_out": [
        "\"nextListingId\""
      ],
      "stack_out": [
        "\"nextListingId\""
      ]
    },
    "428": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"nextListingId\"",
        "1"
      ],
      "stack_out": [
        "\"nextListingId\"",
        "1"
      ]
    },
    "429": {
      "op": "app_global_put",
      "stack_out": []
    },
    "430": {
      "op": "bytec 4 // \"nextSaleId\"",
      "defined_out": [
        "\"nextSaleId\""
      ],
      "stack_out": [
        "\"nextSaleId\""
      ]
    },
    "432": {
      "op": "intc_1 // 1",
      "stack_out": [
        "\"nextSaleId\"",
        "1"
      ]
    },
    "433": {
      "op": "app_global_put",
      "stack_out": []
    },
    "434": {
      "op": "bytec 5 // \"totalVolume\"",
      "defined_out": [
        "\"totalVolume\""
      ],
      "stack_out": [
        "\"totalVolume\""
      ]
    },
    "436": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"totalVolume\"",
        "0"
      ],
      "stack_out": [
        "\"totalVolume\"",
        "0"
      ]
    },
    "437": {
      "op": "app_global_put",
      "stack_out": []
    },
    "438": {
      "op": "bytec 6 // \"totalFees\"",
      "defined_out": [
        "\"totalFees\""
      ],
      "stack_out": [
        "\"totalFees\""
      ]
    },
    "440": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"totalFees\"",
        "0"
      ]
    },
    "441": {
      "op": "app_global_put",
      "stack_out": []
    },
    "442": {
      "op": "bytec 7 // \"marketplaceFeeRate\"",
      "defined_out": [
        "\"marketplaceFeeRate\""
      ],
      "stack_out": [
        "\"marketplaceFeeRate\""
      ]
    },
    "444": {
      "op": "intc_3 // 100",
      "defined_out": [
        "\"marketplaceFeeRate\"",
        "100"
      ],
      "stack_out": [
        "\"marketplaceFeeRate\"",
        "100"
      ]
    },
    "445": {
      "op": "app_global_put",
      "stack_out": []
    },
    "446": {
      "op": "bytec 8 // \"usdcAssetId\"",
      "defined_out": [
        "\"usdcAssetId\""
      ],
      "stack_out": [
        "\"usdcAssetId\""
      ]
    },
    "448": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"usdcAssetId\"",
        "usdcAssetId#0 (copy)"
      ],
      "stack_out": [
        "\"usdcAssetId\"",
        "usdcAssetId#0 (copy)"
      ]
    },
    "450": {
      "op": "app_global_put",
      "stack_out": []
    },
    "451": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "452": {
      "retsub": true,
      "op": "retsub"
    },
    "453": {
      "subroutine": "smart_contracts/atomic_marketplace_v3/AtomicMarketplaceV3.algo.ts::AtomicMarketplaceV3.listInstrument",
      "params": {
        "instrumentId#0": "uint64",
        "askPriceAlgo#0": "uint64",
        "askPriceUSDC#0": "uint64",
        "validityPeriod#0": "uint64"
      },
      "block": "listInstrument",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "456": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "457": {
      "op": "bytec_2 // \"nextListingId\"",
      "defined_out": [
        "\"nextListingId\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"nextListingId\""
      ]
    },
    "458": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "459": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "460": {
      "op": "bnz listInstrument_after_if_else@2",
      "stack_out": []
    },
    "463": {
      "op": "bytec_2 // \"nextListingId\"",
      "stack_out": [
        "\"nextListingId\""
      ]
    },
    "464": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"nextListingId\"",
        "1"
      ],
      "stack_out": [
        "\"nextListingId\"",
        "1"
      ]
    },
    "465": {
      "op": "app_global_put",
      "stack_out": []
    },
    "466": {
      "op": "bytec 4 // \"nextSaleId\"",
      "defined_out": [
        "\"nextSaleId\""
      ],
      "stack_out": [
        "\"nextSaleId\""
      ]
    },
    "468": {
      "op": "intc_1 // 1",
      "stack_out": [
        "\"nextSaleId\"",
        "1"
      ]
    },
    "469": {
      "op": "app_global_put",
      "stack_out": []
    },
    "470": {
      "op": "bytec 5 // \"totalVolume\"",
      "defined_out": [
        "\"totalVolume\""
      ],
      "stack_out": [
        "\"totalVolume\""
      ]
    },
    "472": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"totalVolume\"",
        "0"
      ]
    },
    "473": {
      "op": "app_global_put",
      "stack_out": []
    },
    "474": {
      "op": "bytec 6 // \"totalFees\"",
      "defined_out": [
        "\"totalFees\""
      ],
      "stack_out": [
        "\"totalFees\""
      ]
    },
    "476": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"totalFees\"",
        "0"
      ]
    },
    "477": {
      "op": "app_global_put",
      "stack_out": []
    },
    "478": {
      "op": "bytec 7 // \"marketplaceFeeRate\"",
      "defined_out": [
        "\"marketplaceFeeRate\""
      ],
      "stack_out": [
        "\"marketplaceFeeRate\""
      ]
    },
    "480": {
      "op": "intc_3 // 100",
      "defined_out": [
        "\"marketplaceFeeRate\"",
        "100"
      ],
      "stack_out": [
        "\"marketplaceFeeRate\"",
        "100"
      ]
    },
    "481": {
      "op": "app_global_put",
      "stack_out": []
    },
    "482": {
      "block": "listInstrument_after_if_else@2",
      "stack_in": [],
      "op": "frame_dig -3",
      "defined_out": [
        "askPriceAlgo#0 (copy)"
      ],
      "stack_out": [
        "askPriceAlgo#0 (copy)"
      ]
    },
    "484": {
      "op": "bnz listInstrument_bool_true@4",
      "stack_out": []
    },
    "487": {
      "op": "frame_dig -2",
      "defined_out": [
        "askPriceUSDC#0 (copy)"
      ],
      "stack_out": [
        "askPriceUSDC#0 (copy)"
      ]
    },
    "489": {
      "op": "bz listInstrument_bool_false@5",
      "stack_out": []
    },
    "492": {
      "block": "listInstrument_bool_true@4",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "493": {
      "block": "listInstrument_bool_merge@6",
      "stack_in": [
        "or_result%0#0"
      ],
      "error": "Must set price in at least one currency",
      "op": "assert // Must set price in at least one currency",
      "defined_out": [],
      "stack_out": []
    },
    "494": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "495": {
      "op": "bytec_2 // \"nextListingId\"",
      "defined_out": [
        "\"nextListingId\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"nextListingId\""
      ]
    },
    "496": {
      "op": "app_global_get_ex",
      "defined_out": [
        "listingId#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "listingId#0",
        "maybe_exists%1#0"
      ]
    },
    "497": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "listingId#0"
      ]
    },
    "498": {
      "op": "dup",
      "defined_out": [
        "listingId#0",
        "listingId#0 (copy)"
      ],
      "stack_out": [
        "listingId#0",
        "listingId#0 (copy)"
      ]
    },
    "499": {
      "op": "itob",
      "defined_out": [
        "listingId#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "listingId#0",
        "val_as_bytes%0#0"
      ]
    },
    "500": {
      "op": "frame_dig -4",
      "defined_out": [
        "instrumentId#0 (copy)",
        "listingId#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "listingId#0",
        "val_as_bytes%0#0",
        "instrumentId#0 (copy)"
      ]
    },
    "502": {
      "op": "itob",
      "defined_out": [
        "listingId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "listingId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "503": {
      "op": "txn Sender",
      "defined_out": [
        "listingId#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "listingId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "tmp%3#0"
      ]
    },
    "505": {
      "op": "frame_dig -3",
      "defined_out": [
        "askPriceAlgo#0 (copy)",
        "listingId#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "listingId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "tmp%3#0",
        "askPriceAlgo#0 (copy)"
      ]
    },
    "507": {
      "op": "itob",
      "defined_out": [
        "listingId#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "listingId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "tmp%3#0",
        "val_as_bytes%2#0"
      ]
    },
    "508": {
      "op": "frame_dig -2",
      "defined_out": [
        "askPriceUSDC#0 (copy)",
        "listingId#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "listingId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "tmp%3#0",
        "val_as_bytes%2#0",
        "askPriceUSDC#0 (copy)"
      ]
    },
    "510": {
      "op": "itob",
      "defined_out": [
        "listingId#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "listingId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "tmp%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "511": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "listingId#0",
        "tmp%3#0",
        "to_encode%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "listingId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "tmp%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "to_encode%0#0"
      ]
    },
    "513": {
      "op": "itob",
      "defined_out": [
        "listingId#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "listingId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "tmp%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ]
    },
    "514": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "listingId#0",
        "tmp%3#0",
        "tmp%4#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "listingId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "tmp%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "tmp%4#0"
      ]
    },
    "516": {
      "op": "frame_dig -1",
      "defined_out": [
        "listingId#0",
        "tmp%3#0",
        "tmp%4#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "validityPeriod#0 (copy)"
      ],
      "stack_out": [
        "listingId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "tmp%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "tmp%4#0",
        "validityPeriod#0 (copy)"
      ]
    },
    "518": {
      "op": "+",
      "defined_out": [
        "listingId#0",
        "tmp%3#0",
        "to_encode%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "listingId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "tmp%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "to_encode%1#0"
      ]
    },
    "519": {
      "op": "itob",
      "defined_out": [
        "listingId#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "listingId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "tmp%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ]
    },
    "520": {
      "op": "intc_0 // 0",
      "stack_out": [
        "listingId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "tmp%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "0"
      ]
    },
    "521": {
      "op": "bytec 7 // \"marketplaceFeeRate\"",
      "defined_out": [
        "\"marketplaceFeeRate\"",
        "0",
        "listingId#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "listingId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "tmp%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "0",
        "\"marketplaceFeeRate\""
      ]
    },
    "523": {
      "op": "app_global_get_ex",
      "defined_out": [
        "listingId#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "listingId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "tmp%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "524": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "listingId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "tmp%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%2#0"
      ]
    },
    "525": {
      "op": "itob",
      "defined_out": [
        "listingId#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "listingId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "tmp%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ]
    },
    "526": {
      "op": "dig 7",
      "defined_out": [
        "listingId#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "listingId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "tmp%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%0#0 (copy)"
      ]
    },
    "528": {
      "op": "uncover 7",
      "stack_out": [
        "listingId#0",
        "val_as_bytes%0#0",
        "tmp%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%0#0 (copy)",
        "val_as_bytes%1#0"
      ]
    },
    "530": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "listingId#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "listingId#0",
        "val_as_bytes%0#0",
        "tmp%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "531": {
      "op": "uncover 6",
      "stack_out": [
        "listingId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "encoded_tuple_buffer%2#0",
        "tmp%3#0"
      ]
    },
    "533": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "listingId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "listingId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "534": {
      "op": "uncover 5",
      "stack_out": [
        "listingId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0"
      ]
    },
    "536": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "listingId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "listingId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "537": {
      "op": "uncover 4",
      "stack_out": [
        "listingId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%3#0"
      ]
    },
    "539": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "listingId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "listingId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "540": {
      "op": "uncover 3",
      "stack_out": [
        "listingId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%4#0"
      ]
    },
    "542": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "listingId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "listingId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "543": {
      "op": "uncover 2",
      "stack_out": [
        "listingId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%6#0",
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%5#0"
      ]
    },
    "545": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "listingId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "listingId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%6#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "546": {
      "op": "pushbytes 0x80",
      "defined_out": [
        "0x80",
        "encoded_tuple_buffer%7#0",
        "listingId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "listingId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%6#0",
        "encoded_tuple_buffer%7#0",
        "0x80"
      ]
    },
    "549": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "listingId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "listingId#0",
        "val_as_bytes%0#0",
        "val_as_bytes%6#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "550": {
      "op": "swap",
      "stack_out": [
        "listingId#0",
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%8#0",
        "val_as_bytes%6#0"
      ]
    },
    "551": {
      "op": "concat",
      "defined_out": [
        "listing#0",
        "listingId#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "listingId#0",
        "val_as_bytes%0#0",
        "listing#0"
      ]
    },
    "552": {
      "op": "bytec_3 // \"listings\"",
      "defined_out": [
        "\"listings\"",
        "listing#0",
        "listingId#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "listingId#0",
        "val_as_bytes%0#0",
        "listing#0",
        "\"listings\""
      ]
    },
    "553": {
      "op": "dig 2",
      "stack_out": [
        "listingId#0",
        "val_as_bytes%0#0",
        "listing#0",
        "\"listings\"",
        "val_as_bytes%0#0 (copy)"
      ]
    },
    "555": {
      "op": "concat",
      "defined_out": [
        "listing#0",
        "listingId#0",
        "tmp%6#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "listingId#0",
        "val_as_bytes%0#0",
        "listing#0",
        "tmp%6#0"
      ]
    },
    "556": {
      "op": "swap",
      "stack_out": [
        "listingId#0",
        "val_as_bytes%0#0",
        "tmp%6#0",
        "listing#0"
      ]
    },
    "557": {
      "op": "box_put",
      "stack_out": [
        "listingId#0",
        "val_as_bytes%0#0"
      ]
    },
    "558": {
      "op": "bytec 9 // \"active\"",
      "defined_out": [
        "\"active\"",
        "listingId#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "listingId#0",
        "val_as_bytes%0#0",
        "\"active\""
      ]
    },
    "560": {
      "op": "swap",
      "stack_out": [
        "listingId#0",
        "\"active\"",
        "val_as_bytes%0#0"
      ]
    },
    "561": {
      "op": "concat",
      "defined_out": [
        "listingId#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "listingId#0",
        "tmp%8#0"
      ]
    },
    "562": {
      "op": "pushbytes 0x80",
      "stack_out": [
        "listingId#0",
        "tmp%8#0",
        "0x80"
      ]
    },
    "565": {
      "op": "box_put",
      "stack_out": [
        "listingId#0"
      ]
    },
    "566": {
      "op": "dup",
      "stack_out": [
        "listingId#0",
        "listingId#0 (copy)"
      ]
    },
    "567": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "listingId#0",
        "listingId#0 (copy)"
      ],
      "stack_out": [
        "listingId#0",
        "listingId#0 (copy)",
        "1"
      ]
    },
    "568": {
      "op": "+",
      "defined_out": [
        "listingId#0",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "listingId#0",
        "new_state_value%0#0"
      ]
    },
    "569": {
      "op": "bytec_2 // \"nextListingId\"",
      "stack_out": [
        "listingId#0",
        "new_state_value%0#0",
        "\"nextListingId\""
      ]
    },
    "570": {
      "op": "swap",
      "stack_out": [
        "listingId#0",
        "\"nextListingId\"",
        "new_state_value%0#0"
      ]
    },
    "571": {
      "op": "app_global_put",
      "stack_out": [
        "listingId#0"
      ]
    },
    "572": {
      "retsub": true,
      "op": "retsub"
    },
    "573": {
      "block": "listInstrument_bool_false@5",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "574": {
      "op": "b listInstrument_bool_merge@6"
    },
    "577": {
      "subroutine": "smart_contracts/atomic_marketplace_v3/AtomicMarketplaceV3.algo.ts::AtomicMarketplaceV3.purchaseWithAlgo",
      "params": {
        "listingId#0": "uint64",
        "payment#0": "uint64"
      },
      "block": "purchaseWithAlgo",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "580": {
      "op": "frame_dig -2",
      "defined_out": [
        "listingId#0 (copy)"
      ],
      "stack_out": [
        "listingId#0 (copy)"
      ]
    },
    "582": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "583": {
      "op": "bytec_3 // \"listings\"",
      "defined_out": [
        "\"listings\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"listings\""
      ]
    },
    "584": {
      "op": "swap",
      "stack_out": [
        "\"listings\"",
        "tmp%0#0"
      ]
    },
    "585": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "586": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "587": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "588": {
      "op": "bury 1",
      "stack_out": [
        "tmp%1#0",
        "maybe_exists%0#0"
      ]
    },
    "590": {
      "error": "Listing not found",
      "op": "assert // Listing not found",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "591": {
      "op": "box_get",
      "defined_out": [
        "listing#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "listing#0",
        "maybe_exists%1#0"
      ]
    },
    "592": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "listing#0"
      ]
    },
    "593": {
      "op": "dup",
      "defined_out": [
        "listing#0",
        "listing#0 (copy)"
      ],
      "stack_out": [
        "listing#0",
        "listing#0 (copy)"
      ]
    },
    "594": {
      "op": "intc 4 // 640",
      "defined_out": [
        "640",
        "listing#0",
        "listing#0 (copy)"
      ],
      "stack_out": [
        "listing#0",
        "listing#0 (copy)",
        "640"
      ]
    },
    "596": {
      "op": "getbit",
      "defined_out": [
        "is_true%0#0",
        "listing#0"
      ],
      "stack_out": [
        "listing#0",
        "is_true%0#0"
      ]
    },
    "597": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "is_true%0#0",
        "listing#0"
      ],
      "stack_out": [
        "listing#0",
        "is_true%0#0",
        "0x00"
      ]
    },
    "598": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "is_true%0#0",
        "listing#0"
      ],
      "stack_out": [
        "listing#0",
        "is_true%0#0",
        "0x00",
        "0"
      ]
    },
    "599": {
      "op": "uncover 2",
      "stack_out": [
        "listing#0",
        "0x00",
        "0",
        "is_true%0#0"
      ]
    },
    "601": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "listing#0"
      ],
      "stack_out": [
        "listing#0",
        "encoded_bool%0#0"
      ]
    },
    "602": {
      "op": "intc_0 // 0",
      "stack_out": [
        "listing#0",
        "encoded_bool%0#0",
        "0"
      ]
    },
    "603": {
      "op": "getbit",
      "defined_out": [
        "listing#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "listing#0",
        "tmp%4#0"
      ]
    },
    "604": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "listing#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "listing#0",
        "tmp%4#0",
        "1"
      ]
    },
    "605": {
      "op": "==",
      "defined_out": [
        "listing#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "listing#0",
        "tmp%5#0"
      ]
    },
    "606": {
      "error": "Listing inactive",
      "op": "assert // Listing inactive",
      "stack_out": [
        "listing#0"
      ]
    },
    "607": {
      "op": "dup",
      "stack_out": [
        "listing#0",
        "listing#0 (copy)"
      ]
    },
    "608": {
      "op": "pushint 72 // 72",
      "defined_out": [
        "72",
        "listing#0",
        "listing#0 (copy)"
      ],
      "stack_out": [
        "listing#0",
        "listing#0 (copy)",
        "72"
      ]
    },
    "610": {
      "op": "extract_uint64",
      "defined_out": [
        "listing#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "listing#0",
        "tmp%7#0"
      ]
    },
    "611": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "listing#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "listing#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "613": {
      "op": ">",
      "defined_out": [
        "listing#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "listing#0",
        "tmp%9#0"
      ]
    },
    "614": {
      "error": "Listing expired",
      "op": "assert // Listing expired",
      "stack_out": [
        "listing#0"
      ]
    },
    "615": {
      "op": "dup",
      "stack_out": [
        "listing#0",
        "listing#0 (copy)"
      ]
    },
    "616": {
      "op": "pushint 48 // 48",
      "defined_out": [
        "48",
        "listing#0",
        "listing#0 (copy)"
      ],
      "stack_out": [
        "listing#0",
        "listing#0 (copy)",
        "48"
      ]
    },
    "618": {
      "op": "extract_uint64",
      "defined_out": [
        "listing#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "listing#0",
        "tmp%11#0"
      ]
    },
    "619": {
      "op": "dup",
      "defined_out": [
        "listing#0",
        "tmp%11#0",
        "tmp%11#0 (copy)"
      ],
      "stack_out": [
        "listing#0",
        "tmp%11#0",
        "tmp%11#0 (copy)"
      ]
    },
    "620": {
      "error": "ALGO not accepted for this listing",
      "op": "assert // ALGO not accepted for this listing",
      "stack_out": [
        "listing#0",
        "tmp%11#0"
      ]
    },
    "621": {
      "op": "frame_dig -1",
      "defined_out": [
        "listing#0",
        "payment#0 (copy)",
        "tmp%11#0"
      ],
      "stack_out": [
        "listing#0",
        "tmp%11#0",
        "payment#0 (copy)"
      ]
    },
    "623": {
      "op": "gtxns Amount",
      "defined_out": [
        "listing#0",
        "tmp%11#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "listing#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "625": {
      "op": "dup",
      "defined_out": [
        "listing#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%13#0 (copy)"
      ],
      "stack_out": [
        "listing#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%13#0 (copy)"
      ]
    },
    "626": {
      "op": "uncover 2",
      "stack_out": [
        "listing#0",
        "tmp%13#0",
        "tmp%13#0 (copy)",
        "tmp%11#0"
      ]
    },
    "628": {
      "op": "==",
      "defined_out": [
        "listing#0",
        "tmp%13#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "listing#0",
        "tmp%13#0",
        "tmp%16#0"
      ]
    },
    "629": {
      "error": "Incorrect payment amount",
      "op": "assert // Incorrect payment amount",
      "stack_out": [
        "listing#0",
        "tmp%13#0"
      ]
    },
    "630": {
      "op": "frame_dig -1",
      "stack_out": [
        "listing#0",
        "tmp%13#0",
        "payment#0 (copy)"
      ]
    },
    "632": {
      "op": "gtxns Receiver",
      "defined_out": [
        "listing#0",
        "tmp%13#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "listing#0",
        "tmp%13#0",
        "tmp%17#0"
      ]
    },
    "634": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "listing#0",
        "tmp%13#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "listing#0",
        "tmp%13#0",
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "636": {
      "op": "==",
      "defined_out": [
        "listing#0",
        "tmp%13#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "listing#0",
        "tmp%13#0",
        "tmp%19#0"
      ]
    },
    "637": {
      "error": "Payment to wrong address",
      "op": "assert // Payment to wrong address",
      "stack_out": [
        "listing#0",
        "tmp%13#0"
      ]
    },
    "638": {
      "op": "frame_dig -1",
      "stack_out": [
        "listing#0",
        "tmp%13#0",
        "payment#0 (copy)"
      ]
    },
    "640": {
      "op": "gtxns Sender",
      "defined_out": [
        "listing#0",
        "tmp%13#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "listing#0",
        "tmp%13#0",
        "tmp%20#0"
      ]
    },
    "642": {
      "op": "txn Sender",
      "defined_out": [
        "listing#0",
        "tmp%13#0",
        "tmp%20#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "listing#0",
        "tmp%13#0",
        "tmp%20#0",
        "tmp%21#0"
      ]
    },
    "644": {
      "op": "==",
      "defined_out": [
        "listing#0",
        "tmp%13#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "listing#0",
        "tmp%13#0",
        "tmp%22#0"
      ]
    },
    "645": {
      "error": "Payment sender mismatch",
      "op": "assert // Payment sender mismatch",
      "stack_out": [
        "listing#0",
        "tmp%13#0"
      ]
    },
    "646": {
      "op": "txn Sender",
      "defined_out": [
        "listing#0",
        "tmp%13#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "listing#0",
        "tmp%13#0",
        "tmp%23#0"
      ]
    },
    "648": {
      "op": "swap",
      "stack_out": [
        "listing#0",
        "tmp%23#0",
        "tmp%13#0"
      ]
    },
    "649": {
      "op": "intc_1 // 1",
      "stack_out": [
        "listing#0",
        "tmp%23#0",
        "tmp%13#0",
        "1"
      ]
    },
    "650": {
      "callsub": "smart_contracts/atomic_marketplace_v3/AtomicMarketplaceV3.algo.ts::AtomicMarketplaceV3.executeAtomicSettlement",
      "op": "callsub executeAtomicSettlement",
      "stack_out": [
        "listing#0"
      ]
    },
    "653": {
      "op": "pop",
      "stack_out": []
    },
    "654": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "655": {
      "retsub": true,
      "op": "retsub"
    },
    "656": {
      "subroutine": "smart_contracts/atomic_marketplace_v3/AtomicMarketplaceV3.algo.ts::AtomicMarketplaceV3.purchaseWithUSDC",
      "params": {
        "listingId#0": "uint64",
        "payment#0": "uint64"
      },
      "block": "purchaseWithUSDC",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "659": {
      "op": "frame_dig -2",
      "defined_out": [
        "listingId#0 (copy)"
      ],
      "stack_out": [
        "listingId#0 (copy)"
      ]
    },
    "661": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "662": {
      "op": "bytec_3 // \"listings\"",
      "defined_out": [
        "\"listings\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"listings\""
      ]
    },
    "663": {
      "op": "swap",
      "stack_out": [
        "\"listings\"",
        "tmp%0#0"
      ]
    },
    "664": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "665": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "666": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "667": {
      "op": "bury 1",
      "stack_out": [
        "tmp%1#0",
        "maybe_exists%0#0"
      ]
    },
    "669": {
      "error": "Listing not found",
      "op": "assert // Listing not found",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "670": {
      "op": "box_get",
      "defined_out": [
        "listing#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "listing#0",
        "maybe_exists%1#0"
      ]
    },
    "671": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "listing#0"
      ]
    },
    "672": {
      "op": "dup",
      "defined_out": [
        "listing#0",
        "listing#0 (copy)"
      ],
      "stack_out": [
        "listing#0",
        "listing#0 (copy)"
      ]
    },
    "673": {
      "op": "intc 4 // 640",
      "defined_out": [
        "640",
        "listing#0",
        "listing#0 (copy)"
      ],
      "stack_out": [
        "listing#0",
        "listing#0 (copy)",
        "640"
      ]
    },
    "675": {
      "op": "getbit",
      "defined_out": [
        "is_true%0#0",
        "listing#0"
      ],
      "stack_out": [
        "listing#0",
        "is_true%0#0"
      ]
    },
    "676": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "is_true%0#0",
        "listing#0"
      ],
      "stack_out": [
        "listing#0",
        "is_true%0#0",
        "0x00"
      ]
    },
    "677": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "is_true%0#0",
        "listing#0"
      ],
      "stack_out": [
        "listing#0",
        "is_true%0#0",
        "0x00",
        "0"
      ]
    },
    "678": {
      "op": "uncover 2",
      "stack_out": [
        "listing#0",
        "0x00",
        "0",
        "is_true%0#0"
      ]
    },
    "680": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "listing#0"
      ],
      "stack_out": [
        "listing#0",
        "encoded_bool%0#0"
      ]
    },
    "681": {
      "op": "intc_0 // 0",
      "stack_out": [
        "listing#0",
        "encoded_bool%0#0",
        "0"
      ]
    },
    "682": {
      "op": "getbit",
      "defined_out": [
        "listing#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "listing#0",
        "tmp%4#0"
      ]
    },
    "683": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "listing#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "listing#0",
        "tmp%4#0",
        "1"
      ]
    },
    "684": {
      "op": "==",
      "defined_out": [
        "listing#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "listing#0",
        "tmp%5#0"
      ]
    },
    "685": {
      "error": "Listing inactive",
      "op": "assert // Listing inactive",
      "stack_out": [
        "listing#0"
      ]
    },
    "686": {
      "op": "dup",
      "stack_out": [
        "listing#0",
        "listing#0 (copy)"
      ]
    },
    "687": {
      "op": "pushint 72 // 72",
      "defined_out": [
        "72",
        "listing#0",
        "listing#0 (copy)"
      ],
      "stack_out": [
        "listing#0",
        "listing#0 (copy)",
        "72"
      ]
    },
    "689": {
      "op": "extract_uint64",
      "defined_out": [
        "listing#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "listing#0",
        "tmp%7#0"
      ]
    },
    "690": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "listing#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "listing#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "692": {
      "op": ">",
      "defined_out": [
        "listing#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "listing#0",
        "tmp%9#0"
      ]
    },
    "693": {
      "error": "Listing expired",
      "op": "assert // Listing expired",
      "stack_out": [
        "listing#0"
      ]
    },
    "694": {
      "op": "dup",
      "stack_out": [
        "listing#0",
        "listing#0 (copy)"
      ]
    },
    "695": {
      "op": "pushint 56 // 56",
      "defined_out": [
        "56",
        "listing#0",
        "listing#0 (copy)"
      ],
      "stack_out": [
        "listing#0",
        "listing#0 (copy)",
        "56"
      ]
    },
    "697": {
      "op": "extract_uint64",
      "defined_out": [
        "listing#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "listing#0",
        "tmp%11#0"
      ]
    },
    "698": {
      "op": "dup",
      "defined_out": [
        "listing#0",
        "tmp%11#0",
        "tmp%11#0 (copy)"
      ],
      "stack_out": [
        "listing#0",
        "tmp%11#0",
        "tmp%11#0 (copy)"
      ]
    },
    "699": {
      "error": "USDC not accepted for this listing",
      "op": "assert // USDC not accepted for this listing",
      "stack_out": [
        "listing#0",
        "tmp%11#0"
      ]
    },
    "700": {
      "op": "frame_dig -1",
      "defined_out": [
        "listing#0",
        "payment#0 (copy)",
        "tmp%11#0"
      ],
      "stack_out": [
        "listing#0",
        "tmp%11#0",
        "payment#0 (copy)"
      ]
    },
    "702": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "listing#0",
        "tmp%11#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "listing#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "704": {
      "op": "dup",
      "defined_out": [
        "listing#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%13#0 (copy)"
      ],
      "stack_out": [
        "listing#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%13#0 (copy)"
      ]
    },
    "705": {
      "op": "uncover 2",
      "stack_out": [
        "listing#0",
        "tmp%13#0",
        "tmp%13#0 (copy)",
        "tmp%11#0"
      ]
    },
    "707": {
      "op": "==",
      "defined_out": [
        "listing#0",
        "tmp%13#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "listing#0",
        "tmp%13#0",
        "tmp%16#0"
      ]
    },
    "708": {
      "error": "Incorrect payment amount",
      "op": "assert // Incorrect payment amount",
      "stack_out": [
        "listing#0",
        "tmp%13#0"
      ]
    },
    "709": {
      "op": "frame_dig -1",
      "stack_out": [
        "listing#0",
        "tmp%13#0",
        "payment#0 (copy)"
      ]
    },
    "711": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "listing#0",
        "tmp%13#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "listing#0",
        "tmp%13#0",
        "tmp%17#0"
      ]
    },
    "713": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "listing#0",
        "tmp%13#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "listing#0",
        "tmp%13#0",
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "715": {
      "op": "==",
      "defined_out": [
        "listing#0",
        "tmp%13#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "listing#0",
        "tmp%13#0",
        "tmp%19#0"
      ]
    },
    "716": {
      "error": "Payment to wrong address",
      "op": "assert // Payment to wrong address",
      "stack_out": [
        "listing#0",
        "tmp%13#0"
      ]
    },
    "717": {
      "op": "frame_dig -1",
      "stack_out": [
        "listing#0",
        "tmp%13#0",
        "payment#0 (copy)"
      ]
    },
    "719": {
      "op": "gtxns Sender",
      "defined_out": [
        "listing#0",
        "tmp%13#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "listing#0",
        "tmp%13#0",
        "tmp%20#0"
      ]
    },
    "721": {
      "op": "txn Sender",
      "defined_out": [
        "listing#0",
        "tmp%13#0",
        "tmp%20#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "listing#0",
        "tmp%13#0",
        "tmp%20#0",
        "tmp%21#0"
      ]
    },
    "723": {
      "op": "==",
      "defined_out": [
        "listing#0",
        "tmp%13#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "listing#0",
        "tmp%13#0",
        "tmp%22#0"
      ]
    },
    "724": {
      "error": "Payment sender mismatch",
      "op": "assert // Payment sender mismatch",
      "stack_out": [
        "listing#0",
        "tmp%13#0"
      ]
    },
    "725": {
      "op": "frame_dig -1",
      "stack_out": [
        "listing#0",
        "tmp%13#0",
        "payment#0 (copy)"
      ]
    },
    "727": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "listing#0",
        "tmp%13#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "listing#0",
        "tmp%13#0",
        "tmp%23#0"
      ]
    },
    "729": {
      "op": "intc_0 // 0",
      "stack_out": [
        "listing#0",
        "tmp%13#0",
        "tmp%23#0",
        "0"
      ]
    },
    "730": {
      "op": "bytec 8 // \"usdcAssetId\"",
      "defined_out": [
        "\"usdcAssetId\"",
        "0",
        "listing#0",
        "tmp%13#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "listing#0",
        "tmp%13#0",
        "tmp%23#0",
        "0",
        "\"usdcAssetId\""
      ]
    },
    "732": {
      "op": "app_global_get_ex",
      "defined_out": [
        "listing#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%13#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "listing#0",
        "tmp%13#0",
        "tmp%23#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "733": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "listing#0",
        "tmp%13#0",
        "tmp%23#0",
        "maybe_value%2#0"
      ]
    },
    "734": {
      "op": "==",
      "defined_out": [
        "listing#0",
        "tmp%13#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "listing#0",
        "tmp%13#0",
        "tmp%24#0"
      ]
    },
    "735": {
      "error": "Must pay with USDC",
      "op": "assert // Must pay with USDC",
      "stack_out": [
        "listing#0",
        "tmp%13#0"
      ]
    },
    "736": {
      "op": "txn Sender",
      "defined_out": [
        "listing#0",
        "tmp%13#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "listing#0",
        "tmp%13#0",
        "tmp%25#0"
      ]
    },
    "738": {
      "op": "swap",
      "stack_out": [
        "listing#0",
        "tmp%25#0",
        "tmp%13#0"
      ]
    },
    "739": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "listing#0",
        "tmp%13#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "listing#0",
        "tmp%25#0",
        "tmp%13#0",
        "2"
      ]
    },
    "741": {
      "callsub": "smart_contracts/atomic_marketplace_v3/AtomicMarketplaceV3.algo.ts::AtomicMarketplaceV3.executeAtomicSettlement",
      "op": "callsub executeAtomicSettlement",
      "stack_out": [
        "listing#0"
      ]
    },
    "744": {
      "op": "pop",
      "stack_out": []
    },
    "745": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "746": {
      "retsub": true,
      "op": "retsub"
    },
    "747": {
      "subroutine": "smart_contracts/atomic_marketplace_v3/AtomicMarketplaceV3.algo.ts::AtomicMarketplaceV3.executeAtomicSettlement",
      "params": {
        "listing#0": "bytes",
        "buyer#0": "bytes",
        "totalAmount#0": "uint64",
        "currency#0": "uint64"
      },
      "block": "executeAtomicSettlement",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "750": {
      "op": "frame_dig -2",
      "defined_out": [
        "totalAmount#0 (copy)"
      ],
      "stack_out": [
        "totalAmount#0 (copy)"
      ]
    },
    "752": {
      "op": "intc_3 // 100",
      "defined_out": [
        "100",
        "totalAmount#0 (copy)"
      ],
      "stack_out": [
        "totalAmount#0 (copy)",
        "100"
      ]
    },
    "753": {
      "op": "/",
      "defined_out": [
        "marketplaceFee#0"
      ],
      "stack_out": [
        "marketplaceFee#0"
      ]
    },
    "754": {
      "op": "dup",
      "defined_out": [
        "marketplaceFee#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "marketplaceFee#0"
      ]
    },
    "755": {
      "op": "frame_dig -2",
      "stack_out": [
        "marketplaceFee#0",
        "marketplaceFee#0",
        "totalAmount#0 (copy)"
      ]
    },
    "757": {
      "op": "swap",
      "stack_out": [
        "marketplaceFee#0",
        "totalAmount#0 (copy)",
        "marketplaceFee#0"
      ]
    },
    "758": {
      "op": "-",
      "defined_out": [
        "marketplaceFee#0",
        "sellerAmount#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "sellerAmount#0"
      ]
    },
    "759": {
      "op": "frame_dig -1",
      "defined_out": [
        "currency#0 (copy)",
        "marketplaceFee#0",
        "sellerAmount#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "sellerAmount#0",
        "currency#0 (copy)"
      ]
    },
    "761": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "currency#0 (copy)",
        "marketplaceFee#0",
        "sellerAmount#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "sellerAmount#0",
        "currency#0 (copy)",
        "1"
      ]
    },
    "762": {
      "op": "==",
      "defined_out": [
        "marketplaceFee#0",
        "sellerAmount#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "sellerAmount#0",
        "tmp%0#0"
      ]
    },
    "763": {
      "op": "bz executeAtomicSettlement_else_body@3",
      "stack_out": [
        "marketplaceFee#0",
        "sellerAmount#0"
      ]
    },
    "766": {
      "op": "itxn_begin"
    },
    "767": {
      "op": "frame_dig -4",
      "defined_out": [
        "listing#0 (copy)",
        "marketplaceFee#0",
        "sellerAmount#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "sellerAmount#0",
        "listing#0 (copy)"
      ]
    },
    "769": {
      "error": "Index access is out of bounds",
      "op": "extract 16 32 // on error: Index access is out of bounds",
      "defined_out": [
        "marketplaceFee#0",
        "reinterpret_bytes[32]%0#0",
        "sellerAmount#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "sellerAmount#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "772": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "marketplaceFee#0",
        "sellerAmount#0"
      ]
    },
    "774": {
      "op": "itxn_field Amount",
      "stack_out": [
        "marketplaceFee#0"
      ]
    },
    "776": {
      "op": "intc_1 // 1",
      "stack_out": [
        "marketplaceFee#0",
        "1"
      ]
    },
    "777": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "marketplaceFee#0"
      ]
    },
    "779": {
      "op": "intc_0 // 0",
      "stack_out": [
        "marketplaceFee#0",
        "0"
      ]
    },
    "780": {
      "op": "itxn_field Fee",
      "stack_out": [
        "marketplaceFee#0"
      ]
    },
    "782": {
      "op": "itxn_submit"
    },
    "783": {
      "block": "executeAtomicSettlement_after_if_else@5",
      "stack_in": [
        "marketplaceFee#0"
      ],
      "op": "itxn_begin"
    },
    "784": {
      "op": "frame_dig -4",
      "defined_out": [
        "listing#0 (copy)"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "listing#0 (copy)"
      ]
    },
    "786": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0"
      ]
    },
    "789": {
      "op": "frame_dig -4",
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "listing#0 (copy)"
      ]
    },
    "791": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "listing#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "listing#0 (copy)",
        "8"
      ]
    },
    "793": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%2%%param_XferAsset_idx_0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "inner_txn_params%2%%param_XferAsset_idx_0#0"
      ]
    },
    "794": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "inner_txn_params%2%%param_XferAsset_idx_0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "inner_txn_params%2%%param_XferAsset_idx_0#0",
        "1"
      ]
    },
    "795": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "inner_txn_params%2%%param_XferAsset_idx_0#0"
      ]
    },
    "797": {
      "op": "frame_dig -3",
      "defined_out": [
        "buyer#0 (copy)",
        "inner_txn_params%2%%param_XferAsset_idx_0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "inner_txn_params%2%%param_XferAsset_idx_0#0",
        "buyer#0 (copy)"
      ]
    },
    "799": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "inner_txn_params%2%%param_XferAsset_idx_0#0"
      ]
    },
    "801": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0"
      ]
    },
    "803": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "tmp%1#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "4"
      ]
    },
    "804": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0"
      ]
    },
    "806": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%1#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "0"
      ]
    },
    "807": {
      "op": "itxn_field Fee",
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0"
      ]
    },
    "809": {
      "op": "itxn_submit"
    },
    "810": {
      "op": "intc_0 // 0",
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "0"
      ]
    },
    "811": {
      "op": "bytec 4 // \"nextSaleId\"",
      "defined_out": [
        "\"nextSaleId\"",
        "0",
        "tmp%1#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "0",
        "\"nextSaleId\""
      ]
    },
    "813": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "saleId#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "saleId#0",
        "maybe_exists%0#0"
      ]
    },
    "814": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "saleId#0"
      ]
    },
    "815": {
      "op": "dup",
      "defined_out": [
        "saleId#0",
        "saleId#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "saleId#0",
        "saleId#0 (copy)"
      ]
    },
    "816": {
      "op": "itob",
      "defined_out": [
        "saleId#0",
        "tmp%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "saleId#0",
        "val_as_bytes%0#0"
      ]
    },
    "817": {
      "op": "frame_dig -4",
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "saleId#0",
        "val_as_bytes%0#0",
        "listing#0 (copy)"
      ]
    },
    "819": {
      "error": "Index access is out of bounds",
      "op": "extract 16 32 // on error: Index access is out of bounds",
      "defined_out": [
        "saleId#0",
        "tmp%1#0",
        "tmp%1#1",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "saleId#0",
        "val_as_bytes%0#0",
        "tmp%1#1"
      ]
    },
    "822": {
      "op": "frame_dig -2",
      "defined_out": [
        "saleId#0",
        "tmp%1#0",
        "tmp%1#1",
        "totalAmount#0 (copy)",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "saleId#0",
        "val_as_bytes%0#0",
        "tmp%1#1",
        "totalAmount#0 (copy)"
      ]
    },
    "824": {
      "op": "itob",
      "defined_out": [
        "saleId#0",
        "tmp%1#0",
        "tmp%1#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "saleId#0",
        "val_as_bytes%0#0",
        "tmp%1#1",
        "val_as_bytes%1#0"
      ]
    },
    "825": {
      "op": "frame_dig -1",
      "defined_out": [
        "currency#0 (copy)",
        "saleId#0",
        "tmp%1#0",
        "tmp%1#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "saleId#0",
        "val_as_bytes%0#0",
        "tmp%1#1",
        "val_as_bytes%1#0",
        "currency#0 (copy)"
      ]
    },
    "827": {
      "op": "itob",
      "defined_out": [
        "saleId#0",
        "tmp%1#0",
        "tmp%1#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "saleId#0",
        "val_as_bytes%0#0",
        "tmp%1#1",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "828": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "saleId#0",
        "tmp%1#0",
        "tmp%1#1",
        "to_encode%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "saleId#0",
        "val_as_bytes%0#0",
        "tmp%1#1",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "to_encode%0#0"
      ]
    },
    "830": {
      "op": "itob",
      "defined_out": [
        "saleId#0",
        "tmp%1#0",
        "tmp%1#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "saleId#0",
        "val_as_bytes%0#0",
        "tmp%1#1",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "831": {
      "op": "dig 4",
      "defined_out": [
        "saleId#0",
        "tmp%1#0",
        "tmp%1#1",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "saleId#0",
        "val_as_bytes%0#0",
        "tmp%1#1",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%0#0 (copy)"
      ]
    },
    "833": {
      "op": "dig 7",
      "defined_out": [
        "saleId#0",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "tmp%1#1",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "saleId#0",
        "val_as_bytes%0#0",
        "tmp%1#1",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%0#0 (copy)",
        "tmp%1#0 (copy)"
      ]
    },
    "835": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "saleId#0",
        "tmp%1#0",
        "tmp%1#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "saleId#0",
        "val_as_bytes%0#0",
        "tmp%1#1",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "836": {
      "op": "dig 4",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "saleId#0",
        "tmp%1#0",
        "tmp%1#1",
        "tmp%1#1 (copy)",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "saleId#0",
        "val_as_bytes%0#0",
        "tmp%1#1",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%2#0",
        "tmp%1#1 (copy)"
      ]
    },
    "838": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "saleId#0",
        "tmp%1#0",
        "tmp%1#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "saleId#0",
        "val_as_bytes%0#0",
        "tmp%1#1",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "839": {
      "op": "frame_dig -3",
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "saleId#0",
        "val_as_bytes%0#0",
        "tmp%1#1",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%3#0",
        "buyer#0 (copy)"
      ]
    },
    "841": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "saleId#0",
        "tmp%1#0",
        "tmp%1#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "saleId#0",
        "val_as_bytes%0#0",
        "tmp%1#1",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "842": {
      "op": "uncover 3",
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "saleId#0",
        "val_as_bytes%0#0",
        "tmp%1#1",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%1#0"
      ]
    },
    "844": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "saleId#0",
        "tmp%1#0",
        "tmp%1#1",
        "val_as_bytes%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "saleId#0",
        "val_as_bytes%0#0",
        "tmp%1#1",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "845": {
      "op": "uncover 2",
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "saleId#0",
        "val_as_bytes%0#0",
        "tmp%1#1",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%2#0"
      ]
    },
    "847": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "saleId#0",
        "tmp%1#0",
        "tmp%1#1",
        "val_as_bytes%0#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "saleId#0",
        "val_as_bytes%0#0",
        "tmp%1#1",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "848": {
      "op": "swap",
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "saleId#0",
        "val_as_bytes%0#0",
        "tmp%1#1",
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%3#0"
      ]
    },
    "849": {
      "op": "concat",
      "defined_out": [
        "sale#0",
        "saleId#0",
        "tmp%1#0",
        "tmp%1#1",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "saleId#0",
        "val_as_bytes%0#0",
        "tmp%1#1",
        "sale#0"
      ]
    },
    "850": {
      "op": "bytec 10 // \"sales\"",
      "defined_out": [
        "\"sales\"",
        "sale#0",
        "saleId#0",
        "tmp%1#0",
        "tmp%1#1",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "saleId#0",
        "val_as_bytes%0#0",
        "tmp%1#1",
        "sale#0",
        "\"sales\""
      ]
    },
    "852": {
      "op": "uncover 3",
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "saleId#0",
        "tmp%1#1",
        "sale#0",
        "\"sales\"",
        "val_as_bytes%0#0"
      ]
    },
    "854": {
      "op": "concat",
      "defined_out": [
        "sale#0",
        "saleId#0",
        "tmp%1#0",
        "tmp%1#1",
        "tmp%3#1"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "saleId#0",
        "tmp%1#1",
        "sale#0",
        "tmp%3#1"
      ]
    },
    "855": {
      "op": "swap",
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "saleId#0",
        "tmp%1#1",
        "tmp%3#1",
        "sale#0"
      ]
    },
    "856": {
      "op": "box_put",
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "saleId#0",
        "tmp%1#1"
      ]
    },
    "857": {
      "op": "swap",
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "tmp%1#1",
        "saleId#0"
      ]
    },
    "858": {
      "op": "intc_1 // 1",
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "tmp%1#1",
        "saleId#0",
        "1"
      ]
    },
    "859": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%1#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "tmp%1#1",
        "new_state_value%0#0"
      ]
    },
    "860": {
      "op": "bytec 4 // \"nextSaleId\"",
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "tmp%1#1",
        "new_state_value%0#0",
        "\"nextSaleId\""
      ]
    },
    "862": {
      "op": "swap",
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "tmp%1#1",
        "\"nextSaleId\"",
        "new_state_value%0#0"
      ]
    },
    "863": {
      "op": "app_global_put",
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "tmp%1#1"
      ]
    },
    "864": {
      "op": "frame_dig -4",
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "tmp%1#1",
        "listing#0 (copy)"
      ]
    },
    "866": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#1",
        "tmp%2#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "tmp%1#1",
        "tmp%2#0"
      ]
    },
    "869": {
      "op": "frame_dig -4",
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "tmp%1#1",
        "tmp%2#0",
        "listing#0 (copy)"
      ]
    },
    "871": {
      "error": "Index access is out of bounds",
      "op": "extract 48 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#1",
        "tmp%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "tmp%1#1",
        "tmp%2#0",
        "tmp%5#0"
      ]
    },
    "874": {
      "op": "frame_dig -4",
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "tmp%1#1",
        "tmp%2#0",
        "tmp%5#0",
        "listing#0 (copy)"
      ]
    },
    "876": {
      "error": "Index access is out of bounds",
      "op": "extract 56 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#1",
        "tmp%2#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "tmp%1#1",
        "tmp%2#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "879": {
      "op": "frame_dig -4",
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "tmp%1#1",
        "tmp%2#0",
        "tmp%5#0",
        "tmp%6#0",
        "listing#0 (copy)"
      ]
    },
    "881": {
      "error": "Index access is out of bounds",
      "op": "extract 64 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#1",
        "tmp%2#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "tmp%1#1",
        "tmp%2#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "884": {
      "op": "frame_dig -4",
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "tmp%1#1",
        "tmp%2#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "listing#0 (copy)"
      ]
    },
    "886": {
      "error": "Index access is out of bounds",
      "op": "extract 72 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#1",
        "tmp%2#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "tmp%1#1",
        "tmp%2#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "889": {
      "op": "frame_dig -4",
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "tmp%1#1",
        "tmp%2#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "listing#0 (copy)"
      ]
    },
    "891": {
      "error": "Index access is out of bounds",
      "op": "extract 81 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#1",
        "tmp%2#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "tmp%1#1",
        "tmp%2#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "894": {
      "op": "uncover 5",
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#0",
        "tmp%1#1",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "tmp%2#0"
      ]
    },
    "896": {
      "op": "uncover 7",
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#1",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "tmp%2#0",
        "tmp%1#0"
      ]
    },
    "898": {
      "op": "concat",
      "stack_out": [
        "marketplaceFee#0",
        "tmp%1#1",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "899": {
      "op": "uncover 6",
      "stack_out": [
        "marketplaceFee#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "encoded_tuple_buffer%2#0",
        "tmp%1#1"
      ]
    },
    "901": {
      "op": "concat",
      "stack_out": [
        "marketplaceFee#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "902": {
      "op": "uncover 5",
      "stack_out": [
        "marketplaceFee#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "encoded_tuple_buffer%3#0",
        "tmp%5#0"
      ]
    },
    "904": {
      "op": "concat",
      "stack_out": [
        "marketplaceFee#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "905": {
      "op": "uncover 4",
      "stack_out": [
        "marketplaceFee#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "encoded_tuple_buffer%4#0",
        "tmp%6#0"
      ]
    },
    "907": {
      "op": "concat",
      "stack_out": [
        "marketplaceFee#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "908": {
      "op": "uncover 3",
      "stack_out": [
        "marketplaceFee#0",
        "tmp%8#0",
        "tmp%9#0",
        "encoded_tuple_buffer%5#0",
        "tmp%7#0"
      ]
    },
    "910": {
      "op": "concat",
      "stack_out": [
        "marketplaceFee#0",
        "tmp%8#0",
        "tmp%9#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "911": {
      "op": "uncover 2",
      "stack_out": [
        "marketplaceFee#0",
        "tmp%9#0",
        "encoded_tuple_buffer%6#0",
        "tmp%8#0"
      ]
    },
    "913": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "tmp%9#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "914": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "encoded_tuple_buffer%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "tmp%9#0",
        "encoded_tuple_buffer%7#0",
        "0x00"
      ]
    },
    "915": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "tmp%9#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "916": {
      "op": "swap",
      "stack_out": [
        "marketplaceFee#0",
        "encoded_tuple_buffer%8#0",
        "tmp%9#0"
      ]
    },
    "917": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "918": {
      "op": "frame_dig -4",
      "stack_out": [
        "marketplaceFee#0",
        "encoded_tuple_buffer%9#0",
        "listing#0 (copy)"
      ]
    },
    "920": {
      "op": "intc_0 // 0",
      "stack_out": [
        "marketplaceFee#0",
        "encoded_tuple_buffer%9#0",
        "listing#0 (copy)",
        "0"
      ]
    },
    "921": {
      "op": "extract_uint64",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "encoded_tuple_buffer%9#0",
        "tmp%11#0"
      ]
    },
    "922": {
      "op": "itob",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "encoded_tuple_buffer%9#0",
        "tmp%12#0"
      ]
    },
    "923": {
      "op": "bytec_3 // \"listings\"",
      "defined_out": [
        "\"listings\"",
        "encoded_tuple_buffer%9#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "encoded_tuple_buffer%9#0",
        "tmp%12#0",
        "\"listings\""
      ]
    },
    "924": {
      "op": "dig 1",
      "defined_out": [
        "\"listings\"",
        "encoded_tuple_buffer%9#0",
        "tmp%12#0",
        "tmp%12#0 (copy)"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "encoded_tuple_buffer%9#0",
        "tmp%12#0",
        "\"listings\"",
        "tmp%12#0 (copy)"
      ]
    },
    "926": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "encoded_tuple_buffer%9#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "927": {
      "op": "uncover 2",
      "stack_out": [
        "marketplaceFee#0",
        "tmp%12#0",
        "tmp%13#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "929": {
      "op": "box_put",
      "stack_out": [
        "marketplaceFee#0",
        "tmp%12#0"
      ]
    },
    "930": {
      "op": "bytec 9 // \"active\"",
      "defined_out": [
        "\"active\"",
        "tmp%12#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "tmp%12#0",
        "\"active\""
      ]
    },
    "932": {
      "op": "swap",
      "stack_out": [
        "marketplaceFee#0",
        "\"active\"",
        "tmp%12#0"
      ]
    },
    "933": {
      "op": "concat",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "tmp%17#0"
      ]
    },
    "934": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "marketplaceFee#0",
        "tmp%17#0",
        "0x00"
      ]
    },
    "935": {
      "op": "box_put",
      "stack_out": [
        "marketplaceFee#0"
      ]
    },
    "936": {
      "op": "intc_0 // 0",
      "stack_out": [
        "marketplaceFee#0",
        "0"
      ]
    },
    "937": {
      "op": "bytec 5 // \"totalVolume\"",
      "defined_out": [
        "\"totalVolume\"",
        "0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "0",
        "\"totalVolume\""
      ]
    },
    "939": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "940": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "marketplaceFee#0",
        "maybe_value%1#0"
      ]
    },
    "941": {
      "op": "frame_dig -2",
      "stack_out": [
        "marketplaceFee#0",
        "maybe_value%1#0",
        "totalAmount#0 (copy)"
      ]
    },
    "943": {
      "op": "+",
      "stack_out": [
        "marketplaceFee#0",
        "new_state_value%0#0"
      ]
    },
    "944": {
      "op": "bytec 5 // \"totalVolume\"",
      "stack_out": [
        "marketplaceFee#0",
        "new_state_value%0#0",
        "\"totalVolume\""
      ]
    },
    "946": {
      "op": "swap",
      "stack_out": [
        "marketplaceFee#0",
        "\"totalVolume\"",
        "new_state_value%0#0"
      ]
    },
    "947": {
      "op": "app_global_put",
      "stack_out": [
        "marketplaceFee#0"
      ]
    },
    "948": {
      "op": "intc_0 // 0",
      "stack_out": [
        "marketplaceFee#0",
        "0"
      ]
    },
    "949": {
      "op": "bytec 6 // \"totalFees\"",
      "defined_out": [
        "\"totalFees\"",
        "0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "0",
        "\"totalFees\""
      ]
    },
    "951": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "952": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "marketplaceFee#0",
        "maybe_value%2#0"
      ]
    },
    "953": {
      "op": "frame_dig 0",
      "defined_out": [
        "marketplaceFee#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "maybe_value%2#0",
        "marketplaceFee#0"
      ]
    },
    "955": {
      "op": "+",
      "defined_out": [
        "marketplaceFee#0",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "new_state_value%1#0"
      ]
    },
    "956": {
      "op": "bytec 6 // \"totalFees\"",
      "stack_out": [
        "marketplaceFee#0",
        "new_state_value%1#0",
        "\"totalFees\""
      ]
    },
    "958": {
      "op": "swap",
      "stack_out": [
        "marketplaceFee#0",
        "\"totalFees\"",
        "new_state_value%1#0"
      ]
    },
    "959": {
      "op": "app_global_put",
      "stack_out": [
        "marketplaceFee#0"
      ]
    },
    "960": {
      "op": "frame_dig -4",
      "stack_out": [
        "marketplaceFee#0",
        "listing#0 (copy)"
      ]
    },
    "962": {
      "op": "swap"
    },
    "963": {
      "retsub": true,
      "op": "retsub"
    },
    "964": {
      "block": "executeAtomicSettlement_else_body@3",
      "stack_in": [
        "marketplaceFee#0",
        "sellerAmount#0"
      ],
      "op": "itxn_begin"
    },
    "965": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "sellerAmount#0",
        "0"
      ]
    },
    "966": {
      "op": "bytec 8 // \"usdcAssetId\"",
      "defined_out": [
        "\"usdcAssetId\"",
        "0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "sellerAmount#0",
        "0",
        "\"usdcAssetId\""
      ]
    },
    "968": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "sellerAmount#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "969": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "marketplaceFee#0",
        "sellerAmount#0",
        "maybe_value%0#0"
      ]
    },
    "970": {
      "op": "frame_dig -4",
      "defined_out": [
        "listing#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "sellerAmount#0",
        "maybe_value%0#0",
        "listing#0 (copy)"
      ]
    },
    "972": {
      "error": "Index access is out of bounds",
      "op": "extract 16 32 // on error: Index access is out of bounds",
      "defined_out": [
        "maybe_value%0#0",
        "reinterpret_bytes[32]%1#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "sellerAmount#0",
        "maybe_value%0#0",
        "reinterpret_bytes[32]%1#0"
      ]
    },
    "975": {
      "op": "uncover 2",
      "defined_out": [
        "maybe_value%0#0",
        "reinterpret_bytes[32]%1#0",
        "sellerAmount#0"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "maybe_value%0#0",
        "reinterpret_bytes[32]%1#0",
        "sellerAmount#0"
      ]
    },
    "977": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "marketplaceFee#0",
        "maybe_value%0#0",
        "reinterpret_bytes[32]%1#0"
      ]
    },
    "979": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "marketplaceFee#0",
        "maybe_value%0#0"
      ]
    },
    "981": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "marketplaceFee#0"
      ]
    },
    "983": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "marketplaceFee#0",
        "4"
      ]
    },
    "984": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "marketplaceFee#0"
      ]
    },
    "986": {
      "op": "intc_0 // 0",
      "stack_out": [
        "marketplaceFee#0",
        "0"
      ]
    },
    "987": {
      "op": "itxn_field Fee",
      "stack_out": [
        "marketplaceFee#0"
      ]
    },
    "989": {
      "op": "itxn_submit"
    },
    "990": {
      "op": "b executeAtomicSettlement_after_if_else@5"
    },
    "993": {
      "subroutine": "smart_contracts/atomic_marketplace_v3/AtomicMarketplaceV3.algo.ts::AtomicMarketplaceV3.cancelListing",
      "params": {
        "listingId#0": "uint64"
      },
      "block": "cancelListing",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "996": {
      "op": "frame_dig -1",
      "defined_out": [
        "listingId#0 (copy)"
      ],
      "stack_out": [
        "listingId#0 (copy)"
      ]
    },
    "998": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "999": {
      "op": "bytec_3 // \"listings\"",
      "defined_out": [
        "\"listings\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"listings\""
      ]
    },
    "1000": {
      "op": "dig 1",
      "defined_out": [
        "\"listings\"",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"listings\"",
        "tmp%0#0 (copy)"
      ]
    },
    "1002": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1003": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "1004": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1005": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "maybe_exists%0#0"
      ]
    },
    "1007": {
      "error": "Listing not found",
      "op": "assert // Listing not found",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1008": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "1009": {
      "op": "box_get",
      "defined_out": [
        "listing#0",
        "maybe_exists%1#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "listing#0",
        "maybe_exists%1#0"
      ]
    },
    "1010": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "listing#0"
      ]
    },
    "1011": {
      "op": "dup",
      "defined_out": [
        "listing#0",
        "listing#0 (copy)",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "listing#0",
        "listing#0 (copy)"
      ]
    },
    "1012": {
      "error": "Index access is out of bounds",
      "op": "extract 16 32 // on error: Index access is out of bounds",
      "defined_out": [
        "listing#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "listing#0",
        "tmp%4#0"
      ]
    },
    "1015": {
      "op": "dup"
    },
    "1016": {
      "op": "txn Sender",
      "defined_out": [
        "listing#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%4#0",
        "tmp%4#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "listing#0",
        "tmp%4#0",
        "tmp%4#0 (copy)",
        "tmp%5#0"
      ]
    },
    "1018": {
      "op": "==",
      "defined_out": [
        "listing#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "listing#0",
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "1019": {
      "error": "Only seller can cancel",
      "op": "assert // Only seller can cancel",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "listing#0",
        "tmp%4#0"
      ]
    },
    "1020": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "listing#0",
        "tmp%4#0",
        "listing#0 (copy)"
      ]
    },
    "1022": {
      "op": "intc 4 // 640",
      "defined_out": [
        "640",
        "listing#0",
        "listing#0 (copy)",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "listing#0",
        "tmp%4#0",
        "listing#0 (copy)",
        "640"
      ]
    },
    "1024": {
      "op": "getbit",
      "defined_out": [
        "is_true%0#0",
        "listing#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "listing#0",
        "tmp%4#0",
        "is_true%0#0"
      ]
    },
    "1025": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "is_true%0#0",
        "listing#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "listing#0",
        "tmp%4#0",
        "is_true%0#0",
        "0x00"
      ]
    },
    "1026": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "is_true%0#0",
        "listing#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "listing#0",
        "tmp%4#0",
        "is_true%0#0",
        "0x00",
        "0"
      ]
    },
    "1027": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "listing#0",
        "tmp%4#0",
        "0x00",
        "0",
        "is_true%0#0"
      ]
    },
    "1029": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "listing#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "listing#0",
        "tmp%4#0",
        "encoded_bool%0#0"
      ]
    },
    "1030": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "listing#0",
        "tmp%4#0",
        "encoded_bool%0#0",
        "0"
      ]
    },
    "1031": {
      "op": "getbit",
      "defined_out": [
        "listing#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%4#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "listing#0",
        "tmp%4#0",
        "tmp%7#0"
      ]
    },
    "1032": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "listing#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%4#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "listing#0",
        "tmp%4#0",
        "tmp%7#0",
        "1"
      ]
    },
    "1033": {
      "op": "==",
      "defined_out": [
        "listing#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%4#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "listing#0",
        "tmp%4#0",
        "tmp%8#0"
      ]
    },
    "1034": {
      "error": "Listing already inactive",
      "op": "assert // Listing already inactive",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "listing#0",
        "tmp%4#0"
      ]
    },
    "1035": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "listing#0",
        "tmp%4#0",
        "listing#0 (copy)"
      ]
    },
    "1037": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "listing#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%4#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "listing#0",
        "tmp%4#0",
        "tmp%9#0"
      ]
    },
    "1040": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "listing#0",
        "tmp%4#0",
        "tmp%9#0",
        "listing#0 (copy)"
      ]
    },
    "1042": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "listing#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%4#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "listing#0",
        "tmp%4#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "1045": {
      "op": "dig 3",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "listing#0",
        "tmp%4#0",
        "tmp%9#0",
        "tmp%10#0",
        "listing#0 (copy)"
      ]
    },
    "1047": {
      "error": "Index access is out of bounds",
      "op": "extract 48 8 // on error: Index access is out of bounds",
      "defined_out": [
        "listing#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%12#0",
        "tmp%4#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "listing#0",
        "tmp%4#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%12#0"
      ]
    },
    "1050": {
      "op": "dig 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "listing#0",
        "tmp%4#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%12#0",
        "listing#0 (copy)"
      ]
    },
    "1052": {
      "error": "Index access is out of bounds",
      "op": "extract 56 8 // on error: Index access is out of bounds",
      "defined_out": [
        "listing#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%4#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "listing#0",
        "tmp%4#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "1055": {
      "op": "dig 5",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "listing#0",
        "tmp%4#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%12#0",
        "tmp%13#0",
        "listing#0 (copy)"
      ]
    },
    "1057": {
      "error": "Index access is out of bounds",
      "op": "extract 64 8 // on error: Index access is out of bounds",
      "defined_out": [
        "listing#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%4#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "listing#0",
        "tmp%4#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "1060": {
      "op": "dig 6",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "listing#0",
        "tmp%4#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0",
        "listing#0 (copy)"
      ]
    },
    "1062": {
      "error": "Index access is out of bounds",
      "op": "extract 72 8 // on error: Index access is out of bounds",
      "defined_out": [
        "listing#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%4#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "listing#0",
        "tmp%4#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "1065": {
      "op": "uncover 7",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%4#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "listing#0"
      ]
    },
    "1067": {
      "error": "Index access is out of bounds",
      "op": "extract 81 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%4#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%4#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "1070": {
      "op": "uncover 6",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%4#0",
        "tmp%10#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%9#0"
      ]
    },
    "1072": {
      "op": "uncover 6",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%4#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "1074": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%4#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1075": {
      "op": "uncover 6",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0",
        "encoded_tuple_buffer%2#0",
        "tmp%4#0"
      ]
    },
    "1077": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1078": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0",
        "encoded_tuple_buffer%3#0",
        "tmp%12#0"
      ]
    },
    "1080": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "1081": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0",
        "encoded_tuple_buffer%4#0",
        "tmp%13#0"
      ]
    },
    "1083": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "1084": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%15#0",
        "tmp%16#0",
        "encoded_tuple_buffer%5#0",
        "tmp%14#0"
      ]
    },
    "1086": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%15#0",
        "tmp%16#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "1087": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%16#0",
        "encoded_tuple_buffer%6#0",
        "tmp%15#0"
      ]
    },
    "1089": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%16#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "1090": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%16#0",
        "encoded_tuple_buffer%7#0",
        "0x00"
      ]
    },
    "1091": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%16#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "1092": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "encoded_tuple_buffer%8#0",
        "tmp%16#0"
      ]
    },
    "1093": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "1094": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1095": {
      "op": "bytec 9 // \"active\"",
      "defined_out": [
        "\"active\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"active\""
      ]
    },
    "1097": {
      "op": "swap",
      "stack_out": [
        "\"active\"",
        "tmp%0#0"
      ]
    },
    "1098": {
      "op": "concat",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "1099": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "tmp%20#0",
        "0x00"
      ]
    },
    "1100": {
      "op": "box_put",
      "stack_out": []
    },
    "1101": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "1102": {
      "retsub": true,
      "op": "retsub"
    },
    "1103": {
      "subroutine": "smart_contracts/atomic_marketplace_v3/AtomicMarketplaceV3.algo.ts::AtomicMarketplaceV3.getListing",
      "params": {
        "listingId#0": "uint64"
      },
      "block": "getListing",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1106": {
      "op": "frame_dig -1",
      "defined_out": [
        "listingId#0 (copy)"
      ],
      "stack_out": [
        "listingId#0 (copy)"
      ]
    },
    "1108": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1109": {
      "op": "bytec_3 // \"listings\"",
      "defined_out": [
        "\"listings\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"listings\""
      ]
    },
    "1110": {
      "op": "swap",
      "stack_out": [
        "\"listings\"",
        "tmp%0#0"
      ]
    },
    "1111": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1112": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "1113": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1114": {
      "op": "bury 1",
      "stack_out": [
        "tmp%1#0",
        "maybe_exists%0#0"
      ]
    },
    "1116": {
      "error": "Listing not found",
      "op": "assert // Listing not found",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1117": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1118": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1119": {
      "retsub": true,
      "op": "retsub"
    },
    "1120": {
      "subroutine": "smart_contracts/atomic_marketplace_v3/AtomicMarketplaceV3.algo.ts::AtomicMarketplaceV3.getSale",
      "params": {
        "saleId#0": "uint64"
      },
      "block": "getSale",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1123": {
      "op": "frame_dig -1",
      "defined_out": [
        "saleId#0 (copy)"
      ],
      "stack_out": [
        "saleId#0 (copy)"
      ]
    },
    "1125": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1126": {
      "op": "bytec 10 // \"sales\"",
      "defined_out": [
        "\"sales\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"sales\""
      ]
    },
    "1128": {
      "op": "swap",
      "stack_out": [
        "\"sales\"",
        "tmp%0#0"
      ]
    },
    "1129": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1130": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "1131": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1132": {
      "op": "bury 1",
      "stack_out": [
        "tmp%1#0",
        "maybe_exists%0#0"
      ]
    },
    "1134": {
      "error": "Sale not found",
      "op": "assert // Sale not found",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1135": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1136": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1137": {
      "retsub": true,
      "op": "retsub"
    },
    "1138": {
      "subroutine": "smart_contracts/atomic_marketplace_v3/AtomicMarketplaceV3.algo.ts::AtomicMarketplaceV3.getMarketplaceStats",
      "params": {},
      "block": "getMarketplaceStats",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1139": {
      "op": "bytec 5 // \"totalVolume\"",
      "defined_out": [
        "\"totalVolume\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalVolume\""
      ]
    },
    "1141": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1142": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1143": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "1144": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "1145": {
      "op": "bytec 6 // \"totalFees\"",
      "defined_out": [
        "\"totalFees\"",
        "0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0",
        "\"totalFees\""
      ]
    },
    "1147": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1148": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%1#0"
      ]
    },
    "1149": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "1150": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "0"
      ]
    },
    "1151": {
      "op": "bytec_2 // \"nextListingId\"",
      "defined_out": [
        "\"nextListingId\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "0",
        "\"nextListingId\""
      ]
    },
    "1152": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1153": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%2#0"
      ]
    },
    "1154": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%2#0",
        "1"
      ]
    },
    "1155": {
      "op": "-",
      "defined_out": [
        "to_encode%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "to_encode%0#0"
      ]
    },
    "1156": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "1157": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "0"
      ]
    },
    "1158": {
      "op": "bytec 4 // \"nextSaleId\"",
      "defined_out": [
        "\"nextSaleId\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "0",
        "\"nextSaleId\""
      ]
    },
    "1160": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1161": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "maybe_value%3#0"
      ]
    },
    "1162": {
      "op": "intc_1 // 1",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "maybe_value%3#0",
        "1"
      ]
    },
    "1163": {
      "op": "-",
      "defined_out": [
        "to_encode%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "to_encode%1#0"
      ]
    },
    "1164": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "1165": {
      "retsub": true,
      "op": "retsub"
    }
  }
}