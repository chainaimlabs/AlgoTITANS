{
    "name": "AtomicMarketplaceV3",
    "structs": {
        "InstrumentListing": [
            {
                "name": "listingId",
                "type": "uint64"
            },
            {
                "name": "instrumentId",
                "type": "uint64"
            },
            {
                "name": "seller",
                "type": "address"
            },
            {
                "name": "askPriceAlgo",
                "type": "uint64"
            },
            {
                "name": "askPriceUSDC",
                "type": "uint64"
            },
            {
                "name": "listingTime",
                "type": "uint64"
            },
            {
                "name": "validUntil",
                "type": "uint64"
            },
            {
                "name": "isActive",
                "type": "bool"
            },
            {
                "name": "marketplaceFee",
                "type": "uint64"
            }
        ],
        "InstrumentSale": [
            {
                "name": "saleId",
                "type": "uint64"
            },
            {
                "name": "instrumentId",
                "type": "uint64"
            },
            {
                "name": "seller",
                "type": "address"
            },
            {
                "name": "buyer",
                "type": "address"
            },
            {
                "name": "salePrice",
                "type": "uint64"
            },
            {
                "name": "currency",
                "type": "uint64"
            },
            {
                "name": "saleTime",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "initialize",
            "args": [
                {
                    "type": "uint64",
                    "name": "usdcAssetId"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Initialize marketplace",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "listInstrument",
            "args": [
                {
                    "type": "uint64",
                    "name": "instrumentId"
                },
                {
                    "type": "uint64",
                    "name": "askPriceAlgo"
                },
                {
                    "type": "uint64",
                    "name": "askPriceUSDC"
                },
                {
                    "type": "uint64",
                    "name": "validityPeriod"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "List instrument for sale",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "purchaseWithAlgo",
            "args": [
                {
                    "type": "uint64",
                    "name": "listingId"
                },
                {
                    "type": "pay",
                    "name": "payment"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Purchase instrument with ALGO payment",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "purchaseWithUSDC",
            "args": [
                {
                    "type": "uint64",
                    "name": "listingId"
                },
                {
                    "type": "axfer",
                    "name": "payment"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Purchase instrument with USDC payment",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "cancelListing",
            "args": [
                {
                    "type": "uint64",
                    "name": "listingId"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Cancel listing",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getListing",
            "args": [
                {
                    "type": "uint64",
                    "name": "listingId"
                }
            ],
            "returns": {
                "type": "(uint64,uint64,address,uint64,uint64,uint64,uint64,bool,uint64)",
                "struct": "InstrumentListing"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get listing details",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getSale",
            "args": [
                {
                    "type": "uint64",
                    "name": "saleId"
                }
            ],
            "returns": {
                "type": "(uint64,uint64,address,address,uint64,uint64,uint64)",
                "struct": "InstrumentSale"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get sale details",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getMarketplaceStats",
            "args": [],
            "returns": {
                "type": "(uint64,uint64,uint64,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get marketplace statistics",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 6,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "nextListingId": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bmV4dExpc3RpbmdJZA==",
                    "desc": "Global state"
                },
                "nextSaleId": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bmV4dFNhbGVJZA=="
                },
                "totalVolume": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxWb2x1bWU="
                },
                "totalFees": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxGZWVz"
                },
                "marketplaceFeeRate": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bWFya2V0cGxhY2VGZWVSYXRl"
                },
                "usdcAssetId": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dXNkY0Fzc2V0SWQ="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "listings": {
                    "keyType": "uint64",
                    "valueType": "InstrumentListing",
                    "desc": "Storage maps",
                    "prefix": "bGlzdGluZ3M="
                },
                "sales": {
                    "keyType": "uint64",
                    "valueType": "InstrumentSale",
                    "prefix": "c2FsZXM="
                },
                "activeListings": {
                    "keyType": "uint64",
                    "valueType": "bool",
                    "prefix": "YWN0aXZl"
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        620
                    ],
                    "errorMessage": "ALGO not accepted for this listing"
                },
                {
                    "pc": [
                        592,
                        671,
                        1010,
                        1118,
                        1136
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        629,
                        708
                    ],
                    "errorMessage": "Incorrect payment amount"
                },
                {
                    "pc": [
                        769,
                        786,
                        819,
                        866,
                        871,
                        876,
                        881,
                        886,
                        891,
                        972,
                        1012,
                        1037,
                        1042,
                        1047,
                        1052,
                        1057,
                        1062,
                        1067
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        1034
                    ],
                    "errorMessage": "Listing already inactive"
                },
                {
                    "pc": [
                        614,
                        693
                    ],
                    "errorMessage": "Listing expired"
                },
                {
                    "pc": [
                        606,
                        685
                    ],
                    "errorMessage": "Listing inactive"
                },
                {
                    "pc": [
                        590,
                        669,
                        1007,
                        1116
                    ],
                    "errorMessage": "Listing not found"
                },
                {
                    "pc": [
                        735
                    ],
                    "errorMessage": "Must pay with USDC"
                },
                {
                    "pc": [
                        493
                    ],
                    "errorMessage": "Must set price in at least one currency"
                },
                {
                    "pc": [
                        191,
                        217,
                        237,
                        257,
                        282,
                        317,
                        352,
                        385
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        426
                    ],
                    "errorMessage": "Only creator can initialize"
                },
                {
                    "pc": [
                        1019
                    ],
                    "errorMessage": "Only seller can cancel"
                },
                {
                    "pc": [
                        645,
                        724
                    ],
                    "errorMessage": "Payment sender mismatch"
                },
                {
                    "pc": [
                        637,
                        716
                    ],
                    "errorMessage": "Payment to wrong address"
                },
                {
                    "pc": [
                        1134
                    ],
                    "errorMessage": "Sale not found"
                },
                {
                    "pc": [
                        699
                    ],
                    "errorMessage": "USDC not accepted for this listing"
                },
                {
                    "pc": [
                        415
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        194,
                        220,
                        240,
                        260,
                        285,
                        320,
                        355,
                        388
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        459,
                        497,
                        524,
                        733,
                        814,
                        940,
                        952,
                        969,
                        1142,
                        1148,
                        1153,
                        1161
                    ],
                    "errorMessage": "check GlobalState exists"
                },
                {
                    "pc": [
                        299
                    ],
                    "errorMessage": "transaction type is axfer"
                },
                {
                    "pc": [
                        334
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMCAxIDQgMTAwIDY0MAogICAgYnl0ZWNibG9jayAweDAwIDB4MTUxZjdjNzUgIm5leHRMaXN0aW5nSWQiICJsaXN0aW5ncyIgIm5leHRTYWxlSWQiICJ0b3RhbFZvbHVtZSIgInRvdGFsRmVlcyIgIm1hcmtldHBsYWNlRmVlUmF0ZSIgInVzZGNBc3NldElkIiAiYWN0aXZlIiAic2FsZXMiCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czo1MAogICAgLy8gZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXRvbWljTWFya2V0cGxhY2VWMyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBtYWluX2JhcmVfcm91dGluZ0AxMwogICAgcHVzaGJ5dGVzcyAweGVhNzE2N2MyIDB4OTk0OTczYzMgMHg1ZTQ3ZWNkMyAweGY3NTQ5YTUyIDB4YWFmZjEwZTEgMHg0ZTc0ZTRkMyAweDFjMzk0ZDY4IDB4MGNkMTg0MmUgLy8gbWV0aG9kICJpbml0aWFsaXplKHVpbnQ2NClib29sIiwgbWV0aG9kICJsaXN0SW5zdHJ1bWVudCh1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQpdWludDY0IiwgbWV0aG9kICJwdXJjaGFzZVdpdGhBbGdvKHVpbnQ2NCxwYXkpYm9vbCIsIG1ldGhvZCAicHVyY2hhc2VXaXRoVVNEQyh1aW50NjQsYXhmZXIpYm9vbCIsIG1ldGhvZCAiY2FuY2VsTGlzdGluZyh1aW50NjQpYm9vbCIsIG1ldGhvZCAiZ2V0TGlzdGluZyh1aW50NjQpKHVpbnQ2NCx1aW50NjQsYWRkcmVzcyx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsYm9vbCx1aW50NjQpIiwgbWV0aG9kICJnZXRTYWxlKHVpbnQ2NCkodWludDY0LHVpbnQ2NCxhZGRyZXNzLGFkZHJlc3MsdWludDY0LHVpbnQ2NCx1aW50NjQpIiwgbWV0aG9kICJnZXRNYXJrZXRwbGFjZVN0YXRzKCkodWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0KSIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIG1haW5faW5pdGlhbGl6ZV9yb3V0ZUAzIG1haW5fbGlzdEluc3RydW1lbnRfcm91dGVANCBtYWluX3B1cmNoYXNlV2l0aEFsZ29fcm91dGVANSBtYWluX3B1cmNoYXNlV2l0aFVTRENfcm91dGVANiBtYWluX2NhbmNlbExpc3Rpbmdfcm91dGVANyBtYWluX2dldExpc3Rpbmdfcm91dGVAOCBtYWluX2dldFNhbGVfcm91dGVAOSBtYWluX2dldE1hcmtldHBsYWNlU3RhdHNfcm91dGVAMTAKCm1haW5fYWZ0ZXJfaWZfZWxzZUAxNzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdG9taWNfbWFya2V0cGxhY2VfdjMvQXRvbWljTWFya2V0cGxhY2VWMy5hbGdvLnRzOjUwCiAgICAvLyBleHBvcnQgZGVmYXVsdCBjbGFzcyBBdG9taWNNYXJrZXRwbGFjZVYzIGV4dGVuZHMgQ29udHJhY3QgewogICAgaW50Y18wIC8vIDAKICAgIHJldHVybgoKbWFpbl9nZXRNYXJrZXRwbGFjZVN0YXRzX3JvdXRlQDEwOgogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6MzIyCiAgICAvLyBAYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBnZXRNYXJrZXRwbGFjZVN0YXRzCiAgICB1bmNvdmVyIDMKICAgIHVuY292ZXIgMwogICAgY29uY2F0CiAgICB1bmNvdmVyIDIKICAgIGNvbmNhdAogICAgc3dhcAogICAgY29uY2F0CiAgICBieXRlY18xIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2dldFNhbGVfcm91dGVAOToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdG9taWNfbWFya2V0cGxhY2VfdjMvQXRvbWljTWFya2V0cGxhY2VWMy5hbGdvLnRzOjMxMwogICAgLy8gQGFiaW1ldGhvZCh7IHJlYWRvbmx5OiB0cnVlIH0pCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdG9taWNfbWFya2V0cGxhY2VfdjMvQXRvbWljTWFya2V0cGxhY2VWMy5hbGdvLnRzOjUwCiAgICAvLyBleHBvcnQgZGVmYXVsdCBjbGFzcyBBdG9taWNNYXJrZXRwbGFjZVYzIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6MzEzCiAgICAvLyBAYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIGNhbGxzdWIgZ2V0U2FsZQogICAgYnl0ZWNfMSAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9nZXRMaXN0aW5nX3JvdXRlQDg6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czozMDQKICAgIC8vIEBhYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czo1MAogICAgLy8gZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXRvbWljTWFya2V0cGxhY2VWMyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdG9taWNfbWFya2V0cGxhY2VfdjMvQXRvbWljTWFya2V0cGxhY2VWMy5hbGdvLnRzOjMwNAogICAgLy8gQGFiaW1ldGhvZCh7IHJlYWRvbmx5OiB0cnVlIH0pCiAgICBjYWxsc3ViIGdldExpc3RpbmcKICAgIGJ5dGVjXzEgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fY2FuY2VsTGlzdGluZ19yb3V0ZUA3OgogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6MjgyCiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6NTAKICAgIC8vIGV4cG9ydCBkZWZhdWx0IGNsYXNzIEF0b21pY01hcmtldHBsYWNlVjMgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czoyODIKICAgIC8vIEBhYmltZXRob2QoKQogICAgY2FsbHN1YiBjYW5jZWxMaXN0aW5nCiAgICBieXRlY18wIC8vIDB4MDAKICAgIGludGNfMCAvLyAwCiAgICB1bmNvdmVyIDIKICAgIHNldGJpdAogICAgYnl0ZWNfMSAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9wdXJjaGFzZVdpdGhVU0RDX3JvdXRlQDY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czoxNjQKICAgIC8vIEBhYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czo1MAogICAgLy8gZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXRvbWljTWFya2V0cGxhY2VWMyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIHR4biBHcm91cEluZGV4CiAgICBpbnRjXzEgLy8gMQogICAgLQogICAgZHVwCiAgICBndHhucyBUeXBlRW51bQogICAgaW50Y18yIC8vIGF4ZmVyCiAgICA9PQogICAgYXNzZXJ0IC8vIHRyYW5zYWN0aW9uIHR5cGUgaXMgYXhmZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdG9taWNfbWFya2V0cGxhY2VfdjMvQXRvbWljTWFya2V0cGxhY2VWMy5hbGdvLnRzOjE2NAogICAgLy8gQGFiaW1ldGhvZCgpCiAgICBjYWxsc3ViIHB1cmNoYXNlV2l0aFVTREMKICAgIGJ5dGVjXzAgLy8gMHgwMAogICAgaW50Y18wIC8vIDAKICAgIHVuY292ZXIgMgogICAgc2V0Yml0CiAgICBieXRlY18xIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX3B1cmNoYXNlV2l0aEFsZ29fcm91dGVANToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdG9taWNfbWFya2V0cGxhY2VfdjMvQXRvbWljTWFya2V0cGxhY2VWMy5hbGdvLnRzOjEzMgogICAgLy8gQGFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdG9taWNfbWFya2V0cGxhY2VfdjMvQXRvbWljTWFya2V0cGxhY2VWMy5hbGdvLnRzOjUwCiAgICAvLyBleHBvcnQgZGVmYXVsdCBjbGFzcyBBdG9taWNNYXJrZXRwbGFjZVYzIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgdHhuIEdyb3VwSW5kZXgKICAgIGludGNfMSAvLyAxCiAgICAtCiAgICBkdXAKICAgIGd0eG5zIFR5cGVFbnVtCiAgICBpbnRjXzEgLy8gcGF5CiAgICA9PQogICAgYXNzZXJ0IC8vIHRyYW5zYWN0aW9uIHR5cGUgaXMgcGF5CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czoxMzIKICAgIC8vIEBhYmltZXRob2QoKQogICAgY2FsbHN1YiBwdXJjaGFzZVdpdGhBbGdvCiAgICBieXRlY18wIC8vIDB4MDAKICAgIGludGNfMCAvLyAwCiAgICB1bmNvdmVyIDIKICAgIHNldGJpdAogICAgYnl0ZWNfMSAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9saXN0SW5zdHJ1bWVudF9yb3V0ZUA0OgogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6ODgKICAgIC8vIEBhYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czo1MAogICAgLy8gZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXRvbWljTWFya2V0cGxhY2VWMyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIGJ0b2kKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDMKICAgIGJ0b2kKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDQKICAgIGJ0b2kKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdG9taWNfbWFya2V0cGxhY2VfdjMvQXRvbWljTWFya2V0cGxhY2VWMy5hbGdvLnRzOjg4CiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIGNhbGxzdWIgbGlzdEluc3RydW1lbnQKICAgIGl0b2IKICAgIGJ5dGVjXzEgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5faW5pdGlhbGl6ZV9yb3V0ZUAzOgogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6NzEKICAgIC8vIEBhYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czo1MAogICAgLy8gZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXRvbWljTWFya2V0cGxhY2VWMyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdG9taWNfbWFya2V0cGxhY2VfdjMvQXRvbWljTWFya2V0cGxhY2VWMy5hbGdvLnRzOjcxCiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIGNhbGxzdWIgaW5pdGlhbGl6ZQogICAgYnl0ZWNfMCAvLyAweDAwCiAgICBpbnRjXzAgLy8gMAogICAgdW5jb3ZlciAyCiAgICBzZXRiaXQKICAgIGJ5dGVjXzEgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fYmFyZV9yb3V0aW5nQDEzOgogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6NTAKICAgIC8vIGV4cG9ydCBkZWZhdWx0IGNsYXNzIEF0b21pY01hcmtldHBsYWNlVjMgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBibnogbWFpbl9hZnRlcl9pZl9lbHNlQDE3CiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgIQogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBjcmVhdGluZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9hdG9taWNfbWFya2V0cGxhY2VfdjMvQXRvbWljTWFya2V0cGxhY2VWMy5hbGdvLnRzOjpBdG9taWNNYXJrZXRwbGFjZVYzLmluaXRpYWxpemUodXNkY0Fzc2V0SWQ6IHVpbnQ2NCkgLT4gdWludDY0Ogppbml0aWFsaXplOgogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6NzEtNzIKICAgIC8vIEBhYmltZXRob2QoKQogICAgLy8gcHVibGljIGluaXRpYWxpemUodXNkY0Fzc2V0SWQ6IHVpbnQ2NCk6IGJvb2xlYW4gewogICAgcHJvdG8gMSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czo3MwogICAgLy8gYXNzZXJ0KFR4bi5zZW5kZXIgPT09IEdsb2JhbC5jcmVhdG9yQWRkcmVzcywgJ09ubHkgY3JlYXRvciBjYW4gaW5pdGlhbGl6ZScpCiAgICB0eG4gU2VuZGVyCiAgICBnbG9iYWwgQ3JlYXRvckFkZHJlc3MKICAgID09CiAgICBhc3NlcnQgLy8gT25seSBjcmVhdG9yIGNhbiBpbml0aWFsaXplCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czo2MQogICAgLy8gcHVibGljIG5leHRMaXN0aW5nSWQgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KCkKICAgIGJ5dGVjXzIgLy8gIm5leHRMaXN0aW5nSWQiCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czo3NQogICAgLy8gdGhpcy5uZXh0TGlzdGluZ0lkLnZhbHVlID0gMQogICAgaW50Y18xIC8vIDEKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czo2MgogICAgLy8gcHVibGljIG5leHRTYWxlSWQgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KCkKICAgIGJ5dGVjIDQgLy8gIm5leHRTYWxlSWQiCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czo3NgogICAgLy8gdGhpcy5uZXh0U2FsZUlkLnZhbHVlID0gMQogICAgaW50Y18xIC8vIDEKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czo2MwogICAgLy8gcHVibGljIHRvdGFsVm9sdW1lID0gR2xvYmFsU3RhdGU8dWludDY0PigpCiAgICBieXRlYyA1IC8vICJ0b3RhbFZvbHVtZSIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdG9taWNfbWFya2V0cGxhY2VfdjMvQXRvbWljTWFya2V0cGxhY2VWMy5hbGdvLnRzOjc3CiAgICAvLyB0aGlzLnRvdGFsVm9sdW1lLnZhbHVlID0gMAogICAgaW50Y18wIC8vIDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czo2NAogICAgLy8gcHVibGljIHRvdGFsRmVlcyA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oKQogICAgYnl0ZWMgNiAvLyAidG90YWxGZWVzIgogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6NzgKICAgIC8vIHRoaXMudG90YWxGZWVzLnZhbHVlID0gMAogICAgaW50Y18wIC8vIDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czo2NQogICAgLy8gcHVibGljIG1hcmtldHBsYWNlRmVlUmF0ZSA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oKQogICAgYnl0ZWMgNyAvLyAibWFya2V0cGxhY2VGZWVSYXRlIgogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6NzkKICAgIC8vIHRoaXMubWFya2V0cGxhY2VGZWVSYXRlLnZhbHVlID0gMTAwIC8vIDElCiAgICBpbnRjXzMgLy8gMTAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6NjYKICAgIC8vIHB1YmxpYyB1c2RjQXNzZXRJZCA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oKQogICAgYnl0ZWMgOCAvLyAidXNkY0Fzc2V0SWQiCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czo4MAogICAgLy8gdGhpcy51c2RjQXNzZXRJZC52YWx1ZSA9IHVzZGNBc3NldElkCiAgICBmcmFtZV9kaWcgLTEKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czo4MgogICAgLy8gcmV0dXJuIHRydWUKICAgIGludGNfMSAvLyAxCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czo6QXRvbWljTWFya2V0cGxhY2VWMy5saXN0SW5zdHJ1bWVudChpbnN0cnVtZW50SWQ6IHVpbnQ2NCwgYXNrUHJpY2VBbGdvOiB1aW50NjQsIGFza1ByaWNlVVNEQzogdWludDY0LCB2YWxpZGl0eVBlcmlvZDogdWludDY0KSAtPiB1aW50NjQ6Cmxpc3RJbnN0cnVtZW50OgogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6ODgtOTQKICAgIC8vIEBhYmltZXRob2QoKQogICAgLy8gcHVibGljIGxpc3RJbnN0cnVtZW50KAogICAgLy8gICBpbnN0cnVtZW50SWQ6IHVpbnQ2NCwKICAgIC8vICAgYXNrUHJpY2VBbGdvOiB1aW50NjQsCiAgICAvLyAgIGFza1ByaWNlVVNEQzogdWludDY0LAogICAgLy8gICB2YWxpZGl0eVBlcmlvZDogdWludDY0CiAgICAvLyApOiB1aW50NjQgewogICAgcHJvdG8gNCAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czo2MQogICAgLy8gcHVibGljIG5leHRMaXN0aW5nSWQgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KCkKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18yIC8vICJuZXh0TGlzdGluZ0lkIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdG9taWNfbWFya2V0cGxhY2VfdjMvQXRvbWljTWFya2V0cGxhY2VWMy5hbGdvLnRzOjk2CiAgICAvLyBpZiAodGhpcy5uZXh0TGlzdGluZ0lkLnZhbHVlID09PSAwKSB7CiAgICBibnogbGlzdEluc3RydW1lbnRfYWZ0ZXJfaWZfZWxzZUAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czo2MQogICAgLy8gcHVibGljIG5leHRMaXN0aW5nSWQgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KCkKICAgIGJ5dGVjXzIgLy8gIm5leHRMaXN0aW5nSWQiCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czo5NwogICAgLy8gdGhpcy5uZXh0TGlzdGluZ0lkLnZhbHVlID0gMQogICAgaW50Y18xIC8vIDEKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czo2MgogICAgLy8gcHVibGljIG5leHRTYWxlSWQgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KCkKICAgIGJ5dGVjIDQgLy8gIm5leHRTYWxlSWQiCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czo5OAogICAgLy8gdGhpcy5uZXh0U2FsZUlkLnZhbHVlID0gMQogICAgaW50Y18xIC8vIDEKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czo2MwogICAgLy8gcHVibGljIHRvdGFsVm9sdW1lID0gR2xvYmFsU3RhdGU8dWludDY0PigpCiAgICBieXRlYyA1IC8vICJ0b3RhbFZvbHVtZSIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdG9taWNfbWFya2V0cGxhY2VfdjMvQXRvbWljTWFya2V0cGxhY2VWMy5hbGdvLnRzOjk5CiAgICAvLyB0aGlzLnRvdGFsVm9sdW1lLnZhbHVlID0gMAogICAgaW50Y18wIC8vIDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czo2NAogICAgLy8gcHVibGljIHRvdGFsRmVlcyA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oKQogICAgYnl0ZWMgNiAvLyAidG90YWxGZWVzIgogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6MTAwCiAgICAvLyB0aGlzLnRvdGFsRmVlcy52YWx1ZSA9IDAKICAgIGludGNfMCAvLyAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6NjUKICAgIC8vIHB1YmxpYyBtYXJrZXRwbGFjZUZlZVJhdGUgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KCkKICAgIGJ5dGVjIDcgLy8gIm1hcmtldHBsYWNlRmVlUmF0ZSIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdG9taWNfbWFya2V0cGxhY2VfdjMvQXRvbWljTWFya2V0cGxhY2VWMy5hbGdvLnRzOjEwMQogICAgLy8gdGhpcy5tYXJrZXRwbGFjZUZlZVJhdGUudmFsdWUgPSAxMDAgLy8gMSUKICAgIGludGNfMyAvLyAxMDAKICAgIGFwcF9nbG9iYWxfcHV0CgpsaXN0SW5zdHJ1bWVudF9hZnRlcl9pZl9lbHNlQDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czoxMDUKICAgIC8vIGFzc2VydChhc2tQcmljZUFsZ28gPiAwIHx8IGFza1ByaWNlVVNEQyA+IDAsICdNdXN0IHNldCBwcmljZSBpbiBhdCBsZWFzdCBvbmUgY3VycmVuY3knKQogICAgZnJhbWVfZGlnIC0zCiAgICBibnogbGlzdEluc3RydW1lbnRfYm9vbF90cnVlQDQKICAgIGZyYW1lX2RpZyAtMgogICAgYnogbGlzdEluc3RydW1lbnRfYm9vbF9mYWxzZUA1CgpsaXN0SW5zdHJ1bWVudF9ib29sX3RydWVANDoKICAgIGludGNfMSAvLyAxCgpsaXN0SW5zdHJ1bWVudF9ib29sX21lcmdlQDY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czoxMDUKICAgIC8vIGFzc2VydChhc2tQcmljZUFsZ28gPiAwIHx8IGFza1ByaWNlVVNEQyA+IDAsICdNdXN0IHNldCBwcmljZSBpbiBhdCBsZWFzdCBvbmUgY3VycmVuY3knKQogICAgYXNzZXJ0IC8vIE11c3Qgc2V0IHByaWNlIGluIGF0IGxlYXN0IG9uZSBjdXJyZW5jeQogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6NjEKICAgIC8vIHB1YmxpYyBuZXh0TGlzdGluZ0lkID0gR2xvYmFsU3RhdGU8dWludDY0PigpCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMiAvLyAibmV4dExpc3RpbmdJZCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czoxMTAKICAgIC8vIGxpc3RpbmdJZDogbmV3IGFyYzQuVWludE42NChsaXN0aW5nSWQpLAogICAgZHVwCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czoxMTEKICAgIC8vIGluc3RydW1lbnRJZDogbmV3IGFyYzQuVWludE42NChpbnN0cnVtZW50SWQpLAogICAgZnJhbWVfZGlnIC00CiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czoxMTIKICAgIC8vIHNlbGxlcjogbmV3IGFyYzQuQWRkcmVzcyhUeG4uc2VuZGVyKSwKICAgIHR4biBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdG9taWNfbWFya2V0cGxhY2VfdjMvQXRvbWljTWFya2V0cGxhY2VWMy5hbGdvLnRzOjExMwogICAgLy8gYXNrUHJpY2VBbGdvOiBuZXcgYXJjNC5VaW50TjY0KGFza1ByaWNlQWxnbyksCiAgICBmcmFtZV9kaWcgLTMKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdG9taWNfbWFya2V0cGxhY2VfdjMvQXRvbWljTWFya2V0cGxhY2VWMy5hbGdvLnRzOjExNAogICAgLy8gYXNrUHJpY2VVU0RDOiBuZXcgYXJjNC5VaW50TjY0KGFza1ByaWNlVVNEQyksCiAgICBmcmFtZV9kaWcgLTIKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdG9taWNfbWFya2V0cGxhY2VfdjMvQXRvbWljTWFya2V0cGxhY2VWMy5hbGdvLnRzOjExNQogICAgLy8gbGlzdGluZ1RpbWU6IG5ldyBhcmM0LlVpbnRONjQoR2xvYmFsLmxhdGVzdFRpbWVzdGFtcCksCiAgICBnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czoxMTYKICAgIC8vIHZhbGlkVW50aWw6IG5ldyBhcmM0LlVpbnRONjQoR2xvYmFsLmxhdGVzdFRpbWVzdGFtcCArIHZhbGlkaXR5UGVyaW9kKSwKICAgIGdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKICAgIGZyYW1lX2RpZyAtMQogICAgKwogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6NjUKICAgIC8vIHB1YmxpYyBtYXJrZXRwbGFjZUZlZVJhdGUgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KCkKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA3IC8vICJtYXJrZXRwbGFjZUZlZVJhdGUiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6MTE4CiAgICAvLyBtYXJrZXRwbGFjZUZlZTogbmV3IGFyYzQuVWludE42NCh0aGlzLm1hcmtldHBsYWNlRmVlUmF0ZS52YWx1ZSkKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdG9taWNfbWFya2V0cGxhY2VfdjMvQXRvbWljTWFya2V0cGxhY2VWMy5hbGdvLnRzOjEwOS0xMTkKICAgIC8vIGNvbnN0IGxpc3RpbmcgPSBuZXcgSW5zdHJ1bWVudExpc3RpbmcoewogICAgLy8gICBsaXN0aW5nSWQ6IG5ldyBhcmM0LlVpbnRONjQobGlzdGluZ0lkKSwKICAgIC8vICAgaW5zdHJ1bWVudElkOiBuZXcgYXJjNC5VaW50TjY0KGluc3RydW1lbnRJZCksCiAgICAvLyAgIHNlbGxlcjogbmV3IGFyYzQuQWRkcmVzcyhUeG4uc2VuZGVyKSwKICAgIC8vICAgYXNrUHJpY2VBbGdvOiBuZXcgYXJjNC5VaW50TjY0KGFza1ByaWNlQWxnbyksCiAgICAvLyAgIGFza1ByaWNlVVNEQzogbmV3IGFyYzQuVWludE42NChhc2tQcmljZVVTREMpLAogICAgLy8gICBsaXN0aW5nVGltZTogbmV3IGFyYzQuVWludE42NChHbG9iYWwubGF0ZXN0VGltZXN0YW1wKSwKICAgIC8vICAgdmFsaWRVbnRpbDogbmV3IGFyYzQuVWludE42NChHbG9iYWwubGF0ZXN0VGltZXN0YW1wICsgdmFsaWRpdHlQZXJpb2QpLAogICAgLy8gICBpc0FjdGl2ZTogbmV3IGFyYzQuQm9vbCh0cnVlKSwKICAgIC8vICAgbWFya2V0cGxhY2VGZWU6IG5ldyBhcmM0LlVpbnRONjQodGhpcy5tYXJrZXRwbGFjZUZlZVJhdGUudmFsdWUpCiAgICAvLyB9KQogICAgZGlnIDcKICAgIHVuY292ZXIgNwogICAgY29uY2F0CiAgICB1bmNvdmVyIDYKICAgIGNvbmNhdAogICAgdW5jb3ZlciA1CiAgICBjb25jYXQKICAgIHVuY292ZXIgNAogICAgY29uY2F0CiAgICB1bmNvdmVyIDMKICAgIGNvbmNhdAogICAgdW5jb3ZlciAyCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdG9taWNfbWFya2V0cGxhY2VfdjMvQXRvbWljTWFya2V0cGxhY2VWMy5hbGdvLnRzOjExNwogICAgLy8gaXNBY3RpdmU6IG5ldyBhcmM0LkJvb2wodHJ1ZSksCiAgICBwdXNoYnl0ZXMgMHg4MAogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6MTA5LTExOQogICAgLy8gY29uc3QgbGlzdGluZyA9IG5ldyBJbnN0cnVtZW50TGlzdGluZyh7CiAgICAvLyAgIGxpc3RpbmdJZDogbmV3IGFyYzQuVWludE42NChsaXN0aW5nSWQpLAogICAgLy8gICBpbnN0cnVtZW50SWQ6IG5ldyBhcmM0LlVpbnRONjQoaW5zdHJ1bWVudElkKSwKICAgIC8vICAgc2VsbGVyOiBuZXcgYXJjNC5BZGRyZXNzKFR4bi5zZW5kZXIpLAogICAgLy8gICBhc2tQcmljZUFsZ286IG5ldyBhcmM0LlVpbnRONjQoYXNrUHJpY2VBbGdvKSwKICAgIC8vICAgYXNrUHJpY2VVU0RDOiBuZXcgYXJjNC5VaW50TjY0KGFza1ByaWNlVVNEQyksCiAgICAvLyAgIGxpc3RpbmdUaW1lOiBuZXcgYXJjNC5VaW50TjY0KEdsb2JhbC5sYXRlc3RUaW1lc3RhbXApLAogICAgLy8gICB2YWxpZFVudGlsOiBuZXcgYXJjNC5VaW50TjY0KEdsb2JhbC5sYXRlc3RUaW1lc3RhbXAgKyB2YWxpZGl0eVBlcmlvZCksCiAgICAvLyAgIGlzQWN0aXZlOiBuZXcgYXJjNC5Cb29sKHRydWUpLAogICAgLy8gICBtYXJrZXRwbGFjZUZlZTogbmV3IGFyYzQuVWludE42NCh0aGlzLm1hcmtldHBsYWNlRmVlUmF0ZS52YWx1ZSkKICAgIC8vIH0pCiAgICBjb25jYXQKICAgIHN3YXAKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6NTQKICAgIC8vIHB1YmxpYyBsaXN0aW5ncyA9IEJveE1hcDx1aW50NjQsIEluc3RydW1lbnRMaXN0aW5nPih7IGtleVByZWZpeDogJ2xpc3RpbmdzJyB9KQogICAgYnl0ZWNfMyAvLyAibGlzdGluZ3MiCiAgICBkaWcgMgogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czoxMjIKICAgIC8vIHRoaXMubGlzdGluZ3MobGlzdGluZ0lkKS52YWx1ZSA9IGxpc3RpbmcuY29weSgpCiAgICBzd2FwCiAgICBib3hfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czo1NgogICAgLy8gcHVibGljIGFjdGl2ZUxpc3RpbmdzID0gQm94TWFwPHVpbnQ2NCwgYXJjNC5Cb29sPih7IGtleVByZWZpeDogJ2FjdGl2ZScgfSkKICAgIGJ5dGVjIDkgLy8gImFjdGl2ZSIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6MTIzCiAgICAvLyB0aGlzLmFjdGl2ZUxpc3RpbmdzKGxpc3RpbmdJZCkudmFsdWUgPSBuZXcgYXJjNC5Cb29sKHRydWUpCiAgICBwdXNoYnl0ZXMgMHg4MAogICAgYm94X3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6MTI0CiAgICAvLyB0aGlzLm5leHRMaXN0aW5nSWQudmFsdWUgPSBsaXN0aW5nSWQgKyAxCiAgICBkdXAKICAgIGludGNfMSAvLyAxCiAgICArCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czo2MQogICAgLy8gcHVibGljIG5leHRMaXN0aW5nSWQgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KCkKICAgIGJ5dGVjXzIgLy8gIm5leHRMaXN0aW5nSWQiCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czoxMjQKICAgIC8vIHRoaXMubmV4dExpc3RpbmdJZC52YWx1ZSA9IGxpc3RpbmdJZCArIDEKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czoxMjYKICAgIC8vIHJldHVybiBsaXN0aW5nSWQKICAgIHJldHN1YgoKbGlzdEluc3RydW1lbnRfYm9vbF9mYWxzZUA1OgogICAgaW50Y18wIC8vIDAKICAgIGIgbGlzdEluc3RydW1lbnRfYm9vbF9tZXJnZUA2CgoKLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6OkF0b21pY01hcmtldHBsYWNlVjMucHVyY2hhc2VXaXRoQWxnbyhsaXN0aW5nSWQ6IHVpbnQ2NCwgcGF5bWVudDogdWludDY0KSAtPiB1aW50NjQ6CnB1cmNoYXNlV2l0aEFsZ286CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czoxMzItMTM2CiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIC8vIHB1YmxpYyBwdXJjaGFzZVdpdGhBbGdvKAogICAgLy8gICBsaXN0aW5nSWQ6IHVpbnQ2NCwKICAgIC8vICAgcGF5bWVudDogZ3R4bi5QYXltZW50VHhuCiAgICAvLyApOiBib29sZWFuIHsKICAgIHByb3RvIDIgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6MTM3CiAgICAvLyBhc3NlcnQodGhpcy5saXN0aW5ncyhsaXN0aW5nSWQpLmV4aXN0cywgJ0xpc3Rpbmcgbm90IGZvdW5kJykKICAgIGZyYW1lX2RpZyAtMgogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6NTQKICAgIC8vIHB1YmxpYyBsaXN0aW5ncyA9IEJveE1hcDx1aW50NjQsIEluc3RydW1lbnRMaXN0aW5nPih7IGtleVByZWZpeDogJ2xpc3RpbmdzJyB9KQogICAgYnl0ZWNfMyAvLyAibGlzdGluZ3MiCiAgICBzd2FwCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdG9taWNfbWFya2V0cGxhY2VfdjMvQXRvbWljTWFya2V0cGxhY2VWMy5hbGdvLnRzOjEzNwogICAgLy8gYXNzZXJ0KHRoaXMubGlzdGluZ3MobGlzdGluZ0lkKS5leGlzdHMsICdMaXN0aW5nIG5vdCBmb3VuZCcpCiAgICBkdXAKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYXNzZXJ0IC8vIExpc3Rpbmcgbm90IGZvdW5kCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czoxMzgKICAgIC8vIGNvbnN0IGxpc3RpbmcgPSB0aGlzLmxpc3RpbmdzKGxpc3RpbmdJZCkudmFsdWUuY29weSgpCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6MTQxCiAgICAvLyBhc3NlcnQobGlzdGluZy5pc0FjdGl2ZS5uYXRpdmUgPT09IHRydWUsICdMaXN0aW5nIGluYWN0aXZlJykKICAgIGR1cAogICAgaW50YyA0IC8vIDY0MAogICAgZ2V0Yml0CiAgICBieXRlY18wIC8vIDB4MDAKICAgIGludGNfMCAvLyAwCiAgICB1bmNvdmVyIDIKICAgIHNldGJpdAogICAgaW50Y18wIC8vIDAKICAgIGdldGJpdAogICAgaW50Y18xIC8vIDEKICAgID09CiAgICBhc3NlcnQgLy8gTGlzdGluZyBpbmFjdGl2ZQogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6MTQyCiAgICAvLyBhc3NlcnQobGlzdGluZy52YWxpZFVudGlsLm5hdGl2ZSA+IEdsb2JhbC5sYXRlc3RUaW1lc3RhbXAsICdMaXN0aW5nIGV4cGlyZWQnKQogICAgZHVwCiAgICBwdXNoaW50IDcyIC8vIDcyCiAgICBleHRyYWN0X3VpbnQ2NAogICAgZ2xvYmFsIExhdGVzdFRpbWVzdGFtcAogICAgPgogICAgYXNzZXJ0IC8vIExpc3RpbmcgZXhwaXJlZAogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6MTQzCiAgICAvLyBhc3NlcnQobGlzdGluZy5hc2tQcmljZUFsZ28ubmF0aXZlID4gMCwgJ0FMR08gbm90IGFjY2VwdGVkIGZvciB0aGlzIGxpc3RpbmcnKQogICAgZHVwCiAgICBwdXNoaW50IDQ4IC8vIDQ4CiAgICBleHRyYWN0X3VpbnQ2NAogICAgZHVwCiAgICBhc3NlcnQgLy8gQUxHTyBub3QgYWNjZXB0ZWQgZm9yIHRoaXMgbGlzdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6MTQ2CiAgICAvLyBhc3NlcnQocGF5bWVudC5hbW91bnQgPT09IGxpc3RpbmcuYXNrUHJpY2VBbGdvLm5hdGl2ZSwgJ0luY29ycmVjdCBwYXltZW50IGFtb3VudCcpCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIEFtb3VudAogICAgZHVwCiAgICB1bmNvdmVyIDIKICAgID09CiAgICBhc3NlcnQgLy8gSW5jb3JyZWN0IHBheW1lbnQgYW1vdW50CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czoxNDcKICAgIC8vIGFzc2VydChwYXltZW50LnJlY2VpdmVyID09PSBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcywgJ1BheW1lbnQgdG8gd3JvbmcgYWRkcmVzcycpCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIFJlY2VpdmVyCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgPT0KICAgIGFzc2VydCAvLyBQYXltZW50IHRvIHdyb25nIGFkZHJlc3MKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdG9taWNfbWFya2V0cGxhY2VfdjMvQXRvbWljTWFya2V0cGxhY2VWMy5hbGdvLnRzOjE0OAogICAgLy8gYXNzZXJ0KHBheW1lbnQuc2VuZGVyID09PSBUeG4uc2VuZGVyLCAnUGF5bWVudCBzZW5kZXIgbWlzbWF0Y2gnKQogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBTZW5kZXIKICAgIHR4biBTZW5kZXIKICAgID09CiAgICBhc3NlcnQgLy8gUGF5bWVudCBzZW5kZXIgbWlzbWF0Y2gKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdG9taWNfbWFya2V0cGxhY2VfdjMvQXRvbWljTWFya2V0cGxhY2VWMy5hbGdvLnRzOjE1MwogICAgLy8gVHhuLnNlbmRlci5ieXRlcywKICAgIHR4biBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdG9taWNfbWFya2V0cGxhY2VfdjMvQXRvbWljTWFya2V0cGxhY2VWMy5hbGdvLnRzOjE1MS0xNTYKICAgIC8vIHRoaXMuZXhlY3V0ZUF0b21pY1NldHRsZW1lbnQoCiAgICAvLyAgIGxpc3RpbmcsCiAgICAvLyAgIFR4bi5zZW5kZXIuYnl0ZXMsCiAgICAvLyAgIHBheW1lbnQuYW1vdW50LAogICAgLy8gICAxIC8vIEFMR08gY3VycmVuY3kKICAgIC8vICkKICAgIHN3YXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdG9taWNfbWFya2V0cGxhY2VfdjMvQXRvbWljTWFya2V0cGxhY2VWMy5hbGdvLnRzOjE1NQogICAgLy8gMSAvLyBBTEdPIGN1cnJlbmN5CiAgICBpbnRjXzEgLy8gMQogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6MTUxLTE1NgogICAgLy8gdGhpcy5leGVjdXRlQXRvbWljU2V0dGxlbWVudCgKICAgIC8vICAgbGlzdGluZywKICAgIC8vICAgVHhuLnNlbmRlci5ieXRlcywKICAgIC8vICAgcGF5bWVudC5hbW91bnQsCiAgICAvLyAgIDEgLy8gQUxHTyBjdXJyZW5jeQogICAgLy8gKQogICAgY2FsbHN1YiBleGVjdXRlQXRvbWljU2V0dGxlbWVudAogICAgcG9wCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czoxNTgKICAgIC8vIHJldHVybiB0cnVlCiAgICBpbnRjXzEgLy8gMQogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6OkF0b21pY01hcmtldHBsYWNlVjMucHVyY2hhc2VXaXRoVVNEQyhsaXN0aW5nSWQ6IHVpbnQ2NCwgcGF5bWVudDogdWludDY0KSAtPiB1aW50NjQ6CnB1cmNoYXNlV2l0aFVTREM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czoxNjQtMTY4CiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIC8vIHB1YmxpYyBwdXJjaGFzZVdpdGhVU0RDKAogICAgLy8gICBsaXN0aW5nSWQ6IHVpbnQ2NCwKICAgIC8vICAgcGF5bWVudDogZ3R4bi5Bc3NldFRyYW5zZmVyVHhuCiAgICAvLyApOiBib29sZWFuIHsKICAgIHByb3RvIDIgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6MTY5CiAgICAvLyBhc3NlcnQodGhpcy5saXN0aW5ncyhsaXN0aW5nSWQpLmV4aXN0cywgJ0xpc3Rpbmcgbm90IGZvdW5kJykKICAgIGZyYW1lX2RpZyAtMgogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6NTQKICAgIC8vIHB1YmxpYyBsaXN0aW5ncyA9IEJveE1hcDx1aW50NjQsIEluc3RydW1lbnRMaXN0aW5nPih7IGtleVByZWZpeDogJ2xpc3RpbmdzJyB9KQogICAgYnl0ZWNfMyAvLyAibGlzdGluZ3MiCiAgICBzd2FwCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdG9taWNfbWFya2V0cGxhY2VfdjMvQXRvbWljTWFya2V0cGxhY2VWMy5hbGdvLnRzOjE2OQogICAgLy8gYXNzZXJ0KHRoaXMubGlzdGluZ3MobGlzdGluZ0lkKS5leGlzdHMsICdMaXN0aW5nIG5vdCBmb3VuZCcpCiAgICBkdXAKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYXNzZXJ0IC8vIExpc3Rpbmcgbm90IGZvdW5kCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czoxNzAKICAgIC8vIGNvbnN0IGxpc3RpbmcgPSB0aGlzLmxpc3RpbmdzKGxpc3RpbmdJZCkudmFsdWUuY29weSgpCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6MTczCiAgICAvLyBhc3NlcnQobGlzdGluZy5pc0FjdGl2ZS5uYXRpdmUgPT09IHRydWUsICdMaXN0aW5nIGluYWN0aXZlJykKICAgIGR1cAogICAgaW50YyA0IC8vIDY0MAogICAgZ2V0Yml0CiAgICBieXRlY18wIC8vIDB4MDAKICAgIGludGNfMCAvLyAwCiAgICB1bmNvdmVyIDIKICAgIHNldGJpdAogICAgaW50Y18wIC8vIDAKICAgIGdldGJpdAogICAgaW50Y18xIC8vIDEKICAgID09CiAgICBhc3NlcnQgLy8gTGlzdGluZyBpbmFjdGl2ZQogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6MTc0CiAgICAvLyBhc3NlcnQobGlzdGluZy52YWxpZFVudGlsLm5hdGl2ZSA+IEdsb2JhbC5sYXRlc3RUaW1lc3RhbXAsICdMaXN0aW5nIGV4cGlyZWQnKQogICAgZHVwCiAgICBwdXNoaW50IDcyIC8vIDcyCiAgICBleHRyYWN0X3VpbnQ2NAogICAgZ2xvYmFsIExhdGVzdFRpbWVzdGFtcAogICAgPgogICAgYXNzZXJ0IC8vIExpc3RpbmcgZXhwaXJlZAogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6MTc1CiAgICAvLyBhc3NlcnQobGlzdGluZy5hc2tQcmljZVVTREMubmF0aXZlID4gMCwgJ1VTREMgbm90IGFjY2VwdGVkIGZvciB0aGlzIGxpc3RpbmcnKQogICAgZHVwCiAgICBwdXNoaW50IDU2IC8vIDU2CiAgICBleHRyYWN0X3VpbnQ2NAogICAgZHVwCiAgICBhc3NlcnQgLy8gVVNEQyBub3QgYWNjZXB0ZWQgZm9yIHRoaXMgbGlzdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6MTc4CiAgICAvLyBhc3NlcnQocGF5bWVudC5hc3NldEFtb3VudCA9PT0gbGlzdGluZy5hc2tQcmljZVVTREMubmF0aXZlLCAnSW5jb3JyZWN0IHBheW1lbnQgYW1vdW50JykKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgQXNzZXRBbW91bnQKICAgIGR1cAogICAgdW5jb3ZlciAyCiAgICA9PQogICAgYXNzZXJ0IC8vIEluY29ycmVjdCBwYXltZW50IGFtb3VudAogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6MTc5CiAgICAvLyBhc3NlcnQocGF5bWVudC5hc3NldFJlY2VpdmVyID09PSBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcywgJ1BheW1lbnQgdG8gd3JvbmcgYWRkcmVzcycpCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIEFzc2V0UmVjZWl2ZXIKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICA9PQogICAgYXNzZXJ0IC8vIFBheW1lbnQgdG8gd3JvbmcgYWRkcmVzcwogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6MTgwCiAgICAvLyBhc3NlcnQocGF5bWVudC5zZW5kZXIgPT09IFR4bi5zZW5kZXIsICdQYXltZW50IHNlbmRlciBtaXNtYXRjaCcpCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIFNlbmRlcgogICAgdHhuIFNlbmRlcgogICAgPT0KICAgIGFzc2VydCAvLyBQYXltZW50IHNlbmRlciBtaXNtYXRjaAogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6MTgxCiAgICAvLyBhc3NlcnQocGF5bWVudC54ZmVyQXNzZXQuaWQgPT09IHRoaXMudXNkY0Fzc2V0SWQudmFsdWUsICdNdXN0IHBheSB3aXRoIFVTREMnKQogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBYZmVyQXNzZXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdG9taWNfbWFya2V0cGxhY2VfdjMvQXRvbWljTWFya2V0cGxhY2VWMy5hbGdvLnRzOjY2CiAgICAvLyBwdWJsaWMgdXNkY0Fzc2V0SWQgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KCkKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA4IC8vICJ1c2RjQXNzZXRJZCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czoxODEKICAgIC8vIGFzc2VydChwYXltZW50LnhmZXJBc3NldC5pZCA9PT0gdGhpcy51c2RjQXNzZXRJZC52YWx1ZSwgJ011c3QgcGF5IHdpdGggVVNEQycpCiAgICA9PQogICAgYXNzZXJ0IC8vIE11c3QgcGF5IHdpdGggVVNEQwogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6MTg2CiAgICAvLyBUeG4uc2VuZGVyLmJ5dGVzLAogICAgdHhuIFNlbmRlcgogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6MTg0LTE4OQogICAgLy8gdGhpcy5leGVjdXRlQXRvbWljU2V0dGxlbWVudCgKICAgIC8vICAgbGlzdGluZywKICAgIC8vICAgVHhuLnNlbmRlci5ieXRlcywKICAgIC8vICAgcGF5bWVudC5hc3NldEFtb3VudCwKICAgIC8vICAgMiAvLyBVU0RDIGN1cnJlbmN5CiAgICAvLyApCiAgICBzd2FwCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czoxODgKICAgIC8vIDIgLy8gVVNEQyBjdXJyZW5jeQogICAgcHVzaGludCAyIC8vIDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdG9taWNfbWFya2V0cGxhY2VfdjMvQXRvbWljTWFya2V0cGxhY2VWMy5hbGdvLnRzOjE4NC0xODkKICAgIC8vIHRoaXMuZXhlY3V0ZUF0b21pY1NldHRsZW1lbnQoCiAgICAvLyAgIGxpc3RpbmcsCiAgICAvLyAgIFR4bi5zZW5kZXIuYnl0ZXMsCiAgICAvLyAgIHBheW1lbnQuYXNzZXRBbW91bnQsCiAgICAvLyAgIDIgLy8gVVNEQyBjdXJyZW5jeQogICAgLy8gKQogICAgY2FsbHN1YiBleGVjdXRlQXRvbWljU2V0dGxlbWVudAogICAgcG9wCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czoxOTEKICAgIC8vIHJldHVybiB0cnVlCiAgICBpbnRjXzEgLy8gMQogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6OkF0b21pY01hcmtldHBsYWNlVjMuZXhlY3V0ZUF0b21pY1NldHRsZW1lbnQobGlzdGluZzogYnl0ZXMsIGJ1eWVyOiBieXRlcywgdG90YWxBbW91bnQ6IHVpbnQ2NCwgY3VycmVuY3k6IHVpbnQ2NCkgLT4gYnl0ZXM6CmV4ZWN1dGVBdG9taWNTZXR0bGVtZW50OgogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6MTk3LTIwMgogICAgLy8gcHJpdmF0ZSBleGVjdXRlQXRvbWljU2V0dGxlbWVudCgKICAgIC8vICAgbGlzdGluZzogSW5zdHJ1bWVudExpc3RpbmcsCiAgICAvLyAgIGJ1eWVyOiBieXRlcywKICAgIC8vICAgdG90YWxBbW91bnQ6IHVpbnQ2NCwKICAgIC8vICAgY3VycmVuY3k6IHVpbnQ2NAogICAgLy8gKSB7CiAgICBwcm90byA0IDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdG9taWNfbWFya2V0cGxhY2VfdjMvQXRvbWljTWFya2V0cGxhY2VWMy5hbGdvLnRzOjIwNAogICAgLy8gY29uc3QgbWFya2V0cGxhY2VGZWU6IHVpbnQ2NCA9IHRvdGFsQW1vdW50IC8gMTAwIC8vIDElIGZlZQogICAgZnJhbWVfZGlnIC0yCiAgICBpbnRjXzMgLy8gMTAwCiAgICAvCiAgICBkdXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdG9taWNfbWFya2V0cGxhY2VfdjMvQXRvbWljTWFya2V0cGxhY2VWMy5hbGdvLnRzOjIwNQogICAgLy8gY29uc3Qgc2VsbGVyQW1vdW50OiB1aW50NjQgPSB0b3RhbEFtb3VudCAtIG1hcmtldHBsYWNlRmVlCiAgICBmcmFtZV9kaWcgLTIKICAgIHN3YXAKICAgIC0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdG9taWNfbWFya2V0cGxhY2VfdjMvQXRvbWljTWFya2V0cGxhY2VWMy5hbGdvLnRzOjIwNwogICAgLy8gaWYgKGN1cnJlbmN5ID09PSAxKSB7IC8vIEFMR08KICAgIGZyYW1lX2RpZyAtMQogICAgaW50Y18xIC8vIDEKICAgID09CiAgICBieiBleGVjdXRlQXRvbWljU2V0dGxlbWVudF9lbHNlX2JvZHlAMwogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6MjA5LTIxNQogICAgLy8gaXR4bgogICAgLy8gICAucGF5bWVudCh7CiAgICAvLyAgICAgYW1vdW50OiBzZWxsZXJBbW91bnQsCiAgICAvLyAgICAgcmVjZWl2ZXI6IGxpc3Rpbmcuc2VsbGVyLmJ5dGVzLAogICAgLy8gICAgIGZlZTogMCwKICAgIC8vICAgfSkKICAgIC8vICAgLnN1Ym1pdCgpCiAgICBpdHhuX2JlZ2luCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czoyMTIKICAgIC8vIHJlY2VpdmVyOiBsaXN0aW5nLnNlbGxlci5ieXRlcywKICAgIGZyYW1lX2RpZyAtNAogICAgZXh0cmFjdCAxNiAzMiAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGl0eG5fZmllbGQgUmVjZWl2ZXIKICAgIGl0eG5fZmllbGQgQW1vdW50CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czoyMDktMjE0CiAgICAvLyBpdHhuCiAgICAvLyAgIC5wYXltZW50KHsKICAgIC8vICAgICBhbW91bnQ6IHNlbGxlckFtb3VudCwKICAgIC8vICAgICByZWNlaXZlcjogbGlzdGluZy5zZWxsZXIuYnl0ZXMsCiAgICAvLyAgICAgZmVlOiAwLAogICAgLy8gICB9KQogICAgaW50Y18xIC8vIDEKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdG9taWNfbWFya2V0cGxhY2VfdjMvQXRvbWljTWFya2V0cGxhY2VWMy5hbGdvLnRzOjIxMwogICAgLy8gZmVlOiAwLAogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czoyMDktMjE1CiAgICAvLyBpdHhuCiAgICAvLyAgIC5wYXltZW50KHsKICAgIC8vICAgICBhbW91bnQ6IHNlbGxlckFtb3VudCwKICAgIC8vICAgICByZWNlaXZlcjogbGlzdGluZy5zZWxsZXIuYnl0ZXMsCiAgICAvLyAgICAgZmVlOiAwLAogICAgLy8gICB9KQogICAgLy8gICAuc3VibWl0KCkKICAgIGl0eG5fc3VibWl0CgpleGVjdXRlQXRvbWljU2V0dGxlbWVudF9hZnRlcl9pZl9lbHNlQDU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czoyMjktMjM2CiAgICAvLyBpdHhuCiAgICAvLyAgIC5hc3NldFRyYW5zZmVyKHsKICAgIC8vICAgICB4ZmVyQXNzZXQ6IEFzc2V0KGxpc3RpbmcuaW5zdHJ1bWVudElkLm5hdGl2ZSksCiAgICAvLyAgICAgYXNzZXRSZWNlaXZlcjogYnV5ZXIsCiAgICAvLyAgICAgYXNzZXRBbW91bnQ6IDEsCiAgICAvLyAgICAgZmVlOiAwLAogICAgLy8gICB9KQogICAgLy8gICAuc3VibWl0KCkKICAgIGl0eG5fYmVnaW4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdG9taWNfbWFya2V0cGxhY2VfdjMvQXRvbWljTWFya2V0cGxhY2VWMy5hbGdvLnRzOjIzMQogICAgLy8geGZlckFzc2V0OiBBc3NldChsaXN0aW5nLmluc3RydW1lbnRJZC5uYXRpdmUpLAogICAgZnJhbWVfZGlnIC00CiAgICBleHRyYWN0IDggOCAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGZyYW1lX2RpZyAtNAogICAgcHVzaGludCA4IC8vIDgKICAgIGV4dHJhY3RfdWludDY0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czoyMzMKICAgIC8vIGFzc2V0QW1vdW50OiAxLAogICAgaW50Y18xIC8vIDEKICAgIGl0eG5fZmllbGQgQXNzZXRBbW91bnQKICAgIGZyYW1lX2RpZyAtMwogICAgaXR4bl9maWVsZCBBc3NldFJlY2VpdmVyCiAgICBpdHhuX2ZpZWxkIFhmZXJBc3NldAogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6MjI5LTIzNQogICAgLy8gaXR4bgogICAgLy8gICAuYXNzZXRUcmFuc2Zlcih7CiAgICAvLyAgICAgeGZlckFzc2V0OiBBc3NldChsaXN0aW5nLmluc3RydW1lbnRJZC5uYXRpdmUpLAogICAgLy8gICAgIGFzc2V0UmVjZWl2ZXI6IGJ1eWVyLAogICAgLy8gICAgIGFzc2V0QW1vdW50OiAxLAogICAgLy8gICAgIGZlZTogMCwKICAgIC8vICAgfSkKICAgIGludGNfMiAvLyA0CiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czoyMzQKICAgIC8vIGZlZTogMCwKICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6MjI5LTIzNgogICAgLy8gaXR4bgogICAgLy8gICAuYXNzZXRUcmFuc2Zlcih7CiAgICAvLyAgICAgeGZlckFzc2V0OiBBc3NldChsaXN0aW5nLmluc3RydW1lbnRJZC5uYXRpdmUpLAogICAgLy8gICAgIGFzc2V0UmVjZWl2ZXI6IGJ1eWVyLAogICAgLy8gICAgIGFzc2V0QW1vdW50OiAxLAogICAgLy8gICAgIGZlZTogMCwKICAgIC8vICAgfSkKICAgIC8vICAgLnN1Ym1pdCgpCiAgICBpdHhuX3N1Ym1pdAogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6NjIKICAgIC8vIHB1YmxpYyBuZXh0U2FsZUlkID0gR2xvYmFsU3RhdGU8dWludDY0PigpCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNCAvLyAibmV4dFNhbGVJZCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czoyNjUKICAgIC8vIHNhbGVJZDogbmV3IGFyYzQuVWludE42NChzYWxlSWQpLAogICAgZHVwCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czoyNjcKICAgIC8vIHNlbGxlcjogbGlzdGluZy5zZWxsZXIsCiAgICBmcmFtZV9kaWcgLTQKICAgIGV4dHJhY3QgMTYgMzIgLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czoyNjkKICAgIC8vIHNhbGVQcmljZTogbmV3IGFyYzQuVWludE42NChzYWxlUHJpY2UpLAogICAgZnJhbWVfZGlnIC0yCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czoyNzAKICAgIC8vIGN1cnJlbmN5OiBuZXcgYXJjNC5VaW50TjY0KGN1cnJlbmN5KSwKICAgIGZyYW1lX2RpZyAtMQogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6MjcxCiAgICAvLyBzYWxlVGltZTogbmV3IGFyYzQuVWludE42NChHbG9iYWwubGF0ZXN0VGltZXN0YW1wKQogICAgZ2xvYmFsIExhdGVzdFRpbWVzdGFtcAogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6MjY0LTI3MgogICAgLy8gY29uc3Qgc2FsZSA9IG5ldyBJbnN0cnVtZW50U2FsZSh7CiAgICAvLyAgIHNhbGVJZDogbmV3IGFyYzQuVWludE42NChzYWxlSWQpLAogICAgLy8gICBpbnN0cnVtZW50SWQ6IGxpc3RpbmcuaW5zdHJ1bWVudElkLAogICAgLy8gICBzZWxsZXI6IGxpc3Rpbmcuc2VsbGVyLAogICAgLy8gICBidXllcjogbmV3IGFyYzQuQWRkcmVzcyhidXllciksCiAgICAvLyAgIHNhbGVQcmljZTogbmV3IGFyYzQuVWludE42NChzYWxlUHJpY2UpLAogICAgLy8gICBjdXJyZW5jeTogbmV3IGFyYzQuVWludE42NChjdXJyZW5jeSksCiAgICAvLyAgIHNhbGVUaW1lOiBuZXcgYXJjNC5VaW50TjY0KEdsb2JhbC5sYXRlc3RUaW1lc3RhbXApCiAgICAvLyB9KQogICAgZGlnIDQKICAgIGRpZyA3CiAgICBjb25jYXQKICAgIGRpZyA0CiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtMwogICAgY29uY2F0CiAgICB1bmNvdmVyIDMKICAgIGNvbmNhdAogICAgdW5jb3ZlciAyCiAgICBjb25jYXQKICAgIHN3YXAKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6NTUKICAgIC8vIHB1YmxpYyBzYWxlcyA9IEJveE1hcDx1aW50NjQsIEluc3RydW1lbnRTYWxlPih7IGtleVByZWZpeDogJ3NhbGVzJyB9KQogICAgYnl0ZWMgMTAgLy8gInNhbGVzIgogICAgdW5jb3ZlciAzCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdG9taWNfbWFya2V0cGxhY2VfdjMvQXRvbWljTWFya2V0cGxhY2VWMy5hbGdvLnRzOjI3NQogICAgLy8gdGhpcy5zYWxlcyhzYWxlSWQpLnZhbHVlID0gc2FsZS5jb3B5KCkKICAgIHN3YXAKICAgIGJveF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdG9taWNfbWFya2V0cGxhY2VfdjMvQXRvbWljTWFya2V0cGxhY2VWMy5hbGdvLnRzOjI3NgogICAgLy8gdGhpcy5uZXh0U2FsZUlkLnZhbHVlID0gc2FsZUlkICsgMQogICAgc3dhcAogICAgaW50Y18xIC8vIDEKICAgICsKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdG9taWNfbWFya2V0cGxhY2VfdjMvQXRvbWljTWFya2V0cGxhY2VWMy5hbGdvLnRzOjYyCiAgICAvLyBwdWJsaWMgbmV4dFNhbGVJZCA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oKQogICAgYnl0ZWMgNCAvLyAibmV4dFNhbGVJZCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdG9taWNfbWFya2V0cGxhY2VfdjMvQXRvbWljTWFya2V0cGxhY2VWMy5hbGdvLnRzOjI3NgogICAgLy8gdGhpcy5uZXh0U2FsZUlkLnZhbHVlID0gc2FsZUlkICsgMQogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdG9taWNfbWFya2V0cGxhY2VfdjMvQXRvbWljTWFya2V0cGxhY2VWMy5hbGdvLnRzOjI0Mi0yNDUKICAgIC8vIHRoaXMubGlzdGluZ3MobGlzdGluZy5saXN0aW5nSWQubmF0aXZlKS52YWx1ZSA9IG5ldyBJbnN0cnVtZW50TGlzdGluZyh7CiAgICAvLyAgIC4uLmxpc3RpbmcsCiAgICAvLyAgIGlzQWN0aXZlOiBuZXcgYXJjNC5Cb29sKGZhbHNlKQogICAgLy8gfSkKICAgIGZyYW1lX2RpZyAtNAogICAgZXh0cmFjdCAwIDggLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBmcmFtZV9kaWcgLTQKICAgIGV4dHJhY3QgNDggOCAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGZyYW1lX2RpZyAtNAogICAgZXh0cmFjdCA1NiA4IC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgZnJhbWVfZGlnIC00CiAgICBleHRyYWN0IDY0IDggLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBmcmFtZV9kaWcgLTQKICAgIGV4dHJhY3QgNzIgOCAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGZyYW1lX2RpZyAtNAogICAgZXh0cmFjdCA4MSA4IC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgdW5jb3ZlciA1CiAgICB1bmNvdmVyIDcKICAgIGNvbmNhdAogICAgdW5jb3ZlciA2CiAgICBjb25jYXQKICAgIHVuY292ZXIgNQogICAgY29uY2F0CiAgICB1bmNvdmVyIDQKICAgIGNvbmNhdAogICAgdW5jb3ZlciAzCiAgICBjb25jYXQKICAgIHVuY292ZXIgMgogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czoyNDQKICAgIC8vIGlzQWN0aXZlOiBuZXcgYXJjNC5Cb29sKGZhbHNlKQogICAgYnl0ZWNfMCAvLyAweDAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czoyNDItMjQ1CiAgICAvLyB0aGlzLmxpc3RpbmdzKGxpc3RpbmcubGlzdGluZ0lkLm5hdGl2ZSkudmFsdWUgPSBuZXcgSW5zdHJ1bWVudExpc3RpbmcoewogICAgLy8gICAuLi5saXN0aW5nLAogICAgLy8gICBpc0FjdGl2ZTogbmV3IGFyYzQuQm9vbChmYWxzZSkKICAgIC8vIH0pCiAgICBjb25jYXQKICAgIHN3YXAKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6MjQyCiAgICAvLyB0aGlzLmxpc3RpbmdzKGxpc3RpbmcubGlzdGluZ0lkLm5hdGl2ZSkudmFsdWUgPSBuZXcgSW5zdHJ1bWVudExpc3RpbmcoewogICAgZnJhbWVfZGlnIC00CiAgICBpbnRjXzAgLy8gMAogICAgZXh0cmFjdF91aW50NjQKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdG9taWNfbWFya2V0cGxhY2VfdjMvQXRvbWljTWFya2V0cGxhY2VWMy5hbGdvLnRzOjU0CiAgICAvLyBwdWJsaWMgbGlzdGluZ3MgPSBCb3hNYXA8dWludDY0LCBJbnN0cnVtZW50TGlzdGluZz4oeyBrZXlQcmVmaXg6ICdsaXN0aW5ncycgfSkKICAgIGJ5dGVjXzMgLy8gImxpc3RpbmdzIgogICAgZGlnIDEKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6MjQyLTI0NQogICAgLy8gdGhpcy5saXN0aW5ncyhsaXN0aW5nLmxpc3RpbmdJZC5uYXRpdmUpLnZhbHVlID0gbmV3IEluc3RydW1lbnRMaXN0aW5nKHsKICAgIC8vICAgLi4ubGlzdGluZywKICAgIC8vICAgaXNBY3RpdmU6IG5ldyBhcmM0LkJvb2woZmFsc2UpCiAgICAvLyB9KQogICAgdW5jb3ZlciAyCiAgICBib3hfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czo1NgogICAgLy8gcHVibGljIGFjdGl2ZUxpc3RpbmdzID0gQm94TWFwPHVpbnQ2NCwgYXJjNC5Cb29sPih7IGtleVByZWZpeDogJ2FjdGl2ZScgfSkKICAgIGJ5dGVjIDkgLy8gImFjdGl2ZSIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6MjQ2CiAgICAvLyB0aGlzLmFjdGl2ZUxpc3RpbmdzKGxpc3RpbmcubGlzdGluZ0lkLm5hdGl2ZSkudmFsdWUgPSBuZXcgYXJjNC5Cb29sKGZhbHNlKQogICAgYnl0ZWNfMCAvLyAweDAwCiAgICBib3hfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czo2MwogICAgLy8gcHVibGljIHRvdGFsVm9sdW1lID0gR2xvYmFsU3RhdGU8dWludDY0PigpCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNSAvLyAidG90YWxWb2x1bWUiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6MjQ5CiAgICAvLyB0aGlzLnRvdGFsVm9sdW1lLnZhbHVlID0gdGhpcy50b3RhbFZvbHVtZS52YWx1ZSArIHRvdGFsQW1vdW50CiAgICBmcmFtZV9kaWcgLTIKICAgICsKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdG9taWNfbWFya2V0cGxhY2VfdjMvQXRvbWljTWFya2V0cGxhY2VWMy5hbGdvLnRzOjYzCiAgICAvLyBwdWJsaWMgdG90YWxWb2x1bWUgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KCkKICAgIGJ5dGVjIDUgLy8gInRvdGFsVm9sdW1lIgogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6MjQ5CiAgICAvLyB0aGlzLnRvdGFsVm9sdW1lLnZhbHVlID0gdGhpcy50b3RhbFZvbHVtZS52YWx1ZSArIHRvdGFsQW1vdW50CiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6NjQKICAgIC8vIHB1YmxpYyB0b3RhbEZlZXMgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KCkKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA2IC8vICJ0b3RhbEZlZXMiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6MjUwCiAgICAvLyB0aGlzLnRvdGFsRmVlcy52YWx1ZSA9IHRoaXMudG90YWxGZWVzLnZhbHVlICsgbWFya2V0cGxhY2VGZWUKICAgIGZyYW1lX2RpZyAwCiAgICArCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czo2NAogICAgLy8gcHVibGljIHRvdGFsRmVlcyA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oKQogICAgYnl0ZWMgNiAvLyAidG90YWxGZWVzIgogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6MjUwCiAgICAvLyB0aGlzLnRvdGFsRmVlcy52YWx1ZSA9IHRoaXMudG90YWxGZWVzLnZhbHVlICsgbWFya2V0cGxhY2VGZWUKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICBmcmFtZV9kaWcgLTQKICAgIHN3YXAKICAgIHJldHN1YgoKZXhlY3V0ZUF0b21pY1NldHRsZW1lbnRfZWxzZV9ib2R5QDM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czoyMTgtMjI1CiAgICAvLyBpdHhuCiAgICAvLyAgIC5hc3NldFRyYW5zZmVyKHsKICAgIC8vICAgICB4ZmVyQXNzZXQ6IEFzc2V0KHRoaXMudXNkY0Fzc2V0SWQudmFsdWUpLAogICAgLy8gICAgIGFzc2V0UmVjZWl2ZXI6IGxpc3Rpbmcuc2VsbGVyLmJ5dGVzLAogICAgLy8gICAgIGFzc2V0QW1vdW50OiBzZWxsZXJBbW91bnQsCiAgICAvLyAgICAgZmVlOiAwLAogICAgLy8gICB9KQogICAgLy8gICAuc3VibWl0KCkKICAgIGl0eG5fYmVnaW4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdG9taWNfbWFya2V0cGxhY2VfdjMvQXRvbWljTWFya2V0cGxhY2VWMy5hbGdvLnRzOjY2CiAgICAvLyBwdWJsaWMgdXNkY0Fzc2V0SWQgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KCkKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA4IC8vICJ1c2RjQXNzZXRJZCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czoyMjEKICAgIC8vIGFzc2V0UmVjZWl2ZXI6IGxpc3Rpbmcuc2VsbGVyLmJ5dGVzLAogICAgZnJhbWVfZGlnIC00CiAgICBleHRyYWN0IDE2IDMyIC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgdW5jb3ZlciAyCiAgICBpdHhuX2ZpZWxkIEFzc2V0QW1vdW50CiAgICBpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKICAgIGl0eG5fZmllbGQgWGZlckFzc2V0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czoyMTgtMjI0CiAgICAvLyBpdHhuCiAgICAvLyAgIC5hc3NldFRyYW5zZmVyKHsKICAgIC8vICAgICB4ZmVyQXNzZXQ6IEFzc2V0KHRoaXMudXNkY0Fzc2V0SWQudmFsdWUpLAogICAgLy8gICAgIGFzc2V0UmVjZWl2ZXI6IGxpc3Rpbmcuc2VsbGVyLmJ5dGVzLAogICAgLy8gICAgIGFzc2V0QW1vdW50OiBzZWxsZXJBbW91bnQsCiAgICAvLyAgICAgZmVlOiAwLAogICAgLy8gICB9KQogICAgaW50Y18yIC8vIDQKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdG9taWNfbWFya2V0cGxhY2VfdjMvQXRvbWljTWFya2V0cGxhY2VWMy5hbGdvLnRzOjIyMwogICAgLy8gZmVlOiAwLAogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czoyMTgtMjI1CiAgICAvLyBpdHhuCiAgICAvLyAgIC5hc3NldFRyYW5zZmVyKHsKICAgIC8vICAgICB4ZmVyQXNzZXQ6IEFzc2V0KHRoaXMudXNkY0Fzc2V0SWQudmFsdWUpLAogICAgLy8gICAgIGFzc2V0UmVjZWl2ZXI6IGxpc3Rpbmcuc2VsbGVyLmJ5dGVzLAogICAgLy8gICAgIGFzc2V0QW1vdW50OiBzZWxsZXJBbW91bnQsCiAgICAvLyAgICAgZmVlOiAwLAogICAgLy8gICB9KQogICAgLy8gICAuc3VibWl0KCkKICAgIGl0eG5fc3VibWl0CiAgICBiIGV4ZWN1dGVBdG9taWNTZXR0bGVtZW50X2FmdGVyX2lmX2Vsc2VANQoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9hdG9taWNfbWFya2V0cGxhY2VfdjMvQXRvbWljTWFya2V0cGxhY2VWMy5hbGdvLnRzOjpBdG9taWNNYXJrZXRwbGFjZVYzLmNhbmNlbExpc3RpbmcobGlzdGluZ0lkOiB1aW50NjQpIC0+IHVpbnQ2NDoKY2FuY2VsTGlzdGluZzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdG9taWNfbWFya2V0cGxhY2VfdjMvQXRvbWljTWFya2V0cGxhY2VWMy5hbGdvLnRzOjI4Mi0yODMKICAgIC8vIEBhYmltZXRob2QoKQogICAgLy8gcHVibGljIGNhbmNlbExpc3RpbmcobGlzdGluZ0lkOiB1aW50NjQpOiBib29sZWFuIHsKICAgIHByb3RvIDEgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6Mjg0CiAgICAvLyBhc3NlcnQodGhpcy5saXN0aW5ncyhsaXN0aW5nSWQpLmV4aXN0cywgJ0xpc3Rpbmcgbm90IGZvdW5kJykKICAgIGZyYW1lX2RpZyAtMQogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6NTQKICAgIC8vIHB1YmxpYyBsaXN0aW5ncyA9IEJveE1hcDx1aW50NjQsIEluc3RydW1lbnRMaXN0aW5nPih7IGtleVByZWZpeDogJ2xpc3RpbmdzJyB9KQogICAgYnl0ZWNfMyAvLyAibGlzdGluZ3MiCiAgICBkaWcgMQogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czoyODQKICAgIC8vIGFzc2VydCh0aGlzLmxpc3RpbmdzKGxpc3RpbmdJZCkuZXhpc3RzLCAnTGlzdGluZyBub3QgZm91bmQnKQogICAgZHVwCiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGFzc2VydCAvLyBMaXN0aW5nIG5vdCBmb3VuZAogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6Mjg1CiAgICAvLyBjb25zdCBsaXN0aW5nID0gdGhpcy5saXN0aW5ncyhsaXN0aW5nSWQpLnZhbHVlLmNvcHkoKQogICAgZHVwCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6Mjg4CiAgICAvLyBhc3NlcnQobGlzdGluZy5zZWxsZXIuYnl0ZXMgPT09IFR4bi5zZW5kZXIuYnl0ZXMsICdPbmx5IHNlbGxlciBjYW4gY2FuY2VsJykKICAgIGR1cAogICAgZXh0cmFjdCAxNiAzMiAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGR1cAogICAgdHhuIFNlbmRlcgogICAgPT0KICAgIGFzc2VydCAvLyBPbmx5IHNlbGxlciBjYW4gY2FuY2VsCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czoyODkKICAgIC8vIGFzc2VydChsaXN0aW5nLmlzQWN0aXZlLm5hdGl2ZSA9PT0gdHJ1ZSwgJ0xpc3RpbmcgYWxyZWFkeSBpbmFjdGl2ZScpCiAgICBkaWcgMQogICAgaW50YyA0IC8vIDY0MAogICAgZ2V0Yml0CiAgICBieXRlY18wIC8vIDB4MDAKICAgIGludGNfMCAvLyAwCiAgICB1bmNvdmVyIDIKICAgIHNldGJpdAogICAgaW50Y18wIC8vIDAKICAgIGdldGJpdAogICAgaW50Y18xIC8vIDEKICAgID09CiAgICBhc3NlcnQgLy8gTGlzdGluZyBhbHJlYWR5IGluYWN0aXZlCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czoyOTItMjk1CiAgICAvLyB0aGlzLmxpc3RpbmdzKGxpc3RpbmdJZCkudmFsdWUgPSBuZXcgSW5zdHJ1bWVudExpc3RpbmcoewogICAgLy8gICAuLi5saXN0aW5nLAogICAgLy8gICBpc0FjdGl2ZTogbmV3IGFyYzQuQm9vbChmYWxzZSkKICAgIC8vIH0pCiAgICBkaWcgMQogICAgZXh0cmFjdCAwIDggLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBkaWcgMgogICAgZXh0cmFjdCA4IDggLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBkaWcgMwogICAgZXh0cmFjdCA0OCA4IC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgZGlnIDQKICAgIGV4dHJhY3QgNTYgOCAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGRpZyA1CiAgICBleHRyYWN0IDY0IDggLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBkaWcgNgogICAgZXh0cmFjdCA3MiA4IC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgdW5jb3ZlciA3CiAgICBleHRyYWN0IDgxIDggLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICB1bmNvdmVyIDYKICAgIHVuY292ZXIgNgogICAgY29uY2F0CiAgICB1bmNvdmVyIDYKICAgIGNvbmNhdAogICAgdW5jb3ZlciA1CiAgICBjb25jYXQKICAgIHVuY292ZXIgNAogICAgY29uY2F0CiAgICB1bmNvdmVyIDMKICAgIGNvbmNhdAogICAgdW5jb3ZlciAyCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdG9taWNfbWFya2V0cGxhY2VfdjMvQXRvbWljTWFya2V0cGxhY2VWMy5hbGdvLnRzOjI5NAogICAgLy8gaXNBY3RpdmU6IG5ldyBhcmM0LkJvb2woZmFsc2UpCiAgICBieXRlY18wIC8vIDB4MDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdG9taWNfbWFya2V0cGxhY2VfdjMvQXRvbWljTWFya2V0cGxhY2VWMy5hbGdvLnRzOjI5Mi0yOTUKICAgIC8vIHRoaXMubGlzdGluZ3MobGlzdGluZ0lkKS52YWx1ZSA9IG5ldyBJbnN0cnVtZW50TGlzdGluZyh7CiAgICAvLyAgIC4uLmxpc3RpbmcsCiAgICAvLyAgIGlzQWN0aXZlOiBuZXcgYXJjNC5Cb29sKGZhbHNlKQogICAgLy8gfSkKICAgIGNvbmNhdAogICAgc3dhcAogICAgY29uY2F0CiAgICBib3hfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czo1NgogICAgLy8gcHVibGljIGFjdGl2ZUxpc3RpbmdzID0gQm94TWFwPHVpbnQ2NCwgYXJjNC5Cb29sPih7IGtleVByZWZpeDogJ2FjdGl2ZScgfSkKICAgIGJ5dGVjIDkgLy8gImFjdGl2ZSIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6Mjk2CiAgICAvLyB0aGlzLmFjdGl2ZUxpc3RpbmdzKGxpc3RpbmdJZCkudmFsdWUgPSBuZXcgYXJjNC5Cb29sKGZhbHNlKQogICAgYnl0ZWNfMCAvLyAweDAwCiAgICBib3hfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czoyOTgKICAgIC8vIHJldHVybiB0cnVlCiAgICBpbnRjXzEgLy8gMQogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6OkF0b21pY01hcmtldHBsYWNlVjMuZ2V0TGlzdGluZyhsaXN0aW5nSWQ6IHVpbnQ2NCkgLT4gYnl0ZXM6CmdldExpc3Rpbmc6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czozMDQtMzA1CiAgICAvLyBAYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIC8vIHB1YmxpYyBnZXRMaXN0aW5nKGxpc3RpbmdJZDogdWludDY0KTogSW5zdHJ1bWVudExpc3RpbmcgewogICAgcHJvdG8gMSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czozMDYKICAgIC8vIGFzc2VydCh0aGlzLmxpc3RpbmdzKGxpc3RpbmdJZCkuZXhpc3RzLCAnTGlzdGluZyBub3QgZm91bmQnKQogICAgZnJhbWVfZGlnIC0xCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czo1NAogICAgLy8gcHVibGljIGxpc3RpbmdzID0gQm94TWFwPHVpbnQ2NCwgSW5zdHJ1bWVudExpc3Rpbmc+KHsga2V5UHJlZml4OiAnbGlzdGluZ3MnIH0pCiAgICBieXRlY18zIC8vICJsaXN0aW5ncyIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6MzA2CiAgICAvLyBhc3NlcnQodGhpcy5saXN0aW5ncyhsaXN0aW5nSWQpLmV4aXN0cywgJ0xpc3Rpbmcgbm90IGZvdW5kJykKICAgIGR1cAogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBhc3NlcnQgLy8gTGlzdGluZyBub3QgZm91bmQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdG9taWNfbWFya2V0cGxhY2VfdjMvQXRvbWljTWFya2V0cGxhY2VWMy5hbGdvLnRzOjMwNwogICAgLy8gcmV0dXJuIHRoaXMubGlzdGluZ3MobGlzdGluZ0lkKS52YWx1ZQogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIEJveCBtdXN0IGhhdmUgdmFsdWUKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9hdG9taWNfbWFya2V0cGxhY2VfdjMvQXRvbWljTWFya2V0cGxhY2VWMy5hbGdvLnRzOjpBdG9taWNNYXJrZXRwbGFjZVYzLmdldFNhbGUoc2FsZUlkOiB1aW50NjQpIC0+IGJ5dGVzOgpnZXRTYWxlOgogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6MzEzLTMxNAogICAgLy8gQGFiaW1ldGhvZCh7IHJlYWRvbmx5OiB0cnVlIH0pCiAgICAvLyBwdWJsaWMgZ2V0U2FsZShzYWxlSWQ6IHVpbnQ2NCk6IEluc3RydW1lbnRTYWxlIHsKICAgIHByb3RvIDEgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6MzE1CiAgICAvLyBhc3NlcnQodGhpcy5zYWxlcyhzYWxlSWQpLmV4aXN0cywgJ1NhbGUgbm90IGZvdW5kJykKICAgIGZyYW1lX2RpZyAtMQogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6NTUKICAgIC8vIHB1YmxpYyBzYWxlcyA9IEJveE1hcDx1aW50NjQsIEluc3RydW1lbnRTYWxlPih7IGtleVByZWZpeDogJ3NhbGVzJyB9KQogICAgYnl0ZWMgMTAgLy8gInNhbGVzIgogICAgc3dhcAogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czozMTUKICAgIC8vIGFzc2VydCh0aGlzLnNhbGVzKHNhbGVJZCkuZXhpc3RzLCAnU2FsZSBub3QgZm91bmQnKQogICAgZHVwCiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGFzc2VydCAvLyBTYWxlIG5vdCBmb3VuZAogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6MzE2CiAgICAvLyByZXR1cm4gdGhpcy5zYWxlcyhzYWxlSWQpLnZhbHVlCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6OkF0b21pY01hcmtldHBsYWNlVjMuZ2V0TWFya2V0cGxhY2VTdGF0cygpIC0+IGJ5dGVzLCBieXRlcywgYnl0ZXMsIGJ5dGVzOgpnZXRNYXJrZXRwbGFjZVN0YXRzOgogICAgLy8gc21hcnRfY29udHJhY3RzL2F0b21pY19tYXJrZXRwbGFjZV92My9BdG9taWNNYXJrZXRwbGFjZVYzLmFsZ28udHM6NjMKICAgIC8vIHB1YmxpYyB0b3RhbFZvbHVtZSA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oKQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDUgLy8gInRvdGFsVm9sdW1lIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdG9taWNfbWFya2V0cGxhY2VfdjMvQXRvbWljTWFya2V0cGxhY2VWMy5hbGdvLnRzOjMyNQogICAgLy8gbmV3IGFyYzQuVWludE42NCh0aGlzLnRvdGFsVm9sdW1lLnZhbHVlKSwKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdG9taWNfbWFya2V0cGxhY2VfdjMvQXRvbWljTWFya2V0cGxhY2VWMy5hbGdvLnRzOjY0CiAgICAvLyBwdWJsaWMgdG90YWxGZWVzID0gR2xvYmFsU3RhdGU8dWludDY0PigpCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNiAvLyAidG90YWxGZWVzIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdG9taWNfbWFya2V0cGxhY2VfdjMvQXRvbWljTWFya2V0cGxhY2VWMy5hbGdvLnRzOjMyNgogICAgLy8gbmV3IGFyYzQuVWludE42NCh0aGlzLnRvdGFsRmVlcy52YWx1ZSksCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czo2MQogICAgLy8gcHVibGljIG5leHRMaXN0aW5nSWQgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KCkKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18yIC8vICJuZXh0TGlzdGluZ0lkIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdG9taWNfbWFya2V0cGxhY2VfdjMvQXRvbWljTWFya2V0cGxhY2VWMy5hbGdvLnRzOjMyNwogICAgLy8gbmV3IGFyYzQuVWludE42NCh0aGlzLm5leHRMaXN0aW5nSWQudmFsdWUgLSAxKSwKICAgIGludGNfMSAvLyAxCiAgICAtCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXRvbWljX21hcmtldHBsYWNlX3YzL0F0b21pY01hcmtldHBsYWNlVjMuYWxnby50czo2MgogICAgLy8gcHVibGljIG5leHRTYWxlSWQgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KCkKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA0IC8vICJuZXh0U2FsZUlkIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdG9taWNfbWFya2V0cGxhY2VfdjMvQXRvbWljTWFya2V0cGxhY2VWMy5hbGdvLnRzOjMyOAogICAgLy8gbmV3IGFyYzQuVWludE42NCh0aGlzLm5leHRTYWxlSWQudmFsdWUgLSAxKQogICAgaW50Y18xIC8vIDEKICAgIC0KICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdG9taWNfbWFya2V0cGxhY2VfdjMvQXRvbWljTWFya2V0cGxhY2VWMy5hbGdvLnRzOjMyNC0zMjkKICAgIC8vIHJldHVybiBbCiAgICAvLyAgIG5ldyBhcmM0LlVpbnRONjQodGhpcy50b3RhbFZvbHVtZS52YWx1ZSksCiAgICAvLyAgIG5ldyBhcmM0LlVpbnRONjQodGhpcy50b3RhbEZlZXMudmFsdWUpLAogICAgLy8gICBuZXcgYXJjNC5VaW50TjY0KHRoaXMubmV4dExpc3RpbmdJZC52YWx1ZSAtIDEpLAogICAgLy8gICBuZXcgYXJjNC5VaW50TjY0KHRoaXMubmV4dFNhbGVJZC52YWx1ZSAtIDEpCiAgICAvLyBdCiAgICByZXRzdWIK",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAFAAEEZIAFJgsBAAQVH3x1DW5leHRMaXN0aW5nSWQIbGlzdGluZ3MKbmV4dFNhbGVJZAt0b3RhbFZvbHVtZQl0b3RhbEZlZXMSbWFya2V0cGxhY2VGZWVSYXRlC3VzZGNBc3NldElkBmFjdGl2ZQVzYWxlczEbQQEcgggE6nFnwgSZSXPDBF5H7NME91SaUgSq/xDhBE505NMEHDlNaAQM0YQuNhoAjggAxACjAIAAXQBEADAAHAACIkMxGRREMRhEiAOsTwNPA1BPAlBMUClMULAjQzEZFEQxGEQ2GgEXiAN8KUxQsCNDMRkURDEYRDYaAReIA1cpTFCwI0MxGRREMRhENhoBF4gC1SgiTwJUKUxQsCNDMRkURDEYRDYaARcxFiMJSTgQJBJEiAFhKCJPAlQpTFCwI0MxGRREMRhENhoBFzEWIwlJOBAjEkSIAO8oIk8CVClMULAjQzEZFEQxGEQ2GgEXNhoCFzYaAxc2GgQXiABOFilMULAjQzEZFEQxGEQ2GgEXiAAWKCJPAlQpTFCwI0MxGUD/HjEYFEQjQ4oBATEAMgkSRCojZycEI2cnBSJnJwYiZycHJWcnCIv/ZyOJigQBIiplREAAEyojZycEI2cnBSJnJwYiZycHJWeL/UAABYv+QQBRI0QiKmVESRaL/BYxAIv9Fov+FjIHFjIHi/8IFiInB2VEFksHTwdQTwZQTwVQTwRQTwNQTwJQgAGAUExQK0sCUEy/JwlMUIABgL9JIwgqTGeJIkL/rIoCAYv+FitMUEm9RQFEvkRJIQRTKCJPAlQiUyMSREmBSFsyBw1ESYEwW0lEi/84CElPAhJEi/84BzIKEkSL/zgAMQASRDEATCOIAF5II4mKAgGL/hYrTFBJvUUBRL5ESSEEUygiTwJUIlMjEkRJgUhbMgcNREmBOFtJRIv/OBJJTwISRIv/OBQyChJEi/84ADEAEkSL/zgRIicIZUQSRDEATIECiAADSCOJigQBi/4lCkmL/kwJi/8jEkEAxrGL/FcQILIHsggjshAisgGzsYv8VwgIi/yBCFsjshKL/bIUshEkshAisgGzIicEZURJFov8VxAgi/4Wi/8WMgcWSwRLB1BLBFCL/VBPA1BPAlBMUCcKTwNQTL9MIwgnBExni/xXAAiL/FcwCIv8VzgIi/xXQAiL/FdICIv8V1EITwVPB1BPBlBPBVBPBFBPA1BPAlAoUExQi/wiWxYrSwFQTwK/JwlMUCi/IicFZUSL/ggnBUxnIicGZUSLAAgnBkxni/xMibEiJwhlRIv8VxAgTwKyErIUshEkshAisgGzQv8uigEBi/8WK0sBUEm9RQFESb5ESVcQIEkxABJESwEhBFMoIk8CVCJTIxJESwFXAAhLAlcICEsDVzAISwRXOAhLBVdACEsGV0gITwdXUQhPBk8GUE8GUE8FUE8EUE8DUE8CUChQTFC/JwlMUCi/I4mKAQGL/xYrTFBJvUUBRL5EiYoBAYv/FicKTFBJvUUBRL5EiSInBWVEFiInBmVEFiIqZUQjCRYiJwRlRCMJFok=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}