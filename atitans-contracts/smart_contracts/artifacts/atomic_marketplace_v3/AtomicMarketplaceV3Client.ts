/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"AtomicMarketplaceV3","structs":{"InstrumentListing":[{"name":"listingId","type":"uint64"},{"name":"instrumentId","type":"uint64"},{"name":"seller","type":"address"},{"name":"askPriceAlgo","type":"uint64"},{"name":"askPriceUsdc","type":"uint64"},{"name":"listingTime","type":"uint64"},{"name":"validUntil","type":"uint64"},{"name":"isActive","type":"bool"},{"name":"marketplaceFee","type":"uint64"}],"InstrumentSale":[{"name":"saleId","type":"uint64"},{"name":"instrumentId","type":"uint64"},{"name":"seller","type":"address"},{"name":"buyer","type":"address"},{"name":"salePrice","type":"uint64"},{"name":"currency","type":"uint64"},{"name":"saleTime","type":"uint64"}]},"methods":[{"name":"initialize","args":[{"type":"uint64","name":"usdcAssetId"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Initialize marketplace","events":[],"recommendations":{}},{"name":"listInstrument","args":[{"type":"uint64","name":"instrumentId"},{"type":"uint64","name":"askPriceAlgo"},{"type":"uint64","name":"askPriceUSDC"},{"type":"uint64","name":"validityPeriod"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"List instrument for sale","events":[],"recommendations":{}},{"name":"purchaseWithAlgo","args":[{"type":"uint64","name":"listingId"},{"type":"pay","name":"payment"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Purchase instrument with ALGO payment","events":[],"recommendations":{}},{"name":"purchaseWithUSDC","args":[{"type":"uint64","name":"listingId"},{"type":"axfer","name":"payment"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Purchase instrument with USDC payment","events":[],"recommendations":{}},{"name":"cancelListing","args":[{"type":"uint64","name":"listingId"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Cancel listing","events":[],"recommendations":{}},{"name":"getListing","args":[{"type":"uint64","name":"listingId"}],"returns":{"type":"(uint64,uint64,address,uint64,uint64,uint64,uint64,bool,uint64)","struct":"InstrumentListing"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get listing details","events":[],"recommendations":{}},{"name":"getSale","args":[{"type":"uint64","name":"saleId"}],"returns":{"type":"(uint64,uint64,address,address,uint64,uint64,uint64)","struct":"InstrumentSale"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get sale details","events":[],"recommendations":{}},{"name":"getMarketplaceStats","args":[],"returns":{"type":"(uint64,uint64,uint64,uint64)"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get marketplace statistics","events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":6,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{"nextListingId":{"keyType":"AVMString","valueType":"AVMUint64","key":"bmV4dExpc3RpbmdJZA==","desc":"Global state"},"nextSaleId":{"keyType":"AVMString","valueType":"AVMUint64","key":"bmV4dFNhbGVJZA=="},"totalVolume":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxWb2x1bWU="},"totalFees":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxGZWVz"},"marketplaceFeeRate":{"keyType":"AVMString","valueType":"AVMUint64","key":"bWFya2V0cGxhY2VGZWVSYXRl"},"usdcAssetId":{"keyType":"AVMString","valueType":"AVMUint64","key":"dXNkY0Fzc2V0SWQ="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"listings":{"keyType":"uint64","valueType":"InstrumentListing","desc":"Storage maps","prefix":"bGlzdGluZ3M="},"sales":{"keyType":"uint64","valueType":"InstrumentSale","prefix":"c2FsZXM="},"activeListings":{"keyType":"uint64","valueType":"bool","prefix":"YWN0aXZl"}}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[620],"errorMessage":"ALGO not accepted for this listing"},{"pc":[592,671,1010,1118,1136],"errorMessage":"Box must have value"},{"pc":[629,708],"errorMessage":"Incorrect payment amount"},{"pc":[769,786,819,866,871,876,881,886,891,972,1012,1037,1042,1047,1052,1057,1062,1067],"errorMessage":"Index access is out of bounds"},{"pc":[1034],"errorMessage":"Listing already inactive"},{"pc":[614,693],"errorMessage":"Listing expired"},{"pc":[606,685],"errorMessage":"Listing inactive"},{"pc":[590,669,1007,1116],"errorMessage":"Listing not found"},{"pc":[735],"errorMessage":"Must pay with USDC"},{"pc":[493],"errorMessage":"Must set price in at least one currency"},{"pc":[191,217,237,257,282,317,352,385],"errorMessage":"OnCompletion is not NoOp"},{"pc":[426],"errorMessage":"Only creator can initialize"},{"pc":[1019],"errorMessage":"Only seller can cancel"},{"pc":[645,724],"errorMessage":"Payment sender mismatch"},{"pc":[637,716],"errorMessage":"Payment to wrong address"},{"pc":[1134],"errorMessage":"Sale not found"},{"pc":[699],"errorMessage":"USDC not accepted for this listing"},{"pc":[415],"errorMessage":"can only call when creating"},{"pc":[194,220,240,260,285,320,355,388],"errorMessage":"can only call when not creating"},{"pc":[459,497,524,733,814,940,952,969,1142,1148,1153,1161],"errorMessage":"check GlobalState exists"},{"pc":[299],"errorMessage":"transaction type is axfer"},{"pc":[334],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiAFAAEEZIAFJgsBAAQVH3x1DW5leHRMaXN0aW5nSWQIbGlzdGluZ3MKbmV4dFNhbGVJZAt0b3RhbFZvbHVtZQl0b3RhbEZlZXMSbWFya2V0cGxhY2VGZWVSYXRlC3VzZGNBc3NldElkBmFjdGl2ZQVzYWxlczEbQQEcgggE6nFnwgSZSXPDBF5H7NME91SaUgSq/xDhBE505NMEHDlNaAQM0YQuNhoAjggAxACjAIAAXQBEADAAHAACIkMxGRREMRhEiAOsTwNPA1BPAlBMUClMULAjQzEZFEQxGEQ2GgEXiAN8KUxQsCNDMRkURDEYRDYaAReIA1cpTFCwI0MxGRREMRhENhoBF4gC1SgiTwJUKUxQsCNDMRkURDEYRDYaARcxFiMJSTgQJBJEiAFhKCJPAlQpTFCwI0MxGRREMRhENhoBFzEWIwlJOBAjEkSIAO8oIk8CVClMULAjQzEZFEQxGEQ2GgEXNhoCFzYaAxc2GgQXiABOFilMULAjQzEZFEQxGEQ2GgEXiAAWKCJPAlQpTFCwI0MxGUD/HjEYFEQjQ4oBATEAMgkSRCojZycEI2cnBSJnJwYiZycHJWcnCIv/ZyOJigQBIiplREAAEyojZycEI2cnBSJnJwYiZycHJWeL/UAABYv+QQBRI0QiKmVESRaL/BYxAIv9Fov+FjIHFjIHi/8IFiInB2VEFksHTwdQTwZQTwVQTwRQTwNQTwJQgAGAUExQK0sCUEy/JwlMUIABgL9JIwgqTGeJIkL/rIoCAYv+FitMUEm9RQFEvkRJIQRTKCJPAlQiUyMSREmBSFsyBw1ESYEwW0lEi/84CElPAhJEi/84BzIKEkSL/zgAMQASRDEATCOIAF5II4mKAgGL/hYrTFBJvUUBRL5ESSEEUygiTwJUIlMjEkRJgUhbMgcNREmBOFtJRIv/OBJJTwISRIv/OBQyChJEi/84ADEAEkSL/zgRIicIZUQSRDEATIECiAADSCOJigQBi/4lCkmL/kwJi/8jEkEAxrGL/FcQILIHsggjshAisgGzsYv8VwgIi/yBCFsjshKL/bIUshEkshAisgGzIicEZURJFov8VxAgi/4Wi/8WMgcWSwRLB1BLBFCL/VBPA1BPAlBMUCcKTwNQTL9MIwgnBExni/xXAAiL/FcwCIv8VzgIi/xXQAiL/FdICIv8V1EITwVPB1BPBlBPBVBPBFBPA1BPAlAoUExQi/wiWxYrSwFQTwK/JwlMUCi/IicFZUSL/ggnBUxnIicGZUSLAAgnBkxni/xMibEiJwhlRIv8VxAgTwKyErIUshEkshAisgGzQv8uigEBi/8WK0sBUEm9RQFESb5ESVcQIEkxABJESwEhBFMoIk8CVCJTIxJESwFXAAhLAlcICEsDVzAISwRXOAhLBVdACEsGV0gITwdXUQhPBk8GUE8GUE8FUE8EUE8DUE8CUChQTFC/JwlMUCi/I4mKAQGL/xYrTFBJvUUBRL5EiYoBAYv/FicKTFBJvUUBRL5EiSInBWVEFiInBmVEFiIqZUQjCRYiJwRlRCMJFok=","clear":"CoEBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type InstrumentListing = {
  listingId: bigint,
  instrumentId: bigint,
  seller: string,
  askPriceAlgo: bigint,
  askPriceUsdc: bigint,
  listingTime: bigint,
  validUntil: bigint,
  isActive: boolean,
  marketplaceFee: bigint
}


/**
 * Converts the ABI tuple representation of a InstrumentListing to the struct representation
 */
export function InstrumentListingFromTuple(abiTuple: [bigint, bigint, string, bigint, bigint, bigint, bigint, boolean, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.InstrumentListing, APP_SPEC.structs) as InstrumentListing
}

export type InstrumentSale = {
  saleId: bigint,
  instrumentId: bigint,
  seller: string,
  buyer: string,
  salePrice: bigint,
  currency: bigint,
  saleTime: bigint
}


/**
 * Converts the ABI tuple representation of a InstrumentSale to the struct representation
 */
export function InstrumentSaleFromTuple(abiTuple: [bigint, bigint, string, string, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.InstrumentSale, APP_SPEC.structs) as InstrumentSale
}

/**
 * The argument types for the AtomicMarketplaceV3 contract
 */
export type AtomicMarketplaceV3Args = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'initialize(uint64)bool': {
      usdcAssetId: bigint | number
    }
    'listInstrument(uint64,uint64,uint64,uint64)uint64': {
      instrumentId: bigint | number
      askPriceAlgo: bigint | number
      askPriceUsdc: bigint | number
      validityPeriod: bigint | number
    }
    'purchaseWithAlgo(uint64,pay)bool': {
      listingId: bigint | number
      payment: AppMethodCallTransactionArgument
    }
    'purchaseWithUSDC(uint64,axfer)bool': {
      listingId: bigint | number
      payment: AppMethodCallTransactionArgument
    }
    'cancelListing(uint64)bool': {
      listingId: bigint | number
    }
    'getListing(uint64)(uint64,uint64,address,uint64,uint64,uint64,uint64,bool,uint64)': {
      listingId: bigint | number
    }
    'getSale(uint64)(uint64,uint64,address,address,uint64,uint64,uint64)': {
      saleId: bigint | number
    }
    'getMarketplaceStats()(uint64,uint64,uint64,uint64)': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'initialize(uint64)bool': [usdcAssetId: bigint | number]
    'listInstrument(uint64,uint64,uint64,uint64)uint64': [instrumentId: bigint | number, askPriceAlgo: bigint | number, askPriceUsdc: bigint | number, validityPeriod: bigint | number]
    'purchaseWithAlgo(uint64,pay)bool': [listingId: bigint | number, payment: AppMethodCallTransactionArgument]
    'purchaseWithUSDC(uint64,axfer)bool': [listingId: bigint | number, payment: AppMethodCallTransactionArgument]
    'cancelListing(uint64)bool': [listingId: bigint | number]
    'getListing(uint64)(uint64,uint64,address,uint64,uint64,uint64,uint64,bool,uint64)': [listingId: bigint | number]
    'getSale(uint64)(uint64,uint64,address,address,uint64,uint64,uint64)': [saleId: bigint | number]
    'getMarketplaceStats()(uint64,uint64,uint64,uint64)': []
  }
}

/**
 * The return type for each method
 */
export type AtomicMarketplaceV3Returns = {
  'initialize(uint64)bool': boolean
  'listInstrument(uint64,uint64,uint64,uint64)uint64': bigint
  'purchaseWithAlgo(uint64,pay)bool': boolean
  'purchaseWithUSDC(uint64,axfer)bool': boolean
  'cancelListing(uint64)bool': boolean
  'getListing(uint64)(uint64,uint64,address,uint64,uint64,uint64,uint64,bool,uint64)': InstrumentListing
  'getSale(uint64)(uint64,uint64,address,address,uint64,uint64,uint64)': InstrumentSale
  'getMarketplaceStats()(uint64,uint64,uint64,uint64)': [bigint, bigint, bigint, bigint]
}

/**
 * Defines the types of available calls and state of the AtomicMarketplaceV3 smart contract.
 */
export type AtomicMarketplaceV3Types = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'initialize(uint64)bool' | 'initialize', {
      argsObj: AtomicMarketplaceV3Args['obj']['initialize(uint64)bool']
      argsTuple: AtomicMarketplaceV3Args['tuple']['initialize(uint64)bool']
      returns: AtomicMarketplaceV3Returns['initialize(uint64)bool']
    }>
    & Record<'listInstrument(uint64,uint64,uint64,uint64)uint64' | 'listInstrument', {
      argsObj: AtomicMarketplaceV3Args['obj']['listInstrument(uint64,uint64,uint64,uint64)uint64']
      argsTuple: AtomicMarketplaceV3Args['tuple']['listInstrument(uint64,uint64,uint64,uint64)uint64']
      returns: AtomicMarketplaceV3Returns['listInstrument(uint64,uint64,uint64,uint64)uint64']
    }>
    & Record<'purchaseWithAlgo(uint64,pay)bool' | 'purchaseWithAlgo', {
      argsObj: AtomicMarketplaceV3Args['obj']['purchaseWithAlgo(uint64,pay)bool']
      argsTuple: AtomicMarketplaceV3Args['tuple']['purchaseWithAlgo(uint64,pay)bool']
      returns: AtomicMarketplaceV3Returns['purchaseWithAlgo(uint64,pay)bool']
    }>
    & Record<'purchaseWithUSDC(uint64,axfer)bool' | 'purchaseWithUSDC', {
      argsObj: AtomicMarketplaceV3Args['obj']['purchaseWithUSDC(uint64,axfer)bool']
      argsTuple: AtomicMarketplaceV3Args['tuple']['purchaseWithUSDC(uint64,axfer)bool']
      returns: AtomicMarketplaceV3Returns['purchaseWithUSDC(uint64,axfer)bool']
    }>
    & Record<'cancelListing(uint64)bool' | 'cancelListing', {
      argsObj: AtomicMarketplaceV3Args['obj']['cancelListing(uint64)bool']
      argsTuple: AtomicMarketplaceV3Args['tuple']['cancelListing(uint64)bool']
      returns: AtomicMarketplaceV3Returns['cancelListing(uint64)bool']
    }>
    & Record<'getListing(uint64)(uint64,uint64,address,uint64,uint64,uint64,uint64,bool,uint64)' | 'getListing', {
      argsObj: AtomicMarketplaceV3Args['obj']['getListing(uint64)(uint64,uint64,address,uint64,uint64,uint64,uint64,bool,uint64)']
      argsTuple: AtomicMarketplaceV3Args['tuple']['getListing(uint64)(uint64,uint64,address,uint64,uint64,uint64,uint64,bool,uint64)']
      returns: AtomicMarketplaceV3Returns['getListing(uint64)(uint64,uint64,address,uint64,uint64,uint64,uint64,bool,uint64)']
    }>
    & Record<'getSale(uint64)(uint64,uint64,address,address,uint64,uint64,uint64)' | 'getSale', {
      argsObj: AtomicMarketplaceV3Args['obj']['getSale(uint64)(uint64,uint64,address,address,uint64,uint64,uint64)']
      argsTuple: AtomicMarketplaceV3Args['tuple']['getSale(uint64)(uint64,uint64,address,address,uint64,uint64,uint64)']
      returns: AtomicMarketplaceV3Returns['getSale(uint64)(uint64,uint64,address,address,uint64,uint64,uint64)']
    }>
    & Record<'getMarketplaceStats()(uint64,uint64,uint64,uint64)' | 'getMarketplaceStats', {
      argsObj: AtomicMarketplaceV3Args['obj']['getMarketplaceStats()(uint64,uint64,uint64,uint64)']
      argsTuple: AtomicMarketplaceV3Args['tuple']['getMarketplaceStats()(uint64,uint64,uint64,uint64)']
      returns: AtomicMarketplaceV3Returns['getMarketplaceStats()(uint64,uint64,uint64,uint64)']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        /**
         * Global state
         */
        nextListingId: bigint
        nextSaleId: bigint
        totalVolume: bigint
        totalFees: bigint
        marketplaceFeeRate: bigint
        usdcAssetId: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        /**
         * Storage maps
         */
        listings: Map<bigint | number, InstrumentListing>
        sales: Map<bigint | number, InstrumentSale>
        activeListings: Map<bigint | number, boolean>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type AtomicMarketplaceV3Signatures = keyof AtomicMarketplaceV3Types['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type AtomicMarketplaceV3NonVoidMethodSignatures = keyof AtomicMarketplaceV3Types['methods'] extends infer T ? T extends keyof AtomicMarketplaceV3Types['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the AtomicMarketplaceV3 smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends AtomicMarketplaceV3Signatures> = AtomicMarketplaceV3Types['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the AtomicMarketplaceV3 smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AtomicMarketplaceV3Signatures> = AtomicMarketplaceV3Types['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = AtomicMarketplaceV3Types['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = AtomicMarketplaceV3Types['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type AtomicMarketplaceV3CreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type AtomicMarketplaceV3DeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: AtomicMarketplaceV3CreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the AtomicMarketplaceV3 smart contract
 */
export abstract class AtomicMarketplaceV3ParamsFactory {
  /**
   * Constructs a no op call for the initialize(uint64)bool ABI method
   *
   * Initialize marketplace
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static initialize(params: CallParams<AtomicMarketplaceV3Args['obj']['initialize(uint64)bool'] | AtomicMarketplaceV3Args['tuple']['initialize(uint64)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'initialize(uint64)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.usdcAssetId],
    }
  }
  /**
   * Constructs a no op call for the listInstrument(uint64,uint64,uint64,uint64)uint64 ABI method
   *
   * List instrument for sale
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static listInstrument(params: CallParams<AtomicMarketplaceV3Args['obj']['listInstrument(uint64,uint64,uint64,uint64)uint64'] | AtomicMarketplaceV3Args['tuple']['listInstrument(uint64,uint64,uint64,uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'listInstrument(uint64,uint64,uint64,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.instrumentId, params.args.askPriceAlgo, params.args.askPriceUsdc, params.args.validityPeriod],
    }
  }
  /**
   * Constructs a no op call for the purchaseWithAlgo(uint64,pay)bool ABI method
   *
   * Purchase instrument with ALGO payment
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static purchaseWithAlgo(params: CallParams<AtomicMarketplaceV3Args['obj']['purchaseWithAlgo(uint64,pay)bool'] | AtomicMarketplaceV3Args['tuple']['purchaseWithAlgo(uint64,pay)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'purchaseWithAlgo(uint64,pay)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.listingId, params.args.payment],
    }
  }
  /**
   * Constructs a no op call for the purchaseWithUSDC(uint64,axfer)bool ABI method
   *
   * Purchase instrument with USDC payment
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static purchaseWithUsdc(params: CallParams<AtomicMarketplaceV3Args['obj']['purchaseWithUSDC(uint64,axfer)bool'] | AtomicMarketplaceV3Args['tuple']['purchaseWithUSDC(uint64,axfer)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'purchaseWithUSDC(uint64,axfer)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.listingId, params.args.payment],
    }
  }
  /**
   * Constructs a no op call for the cancelListing(uint64)bool ABI method
   *
   * Cancel listing
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static cancelListing(params: CallParams<AtomicMarketplaceV3Args['obj']['cancelListing(uint64)bool'] | AtomicMarketplaceV3Args['tuple']['cancelListing(uint64)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'cancelListing(uint64)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.listingId],
    }
  }
  /**
   * Constructs a no op call for the getListing(uint64)(uint64,uint64,address,uint64,uint64,uint64,uint64,bool,uint64) ABI method
   *
   * Get listing details
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getListing(params: CallParams<AtomicMarketplaceV3Args['obj']['getListing(uint64)(uint64,uint64,address,uint64,uint64,uint64,uint64,bool,uint64)'] | AtomicMarketplaceV3Args['tuple']['getListing(uint64)(uint64,uint64,address,uint64,uint64,uint64,uint64,bool,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getListing(uint64)(uint64,uint64,address,uint64,uint64,uint64,uint64,bool,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.listingId],
    }
  }
  /**
   * Constructs a no op call for the getSale(uint64)(uint64,uint64,address,address,uint64,uint64,uint64) ABI method
   *
   * Get sale details
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getSale(params: CallParams<AtomicMarketplaceV3Args['obj']['getSale(uint64)(uint64,uint64,address,address,uint64,uint64,uint64)'] | AtomicMarketplaceV3Args['tuple']['getSale(uint64)(uint64,uint64,address,address,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getSale(uint64)(uint64,uint64,address,address,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.saleId],
    }
  }
  /**
   * Constructs a no op call for the getMarketplaceStats()(uint64,uint64,uint64,uint64) ABI method
   *
   * Get marketplace statistics
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getMarketplaceStats(params: CallParams<AtomicMarketplaceV3Args['obj']['getMarketplaceStats()(uint64,uint64,uint64,uint64)'] | AtomicMarketplaceV3Args['tuple']['getMarketplaceStats()(uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getMarketplaceStats()(uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the AtomicMarketplaceV3 smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class AtomicMarketplaceV3Factory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `AtomicMarketplaceV3Factory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new AtomicMarketplaceV3Client(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new AtomicMarketplaceV3Client(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the AtomicMarketplaceV3 smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: AtomicMarketplaceV3DeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new AtomicMarketplaceV3Client(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AtomicMarketplaceV3 smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AtomicMarketplaceV3 smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AtomicMarketplaceV3 smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new AtomicMarketplaceV3Client(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the AtomicMarketplaceV3 smart contract
 */
export class AtomicMarketplaceV3Client {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `AtomicMarketplaceV3Client`
   *
   * @param appClient An `AppClient` instance which has been created with the AtomicMarketplaceV3 app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `AtomicMarketplaceV3Client`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends AtomicMarketplaceV3NonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `AtomicMarketplaceV3Client` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<AtomicMarketplaceV3Client> {
    return new AtomicMarketplaceV3Client(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `AtomicMarketplaceV3Client` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<AtomicMarketplaceV3Client> {
    return new AtomicMarketplaceV3Client(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the AtomicMarketplaceV3 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the AtomicMarketplaceV3 smart contract using the `initialize(uint64)bool` ABI method.
     *
     * Initialize marketplace
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    initialize: (params: CallParams<AtomicMarketplaceV3Args['obj']['initialize(uint64)bool'] | AtomicMarketplaceV3Args['tuple']['initialize(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AtomicMarketplaceV3ParamsFactory.initialize(params))
    },

    /**
     * Makes a call to the AtomicMarketplaceV3 smart contract using the `listInstrument(uint64,uint64,uint64,uint64)uint64` ABI method.
     *
     * List instrument for sale
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    listInstrument: (params: CallParams<AtomicMarketplaceV3Args['obj']['listInstrument(uint64,uint64,uint64,uint64)uint64'] | AtomicMarketplaceV3Args['tuple']['listInstrument(uint64,uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AtomicMarketplaceV3ParamsFactory.listInstrument(params))
    },

    /**
     * Makes a call to the AtomicMarketplaceV3 smart contract using the `purchaseWithAlgo(uint64,pay)bool` ABI method.
     *
     * Purchase instrument with ALGO payment
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    purchaseWithAlgo: (params: CallParams<AtomicMarketplaceV3Args['obj']['purchaseWithAlgo(uint64,pay)bool'] | AtomicMarketplaceV3Args['tuple']['purchaseWithAlgo(uint64,pay)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AtomicMarketplaceV3ParamsFactory.purchaseWithAlgo(params))
    },

    /**
     * Makes a call to the AtomicMarketplaceV3 smart contract using the `purchaseWithUSDC(uint64,axfer)bool` ABI method.
     *
     * Purchase instrument with USDC payment
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    purchaseWithUsdc: (params: CallParams<AtomicMarketplaceV3Args['obj']['purchaseWithUSDC(uint64,axfer)bool'] | AtomicMarketplaceV3Args['tuple']['purchaseWithUSDC(uint64,axfer)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AtomicMarketplaceV3ParamsFactory.purchaseWithUsdc(params))
    },

    /**
     * Makes a call to the AtomicMarketplaceV3 smart contract using the `cancelListing(uint64)bool` ABI method.
     *
     * Cancel listing
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    cancelListing: (params: CallParams<AtomicMarketplaceV3Args['obj']['cancelListing(uint64)bool'] | AtomicMarketplaceV3Args['tuple']['cancelListing(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AtomicMarketplaceV3ParamsFactory.cancelListing(params))
    },

    /**
     * Makes a call to the AtomicMarketplaceV3 smart contract using the `getListing(uint64)(uint64,uint64,address,uint64,uint64,uint64,uint64,bool,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get listing details
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getListing: (params: CallParams<AtomicMarketplaceV3Args['obj']['getListing(uint64)(uint64,uint64,address,uint64,uint64,uint64,uint64,bool,uint64)'] | AtomicMarketplaceV3Args['tuple']['getListing(uint64)(uint64,uint64,address,uint64,uint64,uint64,uint64,bool,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AtomicMarketplaceV3ParamsFactory.getListing(params))
    },

    /**
     * Makes a call to the AtomicMarketplaceV3 smart contract using the `getSale(uint64)(uint64,uint64,address,address,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get sale details
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getSale: (params: CallParams<AtomicMarketplaceV3Args['obj']['getSale(uint64)(uint64,uint64,address,address,uint64,uint64,uint64)'] | AtomicMarketplaceV3Args['tuple']['getSale(uint64)(uint64,uint64,address,address,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AtomicMarketplaceV3ParamsFactory.getSale(params))
    },

    /**
     * Makes a call to the AtomicMarketplaceV3 smart contract using the `getMarketplaceStats()(uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get marketplace statistics
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getMarketplaceStats: (params: CallParams<AtomicMarketplaceV3Args['obj']['getMarketplaceStats()(uint64,uint64,uint64,uint64)'] | AtomicMarketplaceV3Args['tuple']['getMarketplaceStats()(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AtomicMarketplaceV3ParamsFactory.getMarketplaceStats(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the AtomicMarketplaceV3 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the AtomicMarketplaceV3 smart contract using the `initialize(uint64)bool` ABI method.
     *
     * Initialize marketplace
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    initialize: (params: CallParams<AtomicMarketplaceV3Args['obj']['initialize(uint64)bool'] | AtomicMarketplaceV3Args['tuple']['initialize(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AtomicMarketplaceV3ParamsFactory.initialize(params))
    },

    /**
     * Makes a call to the AtomicMarketplaceV3 smart contract using the `listInstrument(uint64,uint64,uint64,uint64)uint64` ABI method.
     *
     * List instrument for sale
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    listInstrument: (params: CallParams<AtomicMarketplaceV3Args['obj']['listInstrument(uint64,uint64,uint64,uint64)uint64'] | AtomicMarketplaceV3Args['tuple']['listInstrument(uint64,uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AtomicMarketplaceV3ParamsFactory.listInstrument(params))
    },

    /**
     * Makes a call to the AtomicMarketplaceV3 smart contract using the `purchaseWithAlgo(uint64,pay)bool` ABI method.
     *
     * Purchase instrument with ALGO payment
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    purchaseWithAlgo: (params: CallParams<AtomicMarketplaceV3Args['obj']['purchaseWithAlgo(uint64,pay)bool'] | AtomicMarketplaceV3Args['tuple']['purchaseWithAlgo(uint64,pay)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AtomicMarketplaceV3ParamsFactory.purchaseWithAlgo(params))
    },

    /**
     * Makes a call to the AtomicMarketplaceV3 smart contract using the `purchaseWithUSDC(uint64,axfer)bool` ABI method.
     *
     * Purchase instrument with USDC payment
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    purchaseWithUsdc: (params: CallParams<AtomicMarketplaceV3Args['obj']['purchaseWithUSDC(uint64,axfer)bool'] | AtomicMarketplaceV3Args['tuple']['purchaseWithUSDC(uint64,axfer)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AtomicMarketplaceV3ParamsFactory.purchaseWithUsdc(params))
    },

    /**
     * Makes a call to the AtomicMarketplaceV3 smart contract using the `cancelListing(uint64)bool` ABI method.
     *
     * Cancel listing
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    cancelListing: (params: CallParams<AtomicMarketplaceV3Args['obj']['cancelListing(uint64)bool'] | AtomicMarketplaceV3Args['tuple']['cancelListing(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AtomicMarketplaceV3ParamsFactory.cancelListing(params))
    },

    /**
     * Makes a call to the AtomicMarketplaceV3 smart contract using the `getListing(uint64)(uint64,uint64,address,uint64,uint64,uint64,uint64,bool,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get listing details
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getListing: (params: CallParams<AtomicMarketplaceV3Args['obj']['getListing(uint64)(uint64,uint64,address,uint64,uint64,uint64,uint64,bool,uint64)'] | AtomicMarketplaceV3Args['tuple']['getListing(uint64)(uint64,uint64,address,uint64,uint64,uint64,uint64,bool,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AtomicMarketplaceV3ParamsFactory.getListing(params))
    },

    /**
     * Makes a call to the AtomicMarketplaceV3 smart contract using the `getSale(uint64)(uint64,uint64,address,address,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get sale details
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getSale: (params: CallParams<AtomicMarketplaceV3Args['obj']['getSale(uint64)(uint64,uint64,address,address,uint64,uint64,uint64)'] | AtomicMarketplaceV3Args['tuple']['getSale(uint64)(uint64,uint64,address,address,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AtomicMarketplaceV3ParamsFactory.getSale(params))
    },

    /**
     * Makes a call to the AtomicMarketplaceV3 smart contract using the `getMarketplaceStats()(uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get marketplace statistics
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getMarketplaceStats: (params: CallParams<AtomicMarketplaceV3Args['obj']['getMarketplaceStats()(uint64,uint64,uint64,uint64)'] | AtomicMarketplaceV3Args['tuple']['getMarketplaceStats()(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AtomicMarketplaceV3ParamsFactory.getMarketplaceStats(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the AtomicMarketplaceV3 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the AtomicMarketplaceV3 smart contract using the `initialize(uint64)bool` ABI method.
     *
     * Initialize marketplace
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    initialize: async (params: CallParams<AtomicMarketplaceV3Args['obj']['initialize(uint64)bool'] | AtomicMarketplaceV3Args['tuple']['initialize(uint64)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AtomicMarketplaceV3ParamsFactory.initialize(params))
      return {...result, return: result.return as unknown as (undefined | AtomicMarketplaceV3Returns['initialize(uint64)bool'])}
    },

    /**
     * Makes a call to the AtomicMarketplaceV3 smart contract using the `listInstrument(uint64,uint64,uint64,uint64)uint64` ABI method.
     *
     * List instrument for sale
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    listInstrument: async (params: CallParams<AtomicMarketplaceV3Args['obj']['listInstrument(uint64,uint64,uint64,uint64)uint64'] | AtomicMarketplaceV3Args['tuple']['listInstrument(uint64,uint64,uint64,uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AtomicMarketplaceV3ParamsFactory.listInstrument(params))
      return {...result, return: result.return as unknown as (undefined | AtomicMarketplaceV3Returns['listInstrument(uint64,uint64,uint64,uint64)uint64'])}
    },

    /**
     * Makes a call to the AtomicMarketplaceV3 smart contract using the `purchaseWithAlgo(uint64,pay)bool` ABI method.
     *
     * Purchase instrument with ALGO payment
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    purchaseWithAlgo: async (params: CallParams<AtomicMarketplaceV3Args['obj']['purchaseWithAlgo(uint64,pay)bool'] | AtomicMarketplaceV3Args['tuple']['purchaseWithAlgo(uint64,pay)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AtomicMarketplaceV3ParamsFactory.purchaseWithAlgo(params))
      return {...result, return: result.return as unknown as (undefined | AtomicMarketplaceV3Returns['purchaseWithAlgo(uint64,pay)bool'])}
    },

    /**
     * Makes a call to the AtomicMarketplaceV3 smart contract using the `purchaseWithUSDC(uint64,axfer)bool` ABI method.
     *
     * Purchase instrument with USDC payment
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    purchaseWithUsdc: async (params: CallParams<AtomicMarketplaceV3Args['obj']['purchaseWithUSDC(uint64,axfer)bool'] | AtomicMarketplaceV3Args['tuple']['purchaseWithUSDC(uint64,axfer)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AtomicMarketplaceV3ParamsFactory.purchaseWithUsdc(params))
      return {...result, return: result.return as unknown as (undefined | AtomicMarketplaceV3Returns['purchaseWithUSDC(uint64,axfer)bool'])}
    },

    /**
     * Makes a call to the AtomicMarketplaceV3 smart contract using the `cancelListing(uint64)bool` ABI method.
     *
     * Cancel listing
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    cancelListing: async (params: CallParams<AtomicMarketplaceV3Args['obj']['cancelListing(uint64)bool'] | AtomicMarketplaceV3Args['tuple']['cancelListing(uint64)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AtomicMarketplaceV3ParamsFactory.cancelListing(params))
      return {...result, return: result.return as unknown as (undefined | AtomicMarketplaceV3Returns['cancelListing(uint64)bool'])}
    },

    /**
     * Makes a call to the AtomicMarketplaceV3 smart contract using the `getListing(uint64)(uint64,uint64,address,uint64,uint64,uint64,uint64,bool,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get listing details
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getListing: async (params: CallParams<AtomicMarketplaceV3Args['obj']['getListing(uint64)(uint64,uint64,address,uint64,uint64,uint64,uint64,bool,uint64)'] | AtomicMarketplaceV3Args['tuple']['getListing(uint64)(uint64,uint64,address,uint64,uint64,uint64,uint64,bool,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AtomicMarketplaceV3ParamsFactory.getListing(params))
      return {...result, return: result.return as unknown as (undefined | AtomicMarketplaceV3Returns['getListing(uint64)(uint64,uint64,address,uint64,uint64,uint64,uint64,bool,uint64)'])}
    },

    /**
     * Makes a call to the AtomicMarketplaceV3 smart contract using the `getSale(uint64)(uint64,uint64,address,address,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get sale details
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getSale: async (params: CallParams<AtomicMarketplaceV3Args['obj']['getSale(uint64)(uint64,uint64,address,address,uint64,uint64,uint64)'] | AtomicMarketplaceV3Args['tuple']['getSale(uint64)(uint64,uint64,address,address,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AtomicMarketplaceV3ParamsFactory.getSale(params))
      return {...result, return: result.return as unknown as (undefined | AtomicMarketplaceV3Returns['getSale(uint64)(uint64,uint64,address,address,uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the AtomicMarketplaceV3 smart contract using the `getMarketplaceStats()(uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get marketplace statistics
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getMarketplaceStats: async (params: CallParams<AtomicMarketplaceV3Args['obj']['getMarketplaceStats()(uint64,uint64,uint64,uint64)'] | AtomicMarketplaceV3Args['tuple']['getMarketplaceStats()(uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AtomicMarketplaceV3ParamsFactory.getMarketplaceStats(params))
      return {...result, return: result.return as unknown as (undefined | AtomicMarketplaceV3Returns['getMarketplaceStats()(uint64,uint64,uint64,uint64)'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new AtomicMarketplaceV3Client(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the AtomicMarketplaceV3 smart contract using the `getListing(uint64)(uint64,uint64,address,uint64,uint64,uint64,uint64,bool,uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get listing details
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getListing(params: CallParams<AtomicMarketplaceV3Args['obj']['getListing(uint64)(uint64,uint64,address,uint64,uint64,uint64,uint64,bool,uint64)'] | AtomicMarketplaceV3Args['tuple']['getListing(uint64)(uint64,uint64,address,uint64,uint64,uint64,uint64,bool,uint64)']>) {
    const result = await this.appClient.send.call(AtomicMarketplaceV3ParamsFactory.getListing(params))
    return result.return as unknown as AtomicMarketplaceV3Returns['getListing(uint64)(uint64,uint64,address,uint64,uint64,uint64,uint64,bool,uint64)']
  }

  /**
   * Makes a readonly (simulated) call to the AtomicMarketplaceV3 smart contract using the `getSale(uint64)(uint64,uint64,address,address,uint64,uint64,uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get sale details
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getSale(params: CallParams<AtomicMarketplaceV3Args['obj']['getSale(uint64)(uint64,uint64,address,address,uint64,uint64,uint64)'] | AtomicMarketplaceV3Args['tuple']['getSale(uint64)(uint64,uint64,address,address,uint64,uint64,uint64)']>) {
    const result = await this.appClient.send.call(AtomicMarketplaceV3ParamsFactory.getSale(params))
    return result.return as unknown as AtomicMarketplaceV3Returns['getSale(uint64)(uint64,uint64,address,address,uint64,uint64,uint64)']
  }

  /**
   * Makes a readonly (simulated) call to the AtomicMarketplaceV3 smart contract using the `getMarketplaceStats()(uint64,uint64,uint64,uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get marketplace statistics
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getMarketplaceStats(params: CallParams<AtomicMarketplaceV3Args['obj']['getMarketplaceStats()(uint64,uint64,uint64,uint64)'] | AtomicMarketplaceV3Args['tuple']['getMarketplaceStats()(uint64,uint64,uint64,uint64)']> = {args: []}) {
    const result = await this.appClient.send.call(AtomicMarketplaceV3ParamsFactory.getMarketplaceStats(params))
    return result.return as unknown as AtomicMarketplaceV3Returns['getMarketplaceStats()(uint64,uint64,uint64,uint64)']
  }

  /**
   * Methods to access state for the current AtomicMarketplaceV3 app
   */
  state = {
    /**
     * Methods to access global state for the current AtomicMarketplaceV3 app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          nextListingId: result.nextListingId,
          nextSaleId: result.nextSaleId,
          totalVolume: result.totalVolume,
          totalFees: result.totalFees,
          marketplaceFeeRate: result.marketplaceFeeRate,
          usdcAssetId: result.usdcAssetId,
        }
      },
      /**
       * Get the current value of the nextListingId key in global state
       */
      nextListingId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("nextListingId")) as bigint | undefined },
      /**
       * Get the current value of the nextSaleId key in global state
       */
      nextSaleId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("nextSaleId")) as bigint | undefined },
      /**
       * Get the current value of the totalVolume key in global state
       */
      totalVolume: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalVolume")) as bigint | undefined },
      /**
       * Get the current value of the totalFees key in global state
       */
      totalFees: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalFees")) as bigint | undefined },
      /**
       * Get the current value of the marketplaceFeeRate key in global state
       */
      marketplaceFeeRate: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("marketplaceFeeRate")) as bigint | undefined },
      /**
       * Get the current value of the usdcAssetId key in global state
       */
      usdcAssetId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("usdcAssetId")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current AtomicMarketplaceV3 app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the listings map in box state
       */
      listings: {
        /**
         * Get all current values of the listings map in box state
         */
        getMap: async (): Promise<Map<bigint, InstrumentListing>> => { return (await this.appClient.state.box.getMap("listings")) as Map<bigint, InstrumentListing> },
        /**
         * Get a current value of the listings map by key from box state
         */
        value: async (key: bigint | number): Promise<InstrumentListing | undefined> => { return await this.appClient.state.box.getMapValue("listings", key) as InstrumentListing | undefined },
      },
      /**
       * Get values from the sales map in box state
       */
      sales: {
        /**
         * Get all current values of the sales map in box state
         */
        getMap: async (): Promise<Map<bigint, InstrumentSale>> => { return (await this.appClient.state.box.getMap("sales")) as Map<bigint, InstrumentSale> },
        /**
         * Get a current value of the sales map by key from box state
         */
        value: async (key: bigint | number): Promise<InstrumentSale | undefined> => { return await this.appClient.state.box.getMapValue("sales", key) as InstrumentSale | undefined },
      },
      /**
       * Get values from the activeListings map in box state
       */
      activeListings: {
        /**
         * Get all current values of the activeListings map in box state
         */
        getMap: async (): Promise<Map<bigint, boolean>> => { return (await this.appClient.state.box.getMap("activeListings")) as Map<bigint, boolean> },
        /**
         * Get a current value of the activeListings map by key from box state
         */
        value: async (key: bigint | number): Promise<boolean | undefined> => { return await this.appClient.state.box.getMapValue("activeListings", key) as boolean | undefined },
      },
    },
  }

  public newGroup(): AtomicMarketplaceV3Composer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a initialize(uint64)bool method call against the AtomicMarketplaceV3 contract
       */
      initialize(params: CallParams<AtomicMarketplaceV3Args['obj']['initialize(uint64)bool'] | AtomicMarketplaceV3Args['tuple']['initialize(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.initialize(params)))
        resultMappers.push((v) => client.decodeReturnValue('initialize(uint64)bool', v))
        return this
      },
      /**
       * Add a listInstrument(uint64,uint64,uint64,uint64)uint64 method call against the AtomicMarketplaceV3 contract
       */
      listInstrument(params: CallParams<AtomicMarketplaceV3Args['obj']['listInstrument(uint64,uint64,uint64,uint64)uint64'] | AtomicMarketplaceV3Args['tuple']['listInstrument(uint64,uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.listInstrument(params)))
        resultMappers.push((v) => client.decodeReturnValue('listInstrument(uint64,uint64,uint64,uint64)uint64', v))
        return this
      },
      /**
       * Add a purchaseWithAlgo(uint64,pay)bool method call against the AtomicMarketplaceV3 contract
       */
      purchaseWithAlgo(params: CallParams<AtomicMarketplaceV3Args['obj']['purchaseWithAlgo(uint64,pay)bool'] | AtomicMarketplaceV3Args['tuple']['purchaseWithAlgo(uint64,pay)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.purchaseWithAlgo(params)))
        resultMappers.push((v) => client.decodeReturnValue('purchaseWithAlgo(uint64,pay)bool', v))
        return this
      },
      /**
       * Add a purchaseWithUSDC(uint64,axfer)bool method call against the AtomicMarketplaceV3 contract
       */
      purchaseWithUsdc(params: CallParams<AtomicMarketplaceV3Args['obj']['purchaseWithUSDC(uint64,axfer)bool'] | AtomicMarketplaceV3Args['tuple']['purchaseWithUSDC(uint64,axfer)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.purchaseWithUsdc(params)))
        resultMappers.push((v) => client.decodeReturnValue('purchaseWithUSDC(uint64,axfer)bool', v))
        return this
      },
      /**
       * Add a cancelListing(uint64)bool method call against the AtomicMarketplaceV3 contract
       */
      cancelListing(params: CallParams<AtomicMarketplaceV3Args['obj']['cancelListing(uint64)bool'] | AtomicMarketplaceV3Args['tuple']['cancelListing(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.cancelListing(params)))
        resultMappers.push((v) => client.decodeReturnValue('cancelListing(uint64)bool', v))
        return this
      },
      /**
       * Add a getListing(uint64)(uint64,uint64,address,uint64,uint64,uint64,uint64,bool,uint64) method call against the AtomicMarketplaceV3 contract
       */
      getListing(params: CallParams<AtomicMarketplaceV3Args['obj']['getListing(uint64)(uint64,uint64,address,uint64,uint64,uint64,uint64,bool,uint64)'] | AtomicMarketplaceV3Args['tuple']['getListing(uint64)(uint64,uint64,address,uint64,uint64,uint64,uint64,bool,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getListing(params)))
        resultMappers.push((v) => client.decodeReturnValue('getListing(uint64)(uint64,uint64,address,uint64,uint64,uint64,uint64,bool,uint64)', v))
        return this
      },
      /**
       * Add a getSale(uint64)(uint64,uint64,address,address,uint64,uint64,uint64) method call against the AtomicMarketplaceV3 contract
       */
      getSale(params: CallParams<AtomicMarketplaceV3Args['obj']['getSale(uint64)(uint64,uint64,address,address,uint64,uint64,uint64)'] | AtomicMarketplaceV3Args['tuple']['getSale(uint64)(uint64,uint64,address,address,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getSale(params)))
        resultMappers.push((v) => client.decodeReturnValue('getSale(uint64)(uint64,uint64,address,address,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a getMarketplaceStats()(uint64,uint64,uint64,uint64) method call against the AtomicMarketplaceV3 contract
       */
      getMarketplaceStats(params: CallParams<AtomicMarketplaceV3Args['obj']['getMarketplaceStats()(uint64,uint64,uint64,uint64)'] | AtomicMarketplaceV3Args['tuple']['getMarketplaceStats()(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getMarketplaceStats(params)))
        resultMappers.push((v) => client.decodeReturnValue('getMarketplaceStats()(uint64,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a clear state call to the AtomicMarketplaceV3 contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as AtomicMarketplaceV3Composer
  }
}
export type AtomicMarketplaceV3Composer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the initialize(uint64)bool ABI method.
   *
   * Initialize marketplace
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initialize(params?: CallParams<AtomicMarketplaceV3Args['obj']['initialize(uint64)bool'] | AtomicMarketplaceV3Args['tuple']['initialize(uint64)bool']>): AtomicMarketplaceV3Composer<[...TReturns, AtomicMarketplaceV3Returns['initialize(uint64)bool'] | undefined]>

  /**
   * Calls the listInstrument(uint64,uint64,uint64,uint64)uint64 ABI method.
   *
   * List instrument for sale
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  listInstrument(params?: CallParams<AtomicMarketplaceV3Args['obj']['listInstrument(uint64,uint64,uint64,uint64)uint64'] | AtomicMarketplaceV3Args['tuple']['listInstrument(uint64,uint64,uint64,uint64)uint64']>): AtomicMarketplaceV3Composer<[...TReturns, AtomicMarketplaceV3Returns['listInstrument(uint64,uint64,uint64,uint64)uint64'] | undefined]>

  /**
   * Calls the purchaseWithAlgo(uint64,pay)bool ABI method.
   *
   * Purchase instrument with ALGO payment
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  purchaseWithAlgo(params?: CallParams<AtomicMarketplaceV3Args['obj']['purchaseWithAlgo(uint64,pay)bool'] | AtomicMarketplaceV3Args['tuple']['purchaseWithAlgo(uint64,pay)bool']>): AtomicMarketplaceV3Composer<[...TReturns, AtomicMarketplaceV3Returns['purchaseWithAlgo(uint64,pay)bool'] | undefined]>

  /**
   * Calls the purchaseWithUSDC(uint64,axfer)bool ABI method.
   *
   * Purchase instrument with USDC payment
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  purchaseWithUsdc(params?: CallParams<AtomicMarketplaceV3Args['obj']['purchaseWithUSDC(uint64,axfer)bool'] | AtomicMarketplaceV3Args['tuple']['purchaseWithUSDC(uint64,axfer)bool']>): AtomicMarketplaceV3Composer<[...TReturns, AtomicMarketplaceV3Returns['purchaseWithUSDC(uint64,axfer)bool'] | undefined]>

  /**
   * Calls the cancelListing(uint64)bool ABI method.
   *
   * Cancel listing
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  cancelListing(params?: CallParams<AtomicMarketplaceV3Args['obj']['cancelListing(uint64)bool'] | AtomicMarketplaceV3Args['tuple']['cancelListing(uint64)bool']>): AtomicMarketplaceV3Composer<[...TReturns, AtomicMarketplaceV3Returns['cancelListing(uint64)bool'] | undefined]>

  /**
   * Calls the getListing(uint64)(uint64,uint64,address,uint64,uint64,uint64,uint64,bool,uint64) ABI method.
   *
   * Get listing details
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getListing(params?: CallParams<AtomicMarketplaceV3Args['obj']['getListing(uint64)(uint64,uint64,address,uint64,uint64,uint64,uint64,bool,uint64)'] | AtomicMarketplaceV3Args['tuple']['getListing(uint64)(uint64,uint64,address,uint64,uint64,uint64,uint64,bool,uint64)']>): AtomicMarketplaceV3Composer<[...TReturns, AtomicMarketplaceV3Returns['getListing(uint64)(uint64,uint64,address,uint64,uint64,uint64,uint64,bool,uint64)'] | undefined]>

  /**
   * Calls the getSale(uint64)(uint64,uint64,address,address,uint64,uint64,uint64) ABI method.
   *
   * Get sale details
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getSale(params?: CallParams<AtomicMarketplaceV3Args['obj']['getSale(uint64)(uint64,uint64,address,address,uint64,uint64,uint64)'] | AtomicMarketplaceV3Args['tuple']['getSale(uint64)(uint64,uint64,address,address,uint64,uint64,uint64)']>): AtomicMarketplaceV3Composer<[...TReturns, AtomicMarketplaceV3Returns['getSale(uint64)(uint64,uint64,address,address,uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the getMarketplaceStats()(uint64,uint64,uint64,uint64) ABI method.
   *
   * Get marketplace statistics
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getMarketplaceStats(params?: CallParams<AtomicMarketplaceV3Args['obj']['getMarketplaceStats()(uint64,uint64,uint64,uint64)'] | AtomicMarketplaceV3Args['tuple']['getMarketplaceStats()(uint64,uint64,uint64,uint64)']>): AtomicMarketplaceV3Composer<[...TReturns, AtomicMarketplaceV3Returns['getMarketplaceStats()(uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the AtomicMarketplaceV3 smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): AtomicMarketplaceV3Composer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): AtomicMarketplaceV3Composer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<AtomicMarketplaceV3ComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<AtomicMarketplaceV3ComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<AtomicMarketplaceV3ComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<AtomicMarketplaceV3ComposerResults<TReturns>>
}
export type AtomicMarketplaceV3ComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

